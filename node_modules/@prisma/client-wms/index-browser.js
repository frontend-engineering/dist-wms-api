
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('./runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.14.0
 * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
 */
Prisma.prismaVersion = {
  client: "4.14.0",
  engine: "d9a4c5988f480fa576d43970d5a23641aa77bc9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.EquipmentScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  name: 'name',
  description: 'description',
  purchaseDate: 'purchaseDate',
  productLineId: 'productLineId'
};

exports.Prisma.InProcessInspectRecordScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  lot: 'lot',
  description: 'description',
  materialId: 'materialId',
  inspectorId: 'inspectorId',
  reviewerId: 'reviewerId'
};

exports.Prisma.IncomingInspectRecordScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  lot: 'lot',
  materialId: 'materialId',
  description: 'description',
  inspectorId: 'inspectorId',
  reviewerId: 'reviewerId',
  result: 'result'
};

exports.Prisma.MaterialScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  name: 'name',
  description: 'description'
};

exports.Prisma.MaterialSpecInspectScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  recordId: 'recordId',
  specId: 'specId',
  description: 'description',
  result: 'result'
};

exports.Prisma.MaterialSpecScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  name: 'name',
  description: 'description',
  materialId: 'materialId'
};

exports.Prisma.OperationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  name: 'name',
  description: 'description',
  materialId: 'materialId'
};

exports.Prisma.OperationSpecInspectScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  specId: 'specId',
  first: 'first',
  inProcess: 'inProcess',
  final: 'final'
};

exports.Prisma.OperationSpecScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  name: 'name',
  description: 'description',
  operationId: 'operationId'
};

exports.Prisma.ProductLineScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  name: 'name',
  description: 'description'
};

exports.Prisma.RepairMaterialInventoryScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  materialId: 'materialId',
  quantity: 'quantity'
};

exports.Prisma.RepairMaterialScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  name: 'name',
  description: 'description'
};

exports.Prisma.RepairPlanScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  description: 'description',
  equimentId: 'equimentId'
};

exports.Prisma.RepairRecordScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  equimentId: 'equimentId',
  description: 'description',
  status: 'status',
  type: 'type'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.TaskFormRelationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  taskDefinitionKey: 'taskDefinitionKey',
  formKey: 'formKey'
};

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  userId: 'userId',
  fullName: 'fullName'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  username: 'username',
  hashedPassword: 'hashedPassword',
  hashedRefreshToken: 'hashedRefreshToken',
  status: 'status',
  role: 'role'
};
exports.IncomingInspectResult = {
  ACCEPT: 'ACCEPT',
  RETURN: 'RETURN',
  DOWNGRADE: 'DOWNGRADE'
};

exports.RepairRecordStatus = {
  TO_ASSIGN: 'TO_ASSIGN',
  DOING: 'DOING',
  TO_REVIEW: 'TO_REVIEW',
  DONE: 'DONE'
};

exports.RepairType = {
  SCHEDULE: 'SCHEDULE',
  UNSCHEDULE: 'UNSCHEDULE'
};

exports.UserGroup = {
  ADMIN: 'ADMIN',
  USER: 'USER'
};

exports.UserStatus = {
  ACTIVE: 'ACTIVE',
  FORBIDDEN: 'FORBIDDEN'
};

exports.Prisma.ModelName = {
  TaskFormRelation: 'TaskFormRelation',
  User: 'User',
  UserProfile: 'UserProfile',
  ProductLine: 'ProductLine',
  Equipment: 'Equipment',
  RepairMaterial: 'RepairMaterial',
  RepairPlan: 'RepairPlan',
  RepairMaterialInventory: 'RepairMaterialInventory',
  RepairRecord: 'RepairRecord',
  Material: 'Material',
  MaterialSpec: 'MaterialSpec',
  Operation: 'Operation',
  OperationSpec: 'OperationSpec',
  IncomingInspectRecord: 'IncomingInspectRecord',
  MaterialSpecInspect: 'MaterialSpecInspect',
  InProcessInspectRecord: 'InProcessInspectRecord',
  OperationSpecInspect: 'OperationSpecInspect'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
