
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('./runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.14.0
 * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
 */
Prisma.prismaVersion = {
  client: "4.14.0",
  engine: "d9a4c5988f480fa576d43970d5a23641aa77bc9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.EquipmentScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  name: 'name',
  description: 'description',
  repairPlan: 'repairPlan',
  workStation: 'workStation',
  productLineId: 'productLineId'
};

exports.Prisma.IncomingInspectionRecordItemScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  result: 'result',
  inspectionIteration: 'inspectionIteration',
  incomingInspectionRecordId: 'incomingInspectionRecordId',
  incomingInspectionSpecItemId: 'incomingInspectionSpecItemId'
};

exports.Prisma.IncomingInspectionRecordScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  note: 'note',
  result: 'result',
  receiptId: 'receiptId',
  incomingInspectionSpecId: 'incomingInspectionSpecId'
};

exports.Prisma.IncomingInspectionSpecItemScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  no: 'no',
  name: 'name',
  spec: 'spec',
  incomingInspectionSpecId: 'incomingInspectionSpecId'
};

exports.Prisma.IncomingInspectionSpecScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  version: 'version',
  attachment: 'attachment',
  partVersionId: 'partVersionId'
};

exports.Prisma.NonconformItemScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  partId: 'partId',
  description: 'description',
  note: 'note'
};

exports.Prisma.OperationInspectionRecordItemScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  inspectionIteration: 'inspectionIteration',
  partOperationInspectionItemId: 'partOperationInspectionItemId',
  operationInspectionRecordId: 'operationInspectionRecordId'
};

exports.Prisma.OperationInspectionRecordScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  note: 'note',
  workerOrderId: 'workerOrderId',
  inspectorId: 'inspectorId',
  reviewerId: 'reviewerId'
};

exports.Prisma.PartOperationInspectionItemScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  name: 'name',
  partOperationId: 'partOperationId'
};

exports.Prisma.PartOperationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  version: 'version',
  no: 'no',
  name: 'name',
  partId: 'partId'
};

exports.Prisma.PartScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  no: 'no',
  name: 'name'
};

exports.Prisma.PartVersionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  version: 'version',
  note: 'note',
  partId: 'partId'
};

exports.Prisma.ProductLineScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  name: 'name',
  description: 'description'
};

exports.Prisma.ReceiptScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  lot: 'lot',
  partVersionId: 'partVersionId'
};

exports.Prisma.RepairMaterialInventoryScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  name: 'name',
  description: 'description',
  quantity: 'quantity',
  minimumQuantity: 'minimumQuantity',
  equipmentId: 'equipmentId'
};

exports.Prisma.RepairRecordScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  type: 'type',
  equipmentId: 'equipmentId',
  status: 'status',
  description: 'description'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.TaskFormRelationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  taskDefinitionKey: 'taskDefinitionKey',
  formKey: 'formKey'
};

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  userId: 'userId',
  fullName: 'fullName'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  username: 'username',
  hashedPassword: 'hashedPassword',
  hashedRefreshToken: 'hashedRefreshToken',
  status: 'status',
  role: 'role'
};

exports.Prisma.WorkerOrderScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  no: 'no',
  partId: 'partId'
};
exports.IncomingInspectionResult = {
  Pass: 'Pass',
  Reject: 'Reject',
  Downgrade: 'Downgrade'
};

exports.RepairRecordStatus = {
  TO_ASSIGN: 'TO_ASSIGN',
  DOING: 'DOING',
  TO_REVIEW: 'TO_REVIEW',
  DONE: 'DONE'
};

exports.RepairType = {
  SCHEDULE: 'SCHEDULE',
  UNSCHEDULE: 'UNSCHEDULE'
};

exports.UserGroup = {
  ADMIN: 'ADMIN',
  USER: 'USER'
};

exports.UserStatus = {
  ACTIVE: 'ACTIVE',
  FORBIDDEN: 'FORBIDDEN'
};

exports.Prisma.ModelName = {
  TaskFormRelation: 'TaskFormRelation',
  User: 'User',
  UserProfile: 'UserProfile',
  ProductLine: 'ProductLine',
  Equipment: 'Equipment',
  RepairMaterialInventory: 'RepairMaterialInventory',
  RepairRecord: 'RepairRecord',
  Part: 'Part',
  PartVersion: 'PartVersion',
  IncomingInspectionSpec: 'IncomingInspectionSpec',
  IncomingInspectionSpecItem: 'IncomingInspectionSpecItem',
  NonconformItem: 'NonconformItem',
  PartOperation: 'PartOperation',
  PartOperationInspectionItem: 'PartOperationInspectionItem',
  Receipt: 'Receipt',
  IncomingInspectionRecord: 'IncomingInspectionRecord',
  IncomingInspectionRecordItem: 'IncomingInspectionRecordItem',
  WorkerOrder: 'WorkerOrder',
  OperationInspectionRecord: 'OperationInspectionRecord',
  OperationInspectionRecordItem: 'OperationInspectionRecordItem'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
