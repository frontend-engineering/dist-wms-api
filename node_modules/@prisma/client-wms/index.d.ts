
/**
 * Client
**/

import * as runtime from './runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model ResourceTaskIdRelation
 * 
 */
export type ResourceTaskIdRelation = {
  id: number
  createdAt: Date
  updatedAt: Date
  isDeleted: boolean
  taskId: string
  processInstanceId: string
}

/**
 * Model ResourceTaskDefKeyRelation
 * 
 */
export type ResourceTaskDefKeyRelation = {
  id: number
  createdAt: Date
  updatedAt: Date
  isDeleted: boolean
  resource: string
  taskDefKey: string
}

/**
 * Model MemberInfo
 * @schema.display_name 成员信息
 */
export type MemberInfo = {
  id: number
  createdAt: Date
  updatedAt: Date
  isDeleted: boolean
  name: string
  gender: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ResourceTaskIdRelations
 * const resourceTaskIdRelations = await prisma.resourceTaskIdRelation.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ResourceTaskIdRelations
   * const resourceTaskIdRelations = await prisma.resourceTaskIdRelation.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.resourceTaskIdRelation`: Exposes CRUD operations for the **ResourceTaskIdRelation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResourceTaskIdRelations
    * const resourceTaskIdRelations = await prisma.resourceTaskIdRelation.findMany()
    * ```
    */
  get resourceTaskIdRelation(): Prisma.ResourceTaskIdRelationDelegate<GlobalReject>;

  /**
   * `prisma.resourceTaskDefKeyRelation`: Exposes CRUD operations for the **ResourceTaskDefKeyRelation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResourceTaskDefKeyRelations
    * const resourceTaskDefKeyRelations = await prisma.resourceTaskDefKeyRelation.findMany()
    * ```
    */
  get resourceTaskDefKeyRelation(): Prisma.ResourceTaskDefKeyRelationDelegate<GlobalReject>;

  /**
   * `prisma.memberInfo`: Exposes CRUD operations for the **MemberInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MemberInfos
    * const memberInfos = await prisma.memberInfo.findMany()
    * ```
    */
  get memberInfo(): Prisma.MemberInfoDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.14.0
   * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    ResourceTaskIdRelation: 'ResourceTaskIdRelation',
    ResourceTaskDefKeyRelation: 'ResourceTaskDefKeyRelation',
    MemberInfo: 'MemberInfo'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model ResourceTaskIdRelation
   */


  export type AggregateResourceTaskIdRelation = {
    _count: ResourceTaskIdRelationCountAggregateOutputType | null
    _avg: ResourceTaskIdRelationAvgAggregateOutputType | null
    _sum: ResourceTaskIdRelationSumAggregateOutputType | null
    _min: ResourceTaskIdRelationMinAggregateOutputType | null
    _max: ResourceTaskIdRelationMaxAggregateOutputType | null
  }

  export type ResourceTaskIdRelationAvgAggregateOutputType = {
    id: number | null
  }

  export type ResourceTaskIdRelationSumAggregateOutputType = {
    id: number | null
  }

  export type ResourceTaskIdRelationMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    taskId: string | null
    processInstanceId: string | null
  }

  export type ResourceTaskIdRelationMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    taskId: string | null
    processInstanceId: string | null
  }

  export type ResourceTaskIdRelationCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    isDeleted: number
    taskId: number
    processInstanceId: number
    _all: number
  }


  export type ResourceTaskIdRelationAvgAggregateInputType = {
    id?: true
  }

  export type ResourceTaskIdRelationSumAggregateInputType = {
    id?: true
  }

  export type ResourceTaskIdRelationMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    taskId?: true
    processInstanceId?: true
  }

  export type ResourceTaskIdRelationMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    taskId?: true
    processInstanceId?: true
  }

  export type ResourceTaskIdRelationCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    taskId?: true
    processInstanceId?: true
    _all?: true
  }

  export type ResourceTaskIdRelationAggregateArgs = {
    /**
     * Filter which ResourceTaskIdRelation to aggregate.
     */
    where?: ResourceTaskIdRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResourceTaskIdRelations to fetch.
     */
    orderBy?: Enumerable<ResourceTaskIdRelationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResourceTaskIdRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResourceTaskIdRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResourceTaskIdRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResourceTaskIdRelations
    **/
    _count?: true | ResourceTaskIdRelationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResourceTaskIdRelationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResourceTaskIdRelationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResourceTaskIdRelationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResourceTaskIdRelationMaxAggregateInputType
  }

  export type GetResourceTaskIdRelationAggregateType<T extends ResourceTaskIdRelationAggregateArgs> = {
        [P in keyof T & keyof AggregateResourceTaskIdRelation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResourceTaskIdRelation[P]>
      : GetScalarType<T[P], AggregateResourceTaskIdRelation[P]>
  }




  export type ResourceTaskIdRelationGroupByArgs = {
    where?: ResourceTaskIdRelationWhereInput
    orderBy?: Enumerable<ResourceTaskIdRelationOrderByWithAggregationInput>
    by: ResourceTaskIdRelationScalarFieldEnum[]
    having?: ResourceTaskIdRelationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResourceTaskIdRelationCountAggregateInputType | true
    _avg?: ResourceTaskIdRelationAvgAggregateInputType
    _sum?: ResourceTaskIdRelationSumAggregateInputType
    _min?: ResourceTaskIdRelationMinAggregateInputType
    _max?: ResourceTaskIdRelationMaxAggregateInputType
  }


  export type ResourceTaskIdRelationGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    taskId: string
    processInstanceId: string
    _count: ResourceTaskIdRelationCountAggregateOutputType | null
    _avg: ResourceTaskIdRelationAvgAggregateOutputType | null
    _sum: ResourceTaskIdRelationSumAggregateOutputType | null
    _min: ResourceTaskIdRelationMinAggregateOutputType | null
    _max: ResourceTaskIdRelationMaxAggregateOutputType | null
  }

  type GetResourceTaskIdRelationGroupByPayload<T extends ResourceTaskIdRelationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ResourceTaskIdRelationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResourceTaskIdRelationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResourceTaskIdRelationGroupByOutputType[P]>
            : GetScalarType<T[P], ResourceTaskIdRelationGroupByOutputType[P]>
        }
      >
    >


  export type ResourceTaskIdRelationSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    taskId?: boolean
    processInstanceId?: boolean
  }


  export type ResourceTaskIdRelationGetPayload<S extends boolean | null | undefined | ResourceTaskIdRelationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ResourceTaskIdRelation :
    S extends undefined ? never :
    S extends { include: any } & (ResourceTaskIdRelationArgs | ResourceTaskIdRelationFindManyArgs)
    ? ResourceTaskIdRelation 
    : S extends { select: any } & (ResourceTaskIdRelationArgs | ResourceTaskIdRelationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ResourceTaskIdRelation ? ResourceTaskIdRelation[P] : never
  } 
      : ResourceTaskIdRelation


  type ResourceTaskIdRelationCountArgs = 
    Omit<ResourceTaskIdRelationFindManyArgs, 'select' | 'include'> & {
      select?: ResourceTaskIdRelationCountAggregateInputType | true
    }

  export interface ResourceTaskIdRelationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ResourceTaskIdRelation that matches the filter.
     * @param {ResourceTaskIdRelationFindUniqueArgs} args - Arguments to find a ResourceTaskIdRelation
     * @example
     * // Get one ResourceTaskIdRelation
     * const resourceTaskIdRelation = await prisma.resourceTaskIdRelation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ResourceTaskIdRelationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ResourceTaskIdRelationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ResourceTaskIdRelation'> extends True ? Prisma__ResourceTaskIdRelationClient<ResourceTaskIdRelationGetPayload<T>> : Prisma__ResourceTaskIdRelationClient<ResourceTaskIdRelationGetPayload<T> | null, null>

    /**
     * Find one ResourceTaskIdRelation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ResourceTaskIdRelationFindUniqueOrThrowArgs} args - Arguments to find a ResourceTaskIdRelation
     * @example
     * // Get one ResourceTaskIdRelation
     * const resourceTaskIdRelation = await prisma.resourceTaskIdRelation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ResourceTaskIdRelationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ResourceTaskIdRelationFindUniqueOrThrowArgs>
    ): Prisma__ResourceTaskIdRelationClient<ResourceTaskIdRelationGetPayload<T>>

    /**
     * Find the first ResourceTaskIdRelation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceTaskIdRelationFindFirstArgs} args - Arguments to find a ResourceTaskIdRelation
     * @example
     * // Get one ResourceTaskIdRelation
     * const resourceTaskIdRelation = await prisma.resourceTaskIdRelation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ResourceTaskIdRelationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ResourceTaskIdRelationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ResourceTaskIdRelation'> extends True ? Prisma__ResourceTaskIdRelationClient<ResourceTaskIdRelationGetPayload<T>> : Prisma__ResourceTaskIdRelationClient<ResourceTaskIdRelationGetPayload<T> | null, null>

    /**
     * Find the first ResourceTaskIdRelation that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceTaskIdRelationFindFirstOrThrowArgs} args - Arguments to find a ResourceTaskIdRelation
     * @example
     * // Get one ResourceTaskIdRelation
     * const resourceTaskIdRelation = await prisma.resourceTaskIdRelation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ResourceTaskIdRelationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ResourceTaskIdRelationFindFirstOrThrowArgs>
    ): Prisma__ResourceTaskIdRelationClient<ResourceTaskIdRelationGetPayload<T>>

    /**
     * Find zero or more ResourceTaskIdRelations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceTaskIdRelationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResourceTaskIdRelations
     * const resourceTaskIdRelations = await prisma.resourceTaskIdRelation.findMany()
     * 
     * // Get first 10 ResourceTaskIdRelations
     * const resourceTaskIdRelations = await prisma.resourceTaskIdRelation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resourceTaskIdRelationWithIdOnly = await prisma.resourceTaskIdRelation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ResourceTaskIdRelationFindManyArgs>(
      args?: SelectSubset<T, ResourceTaskIdRelationFindManyArgs>
    ): Prisma.PrismaPromise<Array<ResourceTaskIdRelationGetPayload<T>>>

    /**
     * Create a ResourceTaskIdRelation.
     * @param {ResourceTaskIdRelationCreateArgs} args - Arguments to create a ResourceTaskIdRelation.
     * @example
     * // Create one ResourceTaskIdRelation
     * const ResourceTaskIdRelation = await prisma.resourceTaskIdRelation.create({
     *   data: {
     *     // ... data to create a ResourceTaskIdRelation
     *   }
     * })
     * 
    **/
    create<T extends ResourceTaskIdRelationCreateArgs>(
      args: SelectSubset<T, ResourceTaskIdRelationCreateArgs>
    ): Prisma__ResourceTaskIdRelationClient<ResourceTaskIdRelationGetPayload<T>>

    /**
     * Create many ResourceTaskIdRelations.
     *     @param {ResourceTaskIdRelationCreateManyArgs} args - Arguments to create many ResourceTaskIdRelations.
     *     @example
     *     // Create many ResourceTaskIdRelations
     *     const resourceTaskIdRelation = await prisma.resourceTaskIdRelation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ResourceTaskIdRelationCreateManyArgs>(
      args?: SelectSubset<T, ResourceTaskIdRelationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ResourceTaskIdRelation.
     * @param {ResourceTaskIdRelationDeleteArgs} args - Arguments to delete one ResourceTaskIdRelation.
     * @example
     * // Delete one ResourceTaskIdRelation
     * const ResourceTaskIdRelation = await prisma.resourceTaskIdRelation.delete({
     *   where: {
     *     // ... filter to delete one ResourceTaskIdRelation
     *   }
     * })
     * 
    **/
    delete<T extends ResourceTaskIdRelationDeleteArgs>(
      args: SelectSubset<T, ResourceTaskIdRelationDeleteArgs>
    ): Prisma__ResourceTaskIdRelationClient<ResourceTaskIdRelationGetPayload<T>>

    /**
     * Update one ResourceTaskIdRelation.
     * @param {ResourceTaskIdRelationUpdateArgs} args - Arguments to update one ResourceTaskIdRelation.
     * @example
     * // Update one ResourceTaskIdRelation
     * const resourceTaskIdRelation = await prisma.resourceTaskIdRelation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ResourceTaskIdRelationUpdateArgs>(
      args: SelectSubset<T, ResourceTaskIdRelationUpdateArgs>
    ): Prisma__ResourceTaskIdRelationClient<ResourceTaskIdRelationGetPayload<T>>

    /**
     * Delete zero or more ResourceTaskIdRelations.
     * @param {ResourceTaskIdRelationDeleteManyArgs} args - Arguments to filter ResourceTaskIdRelations to delete.
     * @example
     * // Delete a few ResourceTaskIdRelations
     * const { count } = await prisma.resourceTaskIdRelation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ResourceTaskIdRelationDeleteManyArgs>(
      args?: SelectSubset<T, ResourceTaskIdRelationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResourceTaskIdRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceTaskIdRelationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResourceTaskIdRelations
     * const resourceTaskIdRelation = await prisma.resourceTaskIdRelation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ResourceTaskIdRelationUpdateManyArgs>(
      args: SelectSubset<T, ResourceTaskIdRelationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ResourceTaskIdRelation.
     * @param {ResourceTaskIdRelationUpsertArgs} args - Arguments to update or create a ResourceTaskIdRelation.
     * @example
     * // Update or create a ResourceTaskIdRelation
     * const resourceTaskIdRelation = await prisma.resourceTaskIdRelation.upsert({
     *   create: {
     *     // ... data to create a ResourceTaskIdRelation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResourceTaskIdRelation we want to update
     *   }
     * })
    **/
    upsert<T extends ResourceTaskIdRelationUpsertArgs>(
      args: SelectSubset<T, ResourceTaskIdRelationUpsertArgs>
    ): Prisma__ResourceTaskIdRelationClient<ResourceTaskIdRelationGetPayload<T>>

    /**
     * Count the number of ResourceTaskIdRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceTaskIdRelationCountArgs} args - Arguments to filter ResourceTaskIdRelations to count.
     * @example
     * // Count the number of ResourceTaskIdRelations
     * const count = await prisma.resourceTaskIdRelation.count({
     *   where: {
     *     // ... the filter for the ResourceTaskIdRelations we want to count
     *   }
     * })
    **/
    count<T extends ResourceTaskIdRelationCountArgs>(
      args?: Subset<T, ResourceTaskIdRelationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResourceTaskIdRelationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResourceTaskIdRelation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceTaskIdRelationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResourceTaskIdRelationAggregateArgs>(args: Subset<T, ResourceTaskIdRelationAggregateArgs>): Prisma.PrismaPromise<GetResourceTaskIdRelationAggregateType<T>>

    /**
     * Group by ResourceTaskIdRelation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceTaskIdRelationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResourceTaskIdRelationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResourceTaskIdRelationGroupByArgs['orderBy'] }
        : { orderBy?: ResourceTaskIdRelationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResourceTaskIdRelationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResourceTaskIdRelationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ResourceTaskIdRelation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ResourceTaskIdRelationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ResourceTaskIdRelation base type for findUnique actions
   */
  export type ResourceTaskIdRelationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ResourceTaskIdRelation
     */
    select?: ResourceTaskIdRelationSelect | null
    /**
     * Filter, which ResourceTaskIdRelation to fetch.
     */
    where: ResourceTaskIdRelationWhereUniqueInput
  }

  /**
   * ResourceTaskIdRelation findUnique
   */
  export interface ResourceTaskIdRelationFindUniqueArgs extends ResourceTaskIdRelationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ResourceTaskIdRelation findUniqueOrThrow
   */
  export type ResourceTaskIdRelationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ResourceTaskIdRelation
     */
    select?: ResourceTaskIdRelationSelect | null
    /**
     * Filter, which ResourceTaskIdRelation to fetch.
     */
    where: ResourceTaskIdRelationWhereUniqueInput
  }


  /**
   * ResourceTaskIdRelation base type for findFirst actions
   */
  export type ResourceTaskIdRelationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ResourceTaskIdRelation
     */
    select?: ResourceTaskIdRelationSelect | null
    /**
     * Filter, which ResourceTaskIdRelation to fetch.
     */
    where?: ResourceTaskIdRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResourceTaskIdRelations to fetch.
     */
    orderBy?: Enumerable<ResourceTaskIdRelationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResourceTaskIdRelations.
     */
    cursor?: ResourceTaskIdRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResourceTaskIdRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResourceTaskIdRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResourceTaskIdRelations.
     */
    distinct?: Enumerable<ResourceTaskIdRelationScalarFieldEnum>
  }

  /**
   * ResourceTaskIdRelation findFirst
   */
  export interface ResourceTaskIdRelationFindFirstArgs extends ResourceTaskIdRelationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ResourceTaskIdRelation findFirstOrThrow
   */
  export type ResourceTaskIdRelationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ResourceTaskIdRelation
     */
    select?: ResourceTaskIdRelationSelect | null
    /**
     * Filter, which ResourceTaskIdRelation to fetch.
     */
    where?: ResourceTaskIdRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResourceTaskIdRelations to fetch.
     */
    orderBy?: Enumerable<ResourceTaskIdRelationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResourceTaskIdRelations.
     */
    cursor?: ResourceTaskIdRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResourceTaskIdRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResourceTaskIdRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResourceTaskIdRelations.
     */
    distinct?: Enumerable<ResourceTaskIdRelationScalarFieldEnum>
  }


  /**
   * ResourceTaskIdRelation findMany
   */
  export type ResourceTaskIdRelationFindManyArgs = {
    /**
     * Select specific fields to fetch from the ResourceTaskIdRelation
     */
    select?: ResourceTaskIdRelationSelect | null
    /**
     * Filter, which ResourceTaskIdRelations to fetch.
     */
    where?: ResourceTaskIdRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResourceTaskIdRelations to fetch.
     */
    orderBy?: Enumerable<ResourceTaskIdRelationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResourceTaskIdRelations.
     */
    cursor?: ResourceTaskIdRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResourceTaskIdRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResourceTaskIdRelations.
     */
    skip?: number
    distinct?: Enumerable<ResourceTaskIdRelationScalarFieldEnum>
  }


  /**
   * ResourceTaskIdRelation create
   */
  export type ResourceTaskIdRelationCreateArgs = {
    /**
     * Select specific fields to fetch from the ResourceTaskIdRelation
     */
    select?: ResourceTaskIdRelationSelect | null
    /**
     * The data needed to create a ResourceTaskIdRelation.
     */
    data: XOR<ResourceTaskIdRelationCreateInput, ResourceTaskIdRelationUncheckedCreateInput>
  }


  /**
   * ResourceTaskIdRelation createMany
   */
  export type ResourceTaskIdRelationCreateManyArgs = {
    /**
     * The data used to create many ResourceTaskIdRelations.
     */
    data: Enumerable<ResourceTaskIdRelationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ResourceTaskIdRelation update
   */
  export type ResourceTaskIdRelationUpdateArgs = {
    /**
     * Select specific fields to fetch from the ResourceTaskIdRelation
     */
    select?: ResourceTaskIdRelationSelect | null
    /**
     * The data needed to update a ResourceTaskIdRelation.
     */
    data: XOR<ResourceTaskIdRelationUpdateInput, ResourceTaskIdRelationUncheckedUpdateInput>
    /**
     * Choose, which ResourceTaskIdRelation to update.
     */
    where: ResourceTaskIdRelationWhereUniqueInput
  }


  /**
   * ResourceTaskIdRelation updateMany
   */
  export type ResourceTaskIdRelationUpdateManyArgs = {
    /**
     * The data used to update ResourceTaskIdRelations.
     */
    data: XOR<ResourceTaskIdRelationUpdateManyMutationInput, ResourceTaskIdRelationUncheckedUpdateManyInput>
    /**
     * Filter which ResourceTaskIdRelations to update
     */
    where?: ResourceTaskIdRelationWhereInput
  }


  /**
   * ResourceTaskIdRelation upsert
   */
  export type ResourceTaskIdRelationUpsertArgs = {
    /**
     * Select specific fields to fetch from the ResourceTaskIdRelation
     */
    select?: ResourceTaskIdRelationSelect | null
    /**
     * The filter to search for the ResourceTaskIdRelation to update in case it exists.
     */
    where: ResourceTaskIdRelationWhereUniqueInput
    /**
     * In case the ResourceTaskIdRelation found by the `where` argument doesn't exist, create a new ResourceTaskIdRelation with this data.
     */
    create: XOR<ResourceTaskIdRelationCreateInput, ResourceTaskIdRelationUncheckedCreateInput>
    /**
     * In case the ResourceTaskIdRelation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResourceTaskIdRelationUpdateInput, ResourceTaskIdRelationUncheckedUpdateInput>
  }


  /**
   * ResourceTaskIdRelation delete
   */
  export type ResourceTaskIdRelationDeleteArgs = {
    /**
     * Select specific fields to fetch from the ResourceTaskIdRelation
     */
    select?: ResourceTaskIdRelationSelect | null
    /**
     * Filter which ResourceTaskIdRelation to delete.
     */
    where: ResourceTaskIdRelationWhereUniqueInput
  }


  /**
   * ResourceTaskIdRelation deleteMany
   */
  export type ResourceTaskIdRelationDeleteManyArgs = {
    /**
     * Filter which ResourceTaskIdRelations to delete
     */
    where?: ResourceTaskIdRelationWhereInput
  }


  /**
   * ResourceTaskIdRelation without action
   */
  export type ResourceTaskIdRelationArgs = {
    /**
     * Select specific fields to fetch from the ResourceTaskIdRelation
     */
    select?: ResourceTaskIdRelationSelect | null
  }



  /**
   * Model ResourceTaskDefKeyRelation
   */


  export type AggregateResourceTaskDefKeyRelation = {
    _count: ResourceTaskDefKeyRelationCountAggregateOutputType | null
    _avg: ResourceTaskDefKeyRelationAvgAggregateOutputType | null
    _sum: ResourceTaskDefKeyRelationSumAggregateOutputType | null
    _min: ResourceTaskDefKeyRelationMinAggregateOutputType | null
    _max: ResourceTaskDefKeyRelationMaxAggregateOutputType | null
  }

  export type ResourceTaskDefKeyRelationAvgAggregateOutputType = {
    id: number | null
  }

  export type ResourceTaskDefKeyRelationSumAggregateOutputType = {
    id: number | null
  }

  export type ResourceTaskDefKeyRelationMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    resource: string | null
    taskDefKey: string | null
  }

  export type ResourceTaskDefKeyRelationMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    resource: string | null
    taskDefKey: string | null
  }

  export type ResourceTaskDefKeyRelationCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    isDeleted: number
    resource: number
    taskDefKey: number
    _all: number
  }


  export type ResourceTaskDefKeyRelationAvgAggregateInputType = {
    id?: true
  }

  export type ResourceTaskDefKeyRelationSumAggregateInputType = {
    id?: true
  }

  export type ResourceTaskDefKeyRelationMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    resource?: true
    taskDefKey?: true
  }

  export type ResourceTaskDefKeyRelationMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    resource?: true
    taskDefKey?: true
  }

  export type ResourceTaskDefKeyRelationCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    resource?: true
    taskDefKey?: true
    _all?: true
  }

  export type ResourceTaskDefKeyRelationAggregateArgs = {
    /**
     * Filter which ResourceTaskDefKeyRelation to aggregate.
     */
    where?: ResourceTaskDefKeyRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResourceTaskDefKeyRelations to fetch.
     */
    orderBy?: Enumerable<ResourceTaskDefKeyRelationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResourceTaskDefKeyRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResourceTaskDefKeyRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResourceTaskDefKeyRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResourceTaskDefKeyRelations
    **/
    _count?: true | ResourceTaskDefKeyRelationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResourceTaskDefKeyRelationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResourceTaskDefKeyRelationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResourceTaskDefKeyRelationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResourceTaskDefKeyRelationMaxAggregateInputType
  }

  export type GetResourceTaskDefKeyRelationAggregateType<T extends ResourceTaskDefKeyRelationAggregateArgs> = {
        [P in keyof T & keyof AggregateResourceTaskDefKeyRelation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResourceTaskDefKeyRelation[P]>
      : GetScalarType<T[P], AggregateResourceTaskDefKeyRelation[P]>
  }




  export type ResourceTaskDefKeyRelationGroupByArgs = {
    where?: ResourceTaskDefKeyRelationWhereInput
    orderBy?: Enumerable<ResourceTaskDefKeyRelationOrderByWithAggregationInput>
    by: ResourceTaskDefKeyRelationScalarFieldEnum[]
    having?: ResourceTaskDefKeyRelationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResourceTaskDefKeyRelationCountAggregateInputType | true
    _avg?: ResourceTaskDefKeyRelationAvgAggregateInputType
    _sum?: ResourceTaskDefKeyRelationSumAggregateInputType
    _min?: ResourceTaskDefKeyRelationMinAggregateInputType
    _max?: ResourceTaskDefKeyRelationMaxAggregateInputType
  }


  export type ResourceTaskDefKeyRelationGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    resource: string
    taskDefKey: string
    _count: ResourceTaskDefKeyRelationCountAggregateOutputType | null
    _avg: ResourceTaskDefKeyRelationAvgAggregateOutputType | null
    _sum: ResourceTaskDefKeyRelationSumAggregateOutputType | null
    _min: ResourceTaskDefKeyRelationMinAggregateOutputType | null
    _max: ResourceTaskDefKeyRelationMaxAggregateOutputType | null
  }

  type GetResourceTaskDefKeyRelationGroupByPayload<T extends ResourceTaskDefKeyRelationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ResourceTaskDefKeyRelationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResourceTaskDefKeyRelationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResourceTaskDefKeyRelationGroupByOutputType[P]>
            : GetScalarType<T[P], ResourceTaskDefKeyRelationGroupByOutputType[P]>
        }
      >
    >


  export type ResourceTaskDefKeyRelationSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    resource?: boolean
    taskDefKey?: boolean
  }


  export type ResourceTaskDefKeyRelationGetPayload<S extends boolean | null | undefined | ResourceTaskDefKeyRelationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ResourceTaskDefKeyRelation :
    S extends undefined ? never :
    S extends { include: any } & (ResourceTaskDefKeyRelationArgs | ResourceTaskDefKeyRelationFindManyArgs)
    ? ResourceTaskDefKeyRelation 
    : S extends { select: any } & (ResourceTaskDefKeyRelationArgs | ResourceTaskDefKeyRelationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ResourceTaskDefKeyRelation ? ResourceTaskDefKeyRelation[P] : never
  } 
      : ResourceTaskDefKeyRelation


  type ResourceTaskDefKeyRelationCountArgs = 
    Omit<ResourceTaskDefKeyRelationFindManyArgs, 'select' | 'include'> & {
      select?: ResourceTaskDefKeyRelationCountAggregateInputType | true
    }

  export interface ResourceTaskDefKeyRelationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ResourceTaskDefKeyRelation that matches the filter.
     * @param {ResourceTaskDefKeyRelationFindUniqueArgs} args - Arguments to find a ResourceTaskDefKeyRelation
     * @example
     * // Get one ResourceTaskDefKeyRelation
     * const resourceTaskDefKeyRelation = await prisma.resourceTaskDefKeyRelation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ResourceTaskDefKeyRelationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ResourceTaskDefKeyRelationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ResourceTaskDefKeyRelation'> extends True ? Prisma__ResourceTaskDefKeyRelationClient<ResourceTaskDefKeyRelationGetPayload<T>> : Prisma__ResourceTaskDefKeyRelationClient<ResourceTaskDefKeyRelationGetPayload<T> | null, null>

    /**
     * Find one ResourceTaskDefKeyRelation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ResourceTaskDefKeyRelationFindUniqueOrThrowArgs} args - Arguments to find a ResourceTaskDefKeyRelation
     * @example
     * // Get one ResourceTaskDefKeyRelation
     * const resourceTaskDefKeyRelation = await prisma.resourceTaskDefKeyRelation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ResourceTaskDefKeyRelationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ResourceTaskDefKeyRelationFindUniqueOrThrowArgs>
    ): Prisma__ResourceTaskDefKeyRelationClient<ResourceTaskDefKeyRelationGetPayload<T>>

    /**
     * Find the first ResourceTaskDefKeyRelation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceTaskDefKeyRelationFindFirstArgs} args - Arguments to find a ResourceTaskDefKeyRelation
     * @example
     * // Get one ResourceTaskDefKeyRelation
     * const resourceTaskDefKeyRelation = await prisma.resourceTaskDefKeyRelation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ResourceTaskDefKeyRelationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ResourceTaskDefKeyRelationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ResourceTaskDefKeyRelation'> extends True ? Prisma__ResourceTaskDefKeyRelationClient<ResourceTaskDefKeyRelationGetPayload<T>> : Prisma__ResourceTaskDefKeyRelationClient<ResourceTaskDefKeyRelationGetPayload<T> | null, null>

    /**
     * Find the first ResourceTaskDefKeyRelation that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceTaskDefKeyRelationFindFirstOrThrowArgs} args - Arguments to find a ResourceTaskDefKeyRelation
     * @example
     * // Get one ResourceTaskDefKeyRelation
     * const resourceTaskDefKeyRelation = await prisma.resourceTaskDefKeyRelation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ResourceTaskDefKeyRelationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ResourceTaskDefKeyRelationFindFirstOrThrowArgs>
    ): Prisma__ResourceTaskDefKeyRelationClient<ResourceTaskDefKeyRelationGetPayload<T>>

    /**
     * Find zero or more ResourceTaskDefKeyRelations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceTaskDefKeyRelationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResourceTaskDefKeyRelations
     * const resourceTaskDefKeyRelations = await prisma.resourceTaskDefKeyRelation.findMany()
     * 
     * // Get first 10 ResourceTaskDefKeyRelations
     * const resourceTaskDefKeyRelations = await prisma.resourceTaskDefKeyRelation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resourceTaskDefKeyRelationWithIdOnly = await prisma.resourceTaskDefKeyRelation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ResourceTaskDefKeyRelationFindManyArgs>(
      args?: SelectSubset<T, ResourceTaskDefKeyRelationFindManyArgs>
    ): Prisma.PrismaPromise<Array<ResourceTaskDefKeyRelationGetPayload<T>>>

    /**
     * Create a ResourceTaskDefKeyRelation.
     * @param {ResourceTaskDefKeyRelationCreateArgs} args - Arguments to create a ResourceTaskDefKeyRelation.
     * @example
     * // Create one ResourceTaskDefKeyRelation
     * const ResourceTaskDefKeyRelation = await prisma.resourceTaskDefKeyRelation.create({
     *   data: {
     *     // ... data to create a ResourceTaskDefKeyRelation
     *   }
     * })
     * 
    **/
    create<T extends ResourceTaskDefKeyRelationCreateArgs>(
      args: SelectSubset<T, ResourceTaskDefKeyRelationCreateArgs>
    ): Prisma__ResourceTaskDefKeyRelationClient<ResourceTaskDefKeyRelationGetPayload<T>>

    /**
     * Create many ResourceTaskDefKeyRelations.
     *     @param {ResourceTaskDefKeyRelationCreateManyArgs} args - Arguments to create many ResourceTaskDefKeyRelations.
     *     @example
     *     // Create many ResourceTaskDefKeyRelations
     *     const resourceTaskDefKeyRelation = await prisma.resourceTaskDefKeyRelation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ResourceTaskDefKeyRelationCreateManyArgs>(
      args?: SelectSubset<T, ResourceTaskDefKeyRelationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ResourceTaskDefKeyRelation.
     * @param {ResourceTaskDefKeyRelationDeleteArgs} args - Arguments to delete one ResourceTaskDefKeyRelation.
     * @example
     * // Delete one ResourceTaskDefKeyRelation
     * const ResourceTaskDefKeyRelation = await prisma.resourceTaskDefKeyRelation.delete({
     *   where: {
     *     // ... filter to delete one ResourceTaskDefKeyRelation
     *   }
     * })
     * 
    **/
    delete<T extends ResourceTaskDefKeyRelationDeleteArgs>(
      args: SelectSubset<T, ResourceTaskDefKeyRelationDeleteArgs>
    ): Prisma__ResourceTaskDefKeyRelationClient<ResourceTaskDefKeyRelationGetPayload<T>>

    /**
     * Update one ResourceTaskDefKeyRelation.
     * @param {ResourceTaskDefKeyRelationUpdateArgs} args - Arguments to update one ResourceTaskDefKeyRelation.
     * @example
     * // Update one ResourceTaskDefKeyRelation
     * const resourceTaskDefKeyRelation = await prisma.resourceTaskDefKeyRelation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ResourceTaskDefKeyRelationUpdateArgs>(
      args: SelectSubset<T, ResourceTaskDefKeyRelationUpdateArgs>
    ): Prisma__ResourceTaskDefKeyRelationClient<ResourceTaskDefKeyRelationGetPayload<T>>

    /**
     * Delete zero or more ResourceTaskDefKeyRelations.
     * @param {ResourceTaskDefKeyRelationDeleteManyArgs} args - Arguments to filter ResourceTaskDefKeyRelations to delete.
     * @example
     * // Delete a few ResourceTaskDefKeyRelations
     * const { count } = await prisma.resourceTaskDefKeyRelation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ResourceTaskDefKeyRelationDeleteManyArgs>(
      args?: SelectSubset<T, ResourceTaskDefKeyRelationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResourceTaskDefKeyRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceTaskDefKeyRelationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResourceTaskDefKeyRelations
     * const resourceTaskDefKeyRelation = await prisma.resourceTaskDefKeyRelation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ResourceTaskDefKeyRelationUpdateManyArgs>(
      args: SelectSubset<T, ResourceTaskDefKeyRelationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ResourceTaskDefKeyRelation.
     * @param {ResourceTaskDefKeyRelationUpsertArgs} args - Arguments to update or create a ResourceTaskDefKeyRelation.
     * @example
     * // Update or create a ResourceTaskDefKeyRelation
     * const resourceTaskDefKeyRelation = await prisma.resourceTaskDefKeyRelation.upsert({
     *   create: {
     *     // ... data to create a ResourceTaskDefKeyRelation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResourceTaskDefKeyRelation we want to update
     *   }
     * })
    **/
    upsert<T extends ResourceTaskDefKeyRelationUpsertArgs>(
      args: SelectSubset<T, ResourceTaskDefKeyRelationUpsertArgs>
    ): Prisma__ResourceTaskDefKeyRelationClient<ResourceTaskDefKeyRelationGetPayload<T>>

    /**
     * Count the number of ResourceTaskDefKeyRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceTaskDefKeyRelationCountArgs} args - Arguments to filter ResourceTaskDefKeyRelations to count.
     * @example
     * // Count the number of ResourceTaskDefKeyRelations
     * const count = await prisma.resourceTaskDefKeyRelation.count({
     *   where: {
     *     // ... the filter for the ResourceTaskDefKeyRelations we want to count
     *   }
     * })
    **/
    count<T extends ResourceTaskDefKeyRelationCountArgs>(
      args?: Subset<T, ResourceTaskDefKeyRelationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResourceTaskDefKeyRelationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResourceTaskDefKeyRelation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceTaskDefKeyRelationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResourceTaskDefKeyRelationAggregateArgs>(args: Subset<T, ResourceTaskDefKeyRelationAggregateArgs>): Prisma.PrismaPromise<GetResourceTaskDefKeyRelationAggregateType<T>>

    /**
     * Group by ResourceTaskDefKeyRelation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceTaskDefKeyRelationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResourceTaskDefKeyRelationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResourceTaskDefKeyRelationGroupByArgs['orderBy'] }
        : { orderBy?: ResourceTaskDefKeyRelationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResourceTaskDefKeyRelationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResourceTaskDefKeyRelationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ResourceTaskDefKeyRelation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ResourceTaskDefKeyRelationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ResourceTaskDefKeyRelation base type for findUnique actions
   */
  export type ResourceTaskDefKeyRelationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ResourceTaskDefKeyRelation
     */
    select?: ResourceTaskDefKeyRelationSelect | null
    /**
     * Filter, which ResourceTaskDefKeyRelation to fetch.
     */
    where: ResourceTaskDefKeyRelationWhereUniqueInput
  }

  /**
   * ResourceTaskDefKeyRelation findUnique
   */
  export interface ResourceTaskDefKeyRelationFindUniqueArgs extends ResourceTaskDefKeyRelationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ResourceTaskDefKeyRelation findUniqueOrThrow
   */
  export type ResourceTaskDefKeyRelationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ResourceTaskDefKeyRelation
     */
    select?: ResourceTaskDefKeyRelationSelect | null
    /**
     * Filter, which ResourceTaskDefKeyRelation to fetch.
     */
    where: ResourceTaskDefKeyRelationWhereUniqueInput
  }


  /**
   * ResourceTaskDefKeyRelation base type for findFirst actions
   */
  export type ResourceTaskDefKeyRelationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ResourceTaskDefKeyRelation
     */
    select?: ResourceTaskDefKeyRelationSelect | null
    /**
     * Filter, which ResourceTaskDefKeyRelation to fetch.
     */
    where?: ResourceTaskDefKeyRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResourceTaskDefKeyRelations to fetch.
     */
    orderBy?: Enumerable<ResourceTaskDefKeyRelationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResourceTaskDefKeyRelations.
     */
    cursor?: ResourceTaskDefKeyRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResourceTaskDefKeyRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResourceTaskDefKeyRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResourceTaskDefKeyRelations.
     */
    distinct?: Enumerable<ResourceTaskDefKeyRelationScalarFieldEnum>
  }

  /**
   * ResourceTaskDefKeyRelation findFirst
   */
  export interface ResourceTaskDefKeyRelationFindFirstArgs extends ResourceTaskDefKeyRelationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ResourceTaskDefKeyRelation findFirstOrThrow
   */
  export type ResourceTaskDefKeyRelationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ResourceTaskDefKeyRelation
     */
    select?: ResourceTaskDefKeyRelationSelect | null
    /**
     * Filter, which ResourceTaskDefKeyRelation to fetch.
     */
    where?: ResourceTaskDefKeyRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResourceTaskDefKeyRelations to fetch.
     */
    orderBy?: Enumerable<ResourceTaskDefKeyRelationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResourceTaskDefKeyRelations.
     */
    cursor?: ResourceTaskDefKeyRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResourceTaskDefKeyRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResourceTaskDefKeyRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResourceTaskDefKeyRelations.
     */
    distinct?: Enumerable<ResourceTaskDefKeyRelationScalarFieldEnum>
  }


  /**
   * ResourceTaskDefKeyRelation findMany
   */
  export type ResourceTaskDefKeyRelationFindManyArgs = {
    /**
     * Select specific fields to fetch from the ResourceTaskDefKeyRelation
     */
    select?: ResourceTaskDefKeyRelationSelect | null
    /**
     * Filter, which ResourceTaskDefKeyRelations to fetch.
     */
    where?: ResourceTaskDefKeyRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResourceTaskDefKeyRelations to fetch.
     */
    orderBy?: Enumerable<ResourceTaskDefKeyRelationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResourceTaskDefKeyRelations.
     */
    cursor?: ResourceTaskDefKeyRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResourceTaskDefKeyRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResourceTaskDefKeyRelations.
     */
    skip?: number
    distinct?: Enumerable<ResourceTaskDefKeyRelationScalarFieldEnum>
  }


  /**
   * ResourceTaskDefKeyRelation create
   */
  export type ResourceTaskDefKeyRelationCreateArgs = {
    /**
     * Select specific fields to fetch from the ResourceTaskDefKeyRelation
     */
    select?: ResourceTaskDefKeyRelationSelect | null
    /**
     * The data needed to create a ResourceTaskDefKeyRelation.
     */
    data: XOR<ResourceTaskDefKeyRelationCreateInput, ResourceTaskDefKeyRelationUncheckedCreateInput>
  }


  /**
   * ResourceTaskDefKeyRelation createMany
   */
  export type ResourceTaskDefKeyRelationCreateManyArgs = {
    /**
     * The data used to create many ResourceTaskDefKeyRelations.
     */
    data: Enumerable<ResourceTaskDefKeyRelationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ResourceTaskDefKeyRelation update
   */
  export type ResourceTaskDefKeyRelationUpdateArgs = {
    /**
     * Select specific fields to fetch from the ResourceTaskDefKeyRelation
     */
    select?: ResourceTaskDefKeyRelationSelect | null
    /**
     * The data needed to update a ResourceTaskDefKeyRelation.
     */
    data: XOR<ResourceTaskDefKeyRelationUpdateInput, ResourceTaskDefKeyRelationUncheckedUpdateInput>
    /**
     * Choose, which ResourceTaskDefKeyRelation to update.
     */
    where: ResourceTaskDefKeyRelationWhereUniqueInput
  }


  /**
   * ResourceTaskDefKeyRelation updateMany
   */
  export type ResourceTaskDefKeyRelationUpdateManyArgs = {
    /**
     * The data used to update ResourceTaskDefKeyRelations.
     */
    data: XOR<ResourceTaskDefKeyRelationUpdateManyMutationInput, ResourceTaskDefKeyRelationUncheckedUpdateManyInput>
    /**
     * Filter which ResourceTaskDefKeyRelations to update
     */
    where?: ResourceTaskDefKeyRelationWhereInput
  }


  /**
   * ResourceTaskDefKeyRelation upsert
   */
  export type ResourceTaskDefKeyRelationUpsertArgs = {
    /**
     * Select specific fields to fetch from the ResourceTaskDefKeyRelation
     */
    select?: ResourceTaskDefKeyRelationSelect | null
    /**
     * The filter to search for the ResourceTaskDefKeyRelation to update in case it exists.
     */
    where: ResourceTaskDefKeyRelationWhereUniqueInput
    /**
     * In case the ResourceTaskDefKeyRelation found by the `where` argument doesn't exist, create a new ResourceTaskDefKeyRelation with this data.
     */
    create: XOR<ResourceTaskDefKeyRelationCreateInput, ResourceTaskDefKeyRelationUncheckedCreateInput>
    /**
     * In case the ResourceTaskDefKeyRelation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResourceTaskDefKeyRelationUpdateInput, ResourceTaskDefKeyRelationUncheckedUpdateInput>
  }


  /**
   * ResourceTaskDefKeyRelation delete
   */
  export type ResourceTaskDefKeyRelationDeleteArgs = {
    /**
     * Select specific fields to fetch from the ResourceTaskDefKeyRelation
     */
    select?: ResourceTaskDefKeyRelationSelect | null
    /**
     * Filter which ResourceTaskDefKeyRelation to delete.
     */
    where: ResourceTaskDefKeyRelationWhereUniqueInput
  }


  /**
   * ResourceTaskDefKeyRelation deleteMany
   */
  export type ResourceTaskDefKeyRelationDeleteManyArgs = {
    /**
     * Filter which ResourceTaskDefKeyRelations to delete
     */
    where?: ResourceTaskDefKeyRelationWhereInput
  }


  /**
   * ResourceTaskDefKeyRelation without action
   */
  export type ResourceTaskDefKeyRelationArgs = {
    /**
     * Select specific fields to fetch from the ResourceTaskDefKeyRelation
     */
    select?: ResourceTaskDefKeyRelationSelect | null
  }



  /**
   * Model MemberInfo
   */


  export type AggregateMemberInfo = {
    _count: MemberInfoCountAggregateOutputType | null
    _avg: MemberInfoAvgAggregateOutputType | null
    _sum: MemberInfoSumAggregateOutputType | null
    _min: MemberInfoMinAggregateOutputType | null
    _max: MemberInfoMaxAggregateOutputType | null
  }

  export type MemberInfoAvgAggregateOutputType = {
    id: number | null
  }

  export type MemberInfoSumAggregateOutputType = {
    id: number | null
  }

  export type MemberInfoMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    name: string | null
    gender: string | null
  }

  export type MemberInfoMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    name: string | null
    gender: string | null
  }

  export type MemberInfoCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    isDeleted: number
    name: number
    gender: number
    _all: number
  }


  export type MemberInfoAvgAggregateInputType = {
    id?: true
  }

  export type MemberInfoSumAggregateInputType = {
    id?: true
  }

  export type MemberInfoMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
    gender?: true
  }

  export type MemberInfoMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
    gender?: true
  }

  export type MemberInfoCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
    gender?: true
    _all?: true
  }

  export type MemberInfoAggregateArgs = {
    /**
     * Filter which MemberInfo to aggregate.
     */
    where?: MemberInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemberInfos to fetch.
     */
    orderBy?: Enumerable<MemberInfoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MemberInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemberInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemberInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MemberInfos
    **/
    _count?: true | MemberInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MemberInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MemberInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MemberInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MemberInfoMaxAggregateInputType
  }

  export type GetMemberInfoAggregateType<T extends MemberInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateMemberInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMemberInfo[P]>
      : GetScalarType<T[P], AggregateMemberInfo[P]>
  }




  export type MemberInfoGroupByArgs = {
    where?: MemberInfoWhereInput
    orderBy?: Enumerable<MemberInfoOrderByWithAggregationInput>
    by: MemberInfoScalarFieldEnum[]
    having?: MemberInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MemberInfoCountAggregateInputType | true
    _avg?: MemberInfoAvgAggregateInputType
    _sum?: MemberInfoSumAggregateInputType
    _min?: MemberInfoMinAggregateInputType
    _max?: MemberInfoMaxAggregateInputType
  }


  export type MemberInfoGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    name: string
    gender: string
    _count: MemberInfoCountAggregateOutputType | null
    _avg: MemberInfoAvgAggregateOutputType | null
    _sum: MemberInfoSumAggregateOutputType | null
    _min: MemberInfoMinAggregateOutputType | null
    _max: MemberInfoMaxAggregateOutputType | null
  }

  type GetMemberInfoGroupByPayload<T extends MemberInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MemberInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MemberInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MemberInfoGroupByOutputType[P]>
            : GetScalarType<T[P], MemberInfoGroupByOutputType[P]>
        }
      >
    >


  export type MemberInfoSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    name?: boolean
    gender?: boolean
  }


  export type MemberInfoGetPayload<S extends boolean | null | undefined | MemberInfoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MemberInfo :
    S extends undefined ? never :
    S extends { include: any } & (MemberInfoArgs | MemberInfoFindManyArgs)
    ? MemberInfo 
    : S extends { select: any } & (MemberInfoArgs | MemberInfoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof MemberInfo ? MemberInfo[P] : never
  } 
      : MemberInfo


  type MemberInfoCountArgs = 
    Omit<MemberInfoFindManyArgs, 'select' | 'include'> & {
      select?: MemberInfoCountAggregateInputType | true
    }

  export interface MemberInfoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one MemberInfo that matches the filter.
     * @param {MemberInfoFindUniqueArgs} args - Arguments to find a MemberInfo
     * @example
     * // Get one MemberInfo
     * const memberInfo = await prisma.memberInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MemberInfoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MemberInfoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MemberInfo'> extends True ? Prisma__MemberInfoClient<MemberInfoGetPayload<T>> : Prisma__MemberInfoClient<MemberInfoGetPayload<T> | null, null>

    /**
     * Find one MemberInfo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MemberInfoFindUniqueOrThrowArgs} args - Arguments to find a MemberInfo
     * @example
     * // Get one MemberInfo
     * const memberInfo = await prisma.memberInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MemberInfoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MemberInfoFindUniqueOrThrowArgs>
    ): Prisma__MemberInfoClient<MemberInfoGetPayload<T>>

    /**
     * Find the first MemberInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberInfoFindFirstArgs} args - Arguments to find a MemberInfo
     * @example
     * // Get one MemberInfo
     * const memberInfo = await prisma.memberInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MemberInfoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MemberInfoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MemberInfo'> extends True ? Prisma__MemberInfoClient<MemberInfoGetPayload<T>> : Prisma__MemberInfoClient<MemberInfoGetPayload<T> | null, null>

    /**
     * Find the first MemberInfo that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberInfoFindFirstOrThrowArgs} args - Arguments to find a MemberInfo
     * @example
     * // Get one MemberInfo
     * const memberInfo = await prisma.memberInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MemberInfoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MemberInfoFindFirstOrThrowArgs>
    ): Prisma__MemberInfoClient<MemberInfoGetPayload<T>>

    /**
     * Find zero or more MemberInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberInfoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MemberInfos
     * const memberInfos = await prisma.memberInfo.findMany()
     * 
     * // Get first 10 MemberInfos
     * const memberInfos = await prisma.memberInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const memberInfoWithIdOnly = await prisma.memberInfo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MemberInfoFindManyArgs>(
      args?: SelectSubset<T, MemberInfoFindManyArgs>
    ): Prisma.PrismaPromise<Array<MemberInfoGetPayload<T>>>

    /**
     * Create a MemberInfo.
     * @param {MemberInfoCreateArgs} args - Arguments to create a MemberInfo.
     * @example
     * // Create one MemberInfo
     * const MemberInfo = await prisma.memberInfo.create({
     *   data: {
     *     // ... data to create a MemberInfo
     *   }
     * })
     * 
    **/
    create<T extends MemberInfoCreateArgs>(
      args: SelectSubset<T, MemberInfoCreateArgs>
    ): Prisma__MemberInfoClient<MemberInfoGetPayload<T>>

    /**
     * Create many MemberInfos.
     *     @param {MemberInfoCreateManyArgs} args - Arguments to create many MemberInfos.
     *     @example
     *     // Create many MemberInfos
     *     const memberInfo = await prisma.memberInfo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MemberInfoCreateManyArgs>(
      args?: SelectSubset<T, MemberInfoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MemberInfo.
     * @param {MemberInfoDeleteArgs} args - Arguments to delete one MemberInfo.
     * @example
     * // Delete one MemberInfo
     * const MemberInfo = await prisma.memberInfo.delete({
     *   where: {
     *     // ... filter to delete one MemberInfo
     *   }
     * })
     * 
    **/
    delete<T extends MemberInfoDeleteArgs>(
      args: SelectSubset<T, MemberInfoDeleteArgs>
    ): Prisma__MemberInfoClient<MemberInfoGetPayload<T>>

    /**
     * Update one MemberInfo.
     * @param {MemberInfoUpdateArgs} args - Arguments to update one MemberInfo.
     * @example
     * // Update one MemberInfo
     * const memberInfo = await prisma.memberInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MemberInfoUpdateArgs>(
      args: SelectSubset<T, MemberInfoUpdateArgs>
    ): Prisma__MemberInfoClient<MemberInfoGetPayload<T>>

    /**
     * Delete zero or more MemberInfos.
     * @param {MemberInfoDeleteManyArgs} args - Arguments to filter MemberInfos to delete.
     * @example
     * // Delete a few MemberInfos
     * const { count } = await prisma.memberInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MemberInfoDeleteManyArgs>(
      args?: SelectSubset<T, MemberInfoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MemberInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MemberInfos
     * const memberInfo = await prisma.memberInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MemberInfoUpdateManyArgs>(
      args: SelectSubset<T, MemberInfoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MemberInfo.
     * @param {MemberInfoUpsertArgs} args - Arguments to update or create a MemberInfo.
     * @example
     * // Update or create a MemberInfo
     * const memberInfo = await prisma.memberInfo.upsert({
     *   create: {
     *     // ... data to create a MemberInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MemberInfo we want to update
     *   }
     * })
    **/
    upsert<T extends MemberInfoUpsertArgs>(
      args: SelectSubset<T, MemberInfoUpsertArgs>
    ): Prisma__MemberInfoClient<MemberInfoGetPayload<T>>

    /**
     * Count the number of MemberInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberInfoCountArgs} args - Arguments to filter MemberInfos to count.
     * @example
     * // Count the number of MemberInfos
     * const count = await prisma.memberInfo.count({
     *   where: {
     *     // ... the filter for the MemberInfos we want to count
     *   }
     * })
    **/
    count<T extends MemberInfoCountArgs>(
      args?: Subset<T, MemberInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MemberInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MemberInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MemberInfoAggregateArgs>(args: Subset<T, MemberInfoAggregateArgs>): Prisma.PrismaPromise<GetMemberInfoAggregateType<T>>

    /**
     * Group by MemberInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MemberInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MemberInfoGroupByArgs['orderBy'] }
        : { orderBy?: MemberInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MemberInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMemberInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MemberInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MemberInfoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MemberInfo base type for findUnique actions
   */
  export type MemberInfoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the MemberInfo
     */
    select?: MemberInfoSelect | null
    /**
     * Filter, which MemberInfo to fetch.
     */
    where: MemberInfoWhereUniqueInput
  }

  /**
   * MemberInfo findUnique
   */
  export interface MemberInfoFindUniqueArgs extends MemberInfoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MemberInfo findUniqueOrThrow
   */
  export type MemberInfoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MemberInfo
     */
    select?: MemberInfoSelect | null
    /**
     * Filter, which MemberInfo to fetch.
     */
    where: MemberInfoWhereUniqueInput
  }


  /**
   * MemberInfo base type for findFirst actions
   */
  export type MemberInfoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the MemberInfo
     */
    select?: MemberInfoSelect | null
    /**
     * Filter, which MemberInfo to fetch.
     */
    where?: MemberInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemberInfos to fetch.
     */
    orderBy?: Enumerable<MemberInfoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MemberInfos.
     */
    cursor?: MemberInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemberInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemberInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MemberInfos.
     */
    distinct?: Enumerable<MemberInfoScalarFieldEnum>
  }

  /**
   * MemberInfo findFirst
   */
  export interface MemberInfoFindFirstArgs extends MemberInfoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MemberInfo findFirstOrThrow
   */
  export type MemberInfoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MemberInfo
     */
    select?: MemberInfoSelect | null
    /**
     * Filter, which MemberInfo to fetch.
     */
    where?: MemberInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemberInfos to fetch.
     */
    orderBy?: Enumerable<MemberInfoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MemberInfos.
     */
    cursor?: MemberInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemberInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemberInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MemberInfos.
     */
    distinct?: Enumerable<MemberInfoScalarFieldEnum>
  }


  /**
   * MemberInfo findMany
   */
  export type MemberInfoFindManyArgs = {
    /**
     * Select specific fields to fetch from the MemberInfo
     */
    select?: MemberInfoSelect | null
    /**
     * Filter, which MemberInfos to fetch.
     */
    where?: MemberInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MemberInfos to fetch.
     */
    orderBy?: Enumerable<MemberInfoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MemberInfos.
     */
    cursor?: MemberInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MemberInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MemberInfos.
     */
    skip?: number
    distinct?: Enumerable<MemberInfoScalarFieldEnum>
  }


  /**
   * MemberInfo create
   */
  export type MemberInfoCreateArgs = {
    /**
     * Select specific fields to fetch from the MemberInfo
     */
    select?: MemberInfoSelect | null
    /**
     * The data needed to create a MemberInfo.
     */
    data: XOR<MemberInfoCreateInput, MemberInfoUncheckedCreateInput>
  }


  /**
   * MemberInfo createMany
   */
  export type MemberInfoCreateManyArgs = {
    /**
     * The data used to create many MemberInfos.
     */
    data: Enumerable<MemberInfoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MemberInfo update
   */
  export type MemberInfoUpdateArgs = {
    /**
     * Select specific fields to fetch from the MemberInfo
     */
    select?: MemberInfoSelect | null
    /**
     * The data needed to update a MemberInfo.
     */
    data: XOR<MemberInfoUpdateInput, MemberInfoUncheckedUpdateInput>
    /**
     * Choose, which MemberInfo to update.
     */
    where: MemberInfoWhereUniqueInput
  }


  /**
   * MemberInfo updateMany
   */
  export type MemberInfoUpdateManyArgs = {
    /**
     * The data used to update MemberInfos.
     */
    data: XOR<MemberInfoUpdateManyMutationInput, MemberInfoUncheckedUpdateManyInput>
    /**
     * Filter which MemberInfos to update
     */
    where?: MemberInfoWhereInput
  }


  /**
   * MemberInfo upsert
   */
  export type MemberInfoUpsertArgs = {
    /**
     * Select specific fields to fetch from the MemberInfo
     */
    select?: MemberInfoSelect | null
    /**
     * The filter to search for the MemberInfo to update in case it exists.
     */
    where: MemberInfoWhereUniqueInput
    /**
     * In case the MemberInfo found by the `where` argument doesn't exist, create a new MemberInfo with this data.
     */
    create: XOR<MemberInfoCreateInput, MemberInfoUncheckedCreateInput>
    /**
     * In case the MemberInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MemberInfoUpdateInput, MemberInfoUncheckedUpdateInput>
  }


  /**
   * MemberInfo delete
   */
  export type MemberInfoDeleteArgs = {
    /**
     * Select specific fields to fetch from the MemberInfo
     */
    select?: MemberInfoSelect | null
    /**
     * Filter which MemberInfo to delete.
     */
    where: MemberInfoWhereUniqueInput
  }


  /**
   * MemberInfo deleteMany
   */
  export type MemberInfoDeleteManyArgs = {
    /**
     * Filter which MemberInfos to delete
     */
    where?: MemberInfoWhereInput
  }


  /**
   * MemberInfo without action
   */
  export type MemberInfoArgs = {
    /**
     * Select specific fields to fetch from the MemberInfo
     */
    select?: MemberInfoSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const MemberInfoScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDeleted: 'isDeleted',
    name: 'name',
    gender: 'gender'
  };

  export type MemberInfoScalarFieldEnum = (typeof MemberInfoScalarFieldEnum)[keyof typeof MemberInfoScalarFieldEnum]


  export const ResourceTaskDefKeyRelationScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDeleted: 'isDeleted',
    resource: 'resource',
    taskDefKey: 'taskDefKey'
  };

  export type ResourceTaskDefKeyRelationScalarFieldEnum = (typeof ResourceTaskDefKeyRelationScalarFieldEnum)[keyof typeof ResourceTaskDefKeyRelationScalarFieldEnum]


  export const ResourceTaskIdRelationScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDeleted: 'isDeleted',
    taskId: 'taskId',
    processInstanceId: 'processInstanceId'
  };

  export type ResourceTaskIdRelationScalarFieldEnum = (typeof ResourceTaskIdRelationScalarFieldEnum)[keyof typeof ResourceTaskIdRelationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type ResourceTaskIdRelationWhereInput = {
    AND?: Enumerable<ResourceTaskIdRelationWhereInput>
    OR?: Enumerable<ResourceTaskIdRelationWhereInput>
    NOT?: Enumerable<ResourceTaskIdRelationWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    isDeleted?: BoolFilter | boolean
    taskId?: StringFilter | string
    processInstanceId?: StringFilter | string
  }

  export type ResourceTaskIdRelationOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    taskId?: SortOrder
    processInstanceId?: SortOrder
  }

  export type ResourceTaskIdRelationWhereUniqueInput = {
    id?: number
  }

  export type ResourceTaskIdRelationOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    taskId?: SortOrder
    processInstanceId?: SortOrder
    _count?: ResourceTaskIdRelationCountOrderByAggregateInput
    _avg?: ResourceTaskIdRelationAvgOrderByAggregateInput
    _max?: ResourceTaskIdRelationMaxOrderByAggregateInput
    _min?: ResourceTaskIdRelationMinOrderByAggregateInput
    _sum?: ResourceTaskIdRelationSumOrderByAggregateInput
  }

  export type ResourceTaskIdRelationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ResourceTaskIdRelationScalarWhereWithAggregatesInput>
    OR?: Enumerable<ResourceTaskIdRelationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ResourceTaskIdRelationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    isDeleted?: BoolWithAggregatesFilter | boolean
    taskId?: StringWithAggregatesFilter | string
    processInstanceId?: StringWithAggregatesFilter | string
  }

  export type ResourceTaskDefKeyRelationWhereInput = {
    AND?: Enumerable<ResourceTaskDefKeyRelationWhereInput>
    OR?: Enumerable<ResourceTaskDefKeyRelationWhereInput>
    NOT?: Enumerable<ResourceTaskDefKeyRelationWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    isDeleted?: BoolFilter | boolean
    resource?: StringFilter | string
    taskDefKey?: StringFilter | string
  }

  export type ResourceTaskDefKeyRelationOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    resource?: SortOrder
    taskDefKey?: SortOrder
  }

  export type ResourceTaskDefKeyRelationWhereUniqueInput = {
    id?: number
    taskDefKey?: string
  }

  export type ResourceTaskDefKeyRelationOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    resource?: SortOrder
    taskDefKey?: SortOrder
    _count?: ResourceTaskDefKeyRelationCountOrderByAggregateInput
    _avg?: ResourceTaskDefKeyRelationAvgOrderByAggregateInput
    _max?: ResourceTaskDefKeyRelationMaxOrderByAggregateInput
    _min?: ResourceTaskDefKeyRelationMinOrderByAggregateInput
    _sum?: ResourceTaskDefKeyRelationSumOrderByAggregateInput
  }

  export type ResourceTaskDefKeyRelationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ResourceTaskDefKeyRelationScalarWhereWithAggregatesInput>
    OR?: Enumerable<ResourceTaskDefKeyRelationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ResourceTaskDefKeyRelationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    isDeleted?: BoolWithAggregatesFilter | boolean
    resource?: StringWithAggregatesFilter | string
    taskDefKey?: StringWithAggregatesFilter | string
  }

  export type MemberInfoWhereInput = {
    AND?: Enumerable<MemberInfoWhereInput>
    OR?: Enumerable<MemberInfoWhereInput>
    NOT?: Enumerable<MemberInfoWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    isDeleted?: BoolFilter | boolean
    name?: StringFilter | string
    gender?: StringFilter | string
  }

  export type MemberInfoOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    gender?: SortOrder
  }

  export type MemberInfoWhereUniqueInput = {
    id?: number
  }

  export type MemberInfoOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    _count?: MemberInfoCountOrderByAggregateInput
    _avg?: MemberInfoAvgOrderByAggregateInput
    _max?: MemberInfoMaxOrderByAggregateInput
    _min?: MemberInfoMinOrderByAggregateInput
    _sum?: MemberInfoSumOrderByAggregateInput
  }

  export type MemberInfoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MemberInfoScalarWhereWithAggregatesInput>
    OR?: Enumerable<MemberInfoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MemberInfoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    isDeleted?: BoolWithAggregatesFilter | boolean
    name?: StringWithAggregatesFilter | string
    gender?: StringWithAggregatesFilter | string
  }

  export type ResourceTaskIdRelationCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    taskId: string
    processInstanceId: string
  }

  export type ResourceTaskIdRelationUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    taskId: string
    processInstanceId: string
  }

  export type ResourceTaskIdRelationUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    taskId?: StringFieldUpdateOperationsInput | string
    processInstanceId?: StringFieldUpdateOperationsInput | string
  }

  export type ResourceTaskIdRelationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    taskId?: StringFieldUpdateOperationsInput | string
    processInstanceId?: StringFieldUpdateOperationsInput | string
  }

  export type ResourceTaskIdRelationCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    taskId: string
    processInstanceId: string
  }

  export type ResourceTaskIdRelationUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    taskId?: StringFieldUpdateOperationsInput | string
    processInstanceId?: StringFieldUpdateOperationsInput | string
  }

  export type ResourceTaskIdRelationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    taskId?: StringFieldUpdateOperationsInput | string
    processInstanceId?: StringFieldUpdateOperationsInput | string
  }

  export type ResourceTaskDefKeyRelationCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    resource: string
    taskDefKey: string
  }

  export type ResourceTaskDefKeyRelationUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    resource: string
    taskDefKey: string
  }

  export type ResourceTaskDefKeyRelationUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    resource?: StringFieldUpdateOperationsInput | string
    taskDefKey?: StringFieldUpdateOperationsInput | string
  }

  export type ResourceTaskDefKeyRelationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    resource?: StringFieldUpdateOperationsInput | string
    taskDefKey?: StringFieldUpdateOperationsInput | string
  }

  export type ResourceTaskDefKeyRelationCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    resource: string
    taskDefKey: string
  }

  export type ResourceTaskDefKeyRelationUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    resource?: StringFieldUpdateOperationsInput | string
    taskDefKey?: StringFieldUpdateOperationsInput | string
  }

  export type ResourceTaskDefKeyRelationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    resource?: StringFieldUpdateOperationsInput | string
    taskDefKey?: StringFieldUpdateOperationsInput | string
  }

  export type MemberInfoCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    gender: string
  }

  export type MemberInfoUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    gender: string
  }

  export type MemberInfoUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
  }

  export type MemberInfoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
  }

  export type MemberInfoCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    gender: string
  }

  export type MemberInfoUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
  }

  export type MemberInfoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type ResourceTaskIdRelationCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    taskId?: SortOrder
    processInstanceId?: SortOrder
  }

  export type ResourceTaskIdRelationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ResourceTaskIdRelationMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    taskId?: SortOrder
    processInstanceId?: SortOrder
  }

  export type ResourceTaskIdRelationMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    taskId?: SortOrder
    processInstanceId?: SortOrder
  }

  export type ResourceTaskIdRelationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type ResourceTaskDefKeyRelationCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    resource?: SortOrder
    taskDefKey?: SortOrder
  }

  export type ResourceTaskDefKeyRelationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ResourceTaskDefKeyRelationMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    resource?: SortOrder
    taskDefKey?: SortOrder
  }

  export type ResourceTaskDefKeyRelationMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    resource?: SortOrder
    taskDefKey?: SortOrder
  }

  export type ResourceTaskDefKeyRelationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MemberInfoCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    gender?: SortOrder
  }

  export type MemberInfoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MemberInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    gender?: SortOrder
  }

  export type MemberInfoMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    gender?: SortOrder
  }

  export type MemberInfoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}