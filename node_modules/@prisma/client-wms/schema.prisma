// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/@prisma/client-wms"
}

generator zod {
  provider                  = "node ../../node_modules/zod-prisma-types/dist/bin.js" // npx zod-prisma-types 如果无法生成可以改成 node ../../node_modules/zod-prisma-types/dist/bin.js 会有错误堆栈
  createModelTypes          = true
  createInputTypes          = false
  addInputTypeValidation    = false
  addIncludeType            = true
  addSelectType             = false
  coerceDate                = false
  createRelationValuesTypes = true
  output                    = "../../../libs/prisma-wms/src/zod"
  prismaClientPath          = "@prisma/client-wms"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

/// @schema.display_name 节点和表单关联关系
model TaskFormRelation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isDeleted Boolean  @default(false)

  taskDefinitionKey String @unique()
  formKey           String
}

/// @schema.display_name 成员信息
model MemberInfo {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isDeleted Boolean  @default(false)

  name   String
  gender String
}

/// @schema.display_name 员工
model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isDeleted Boolean? @default(false)

  username           String
  hashedPassword     String?
  hashedRefreshToken String?
  status             UserStatus
  role               UserGroup  @default(USER)

  profile UserProfile?
  Post    Post[]
}

// user -> user profile 1-1
// https://www.prisma.io/docs/concepts/components/prisma-schema/relations/one-to-one-relations
// 主要关注点：选择那一侧是可选的
model UserProfile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isDeleted Boolean? @default(false)

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  fullName String

  @@index([userId])
}

enum UserStatus {
  ACTIVE // 激活
  FORBIDDEN // 禁用
}

enum UserGroup {
  ADMIN
  USER
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User    @relation(fields: [authorId], references: [id])
  authorId  Int

  @@index([authorId])
}
