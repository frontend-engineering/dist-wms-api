
/**
 * Client
**/

import * as runtime from './runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model App
 * @schema.primary_key id
 * @schema.searchable_columns name,displayName,description
 * @schema.display_column displayName
 * @schema.display_name 应用
 * @schema.display_primary_key true
 */
export type App = {
  id: string
  createdAt: Date
  updatedAt: Date
  /**
   * @schema.title 应用id
   * @schema.access_type read_only
   */
  name: string
  hashedAppToken: string | null
  hashedPassword: string
  hashedRefreshToken: string | null
  recoveryCode: string | null
  recoveryToken: string | null
  /**
   * @schema.title 应用名
   */
  displayName: string
  /**
   * @schema.title 应用描述
   */
  description: string | null
  isDeleted: boolean | null
  tenantId: string
}

/**
 * Model Tenant
 * 
 */
export type Tenant = {
  id: string
  createdAt: Date
  updatedAt: Date
  name: string
  email: string
  hashedPassword: string
  hashedRefreshToken: string | null
  recoveryCode: string | null
  recoveryToken: string | null
  role: string | null
}

/**
 * Model TenantPreSignup
 * 
 */
export type TenantPreSignup = {
  id: string
  createdAt: Date
  updatedAt: Date
  email: string
  verifyCode: string
}

/**
 * Model Question
 * 
 */
export type Question = {
  id: string
  uid: string
  question: string | null
  answer: string | null
  success: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model JYProfile
 * 
 */
export type JYProfile = {
  id: string
  createdAt: Date
  updatedAt: Date
  userId: string
}

/**
 * Model JYFreeCount
 * 
 */
export type JYFreeCount = {
  id: string
  createdAt: Date
  updatedAt: Date
  cycle: number
  count: number
  profileId: string
}

/**
 * Model Article
 * 
 */
export type Article = {
  id: string
  createdAt: Date
  updatedAt: Date
  link: string
  source: string | null
  title: string | null
  image: string | null
  excerpt: string | null
  profileId: string
}

/**
 * Model Product
 * @schema.primary_key id
 * @schema.searchable_columns id,name
 * @schema.display_name 产品
 * @schema.display_column name
 */
export type Product = {
  id: string
  createdAt: Date
  updatedAt: Date
  /**
   * @schema.title 产品名
   */
  name: string
  /**
   * @schema.title 价格
   * @schema.override_type integer
   */
  price: Prisma.Decimal
  productType: ProductType
  plan: number | null
  /**
   * @schema.title 额度
   */
  amount: number | null
  extendedDescriptionData: Prisma.JsonValue | null
  fileSize: string | null
  storeDuration: number | null
  /**
   * @schema.title 广告
   */
  hasAds: string | null
  /**
   * @schema.title 技术支持
   */
  tecSupport: string | null
  /**
   * @schema.title 有效期/天
   */
  validityPeriod: number | null
  /**
   * @schema.access_type read_only
   */
  appId: string
  isDeleted: boolean | null
  tenantId: string
  restricted: number
}

/**
 * Model Pay
 * 
 */
export type Pay = {
  id: string
  createdAt: Date
  updatedAt: Date
  status: PayStatus
  orderId: string
  transactionId: string
  tenantId: string
}

/**
 * Model Customer
 * @schema.primary_key id
 * @schema.display_name 用户
 * @schema.display_column name
 */
export type Customer = {
  id: string
  createdAt: Date
  updatedAt: Date
  /**
   * @schema.title 用户名
   */
  name: string
  /**
   * @schema.access_type read_only
   */
  appId: string
  /**
   * @schema.title 邮箱
   */
  email: string | null
  hashedPassword: string | null
  hashedRefreshToken: string | null
  recoveryCode: string | null
  recoveryToken: string | null
  isDeleted: boolean | null
  tenantId: string
}

/**
 * Model WeixinProfile
 * @schema.primary_key id
 * @schema.display_name 微信用户信息
 * @schema.display_column nickname
 */
export type WeixinProfile = {
  id: string
  createdAt: Date
  updatedAt: Date
  unionid: string | null
  loginOpenid: string
  headimgurl: string
  nickname: string
  sex: number
  customerId: string
  tenantId: string
}

/**
 * Model Profile
 * @schema.primary_key id
 * @schema.display_name 用户信息
 * @schema.display_column productType
 */
export type Profile = {
  id: string
  createdAt: Date
  updatedAt: Date
  customerId: string
  productType: ProductType
  plan: number | null
  amount: number | null
  expireAt: Date | null
  tenantId: string
}

/**
 * Model customerPreSignup
 * 
 */
export type customerPreSignup = {
  id: string
  createdAt: Date
  updatedAt: Date
  email: string
  verifyCode: string
  appId: string
  tenantId: string
}

/**
 * Model LegacyProfile
 * 
 */
export type LegacyProfile = {
  id: string
  createdAt: Date
  updatedAt: Date
  customerId: string
  license: string
  refreshToken: string
}

/**
 * Model ProductSnapshot
 * 
 */
export type ProductSnapshot = {
  id: string
  createdAt: Date
  updatedAt: Date
  snapshotPrice: Prisma.Decimal
  orderId: string
  productId: string
  tenantId: string
}

/**
 * Model Order
 * @schema.primary_key id
 * @schema.display_name 订单
 * @schema.display_primary_key true
 */
export type Order = {
  id: string
  createdAt: Date
  updatedAt: Date
  serial: number
  status: OrderStatus
  /**
   * @schema.reference Customer
   */
  customerId: string
  appId: string
  isDeleted: boolean | null
  tenantId: string
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const OrderStatus: {
  INITIALIZED: 'INITIALIZED',
  PAY_ASSOCIATED: 'PAY_ASSOCIATED',
  FREE_DEAL: 'FREE_DEAL',
  CANCELED: 'CANCELED'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]


export const PayStatus: {
  UNPAIED: 'UNPAIED',
  PAIED: 'PAIED',
  REFUND: 'REFUND'
};

export type PayStatus = (typeof PayStatus)[keyof typeof PayStatus]


export const ProductType: {
  AMOUNT: 'AMOUNT',
  PLAN: 'PLAN'
};

export type ProductType = (typeof ProductType)[keyof typeof ProductType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Apps
 * const apps = await prisma.app.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Apps
   * const apps = await prisma.app.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.app`: Exposes CRUD operations for the **App** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Apps
    * const apps = await prisma.app.findMany()
    * ```
    */
  get app(): Prisma.AppDelegate<GlobalReject>;

  /**
   * `prisma.tenant`: Exposes CRUD operations for the **Tenant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tenants
    * const tenants = await prisma.tenant.findMany()
    * ```
    */
  get tenant(): Prisma.TenantDelegate<GlobalReject>;

  /**
   * `prisma.tenantPreSignup`: Exposes CRUD operations for the **TenantPreSignup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TenantPreSignups
    * const tenantPreSignups = await prisma.tenantPreSignup.findMany()
    * ```
    */
  get tenantPreSignup(): Prisma.TenantPreSignupDelegate<GlobalReject>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<GlobalReject>;

  /**
   * `prisma.jYProfile`: Exposes CRUD operations for the **JYProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JYProfiles
    * const jYProfiles = await prisma.jYProfile.findMany()
    * ```
    */
  get jYProfile(): Prisma.JYProfileDelegate<GlobalReject>;

  /**
   * `prisma.jYFreeCount`: Exposes CRUD operations for the **JYFreeCount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JYFreeCounts
    * const jYFreeCounts = await prisma.jYFreeCount.findMany()
    * ```
    */
  get jYFreeCount(): Prisma.JYFreeCountDelegate<GlobalReject>;

  /**
   * `prisma.article`: Exposes CRUD operations for the **Article** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Articles
    * const articles = await prisma.article.findMany()
    * ```
    */
  get article(): Prisma.ArticleDelegate<GlobalReject>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<GlobalReject>;

  /**
   * `prisma.pay`: Exposes CRUD operations for the **Pay** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pays
    * const pays = await prisma.pay.findMany()
    * ```
    */
  get pay(): Prisma.PayDelegate<GlobalReject>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<GlobalReject>;

  /**
   * `prisma.weixinProfile`: Exposes CRUD operations for the **WeixinProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WeixinProfiles
    * const weixinProfiles = await prisma.weixinProfile.findMany()
    * ```
    */
  get weixinProfile(): Prisma.WeixinProfileDelegate<GlobalReject>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<GlobalReject>;

  /**
   * `prisma.customerPreSignup`: Exposes CRUD operations for the **customerPreSignup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerPreSignups
    * const customerPreSignups = await prisma.customerPreSignup.findMany()
    * ```
    */
  get customerPreSignup(): Prisma.customerPreSignupDelegate<GlobalReject>;

  /**
   * `prisma.legacyProfile`: Exposes CRUD operations for the **LegacyProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LegacyProfiles
    * const legacyProfiles = await prisma.legacyProfile.findMany()
    * ```
    */
  get legacyProfile(): Prisma.LegacyProfileDelegate<GlobalReject>;

  /**
   * `prisma.productSnapshot`: Exposes CRUD operations for the **ProductSnapshot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductSnapshots
    * const productSnapshots = await prisma.productSnapshot.findMany()
    * ```
    */
  get productSnapshot(): Prisma.ProductSnapshotDelegate<GlobalReject>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.14.0
   * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    App: 'App',
    Tenant: 'Tenant',
    TenantPreSignup: 'TenantPreSignup',
    Question: 'Question',
    JYProfile: 'JYProfile',
    JYFreeCount: 'JYFreeCount',
    Article: 'Article',
    Product: 'Product',
    Pay: 'Pay',
    Customer: 'Customer',
    WeixinProfile: 'WeixinProfile',
    Profile: 'Profile',
    customerPreSignup: 'customerPreSignup',
    LegacyProfile: 'LegacyProfile',
    ProductSnapshot: 'ProductSnapshot',
    Order: 'Order'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AppCountOutputType
   */


  export type AppCountOutputType = {
    products: number
    customers: number
    orders: number
  }

  export type AppCountOutputTypeSelect = {
    products?: boolean
    customers?: boolean
    orders?: boolean
  }

  export type AppCountOutputTypeGetPayload<S extends boolean | null | undefined | AppCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AppCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (AppCountOutputTypeArgs)
    ? AppCountOutputType 
    : S extends { select: any } & (AppCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof AppCountOutputType ? AppCountOutputType[P] : never
  } 
      : AppCountOutputType




  // Custom InputTypes

  /**
   * AppCountOutputType without action
   */
  export type AppCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AppCountOutputType
     */
    select?: AppCountOutputTypeSelect | null
  }



  /**
   * Count Type TenantCountOutputType
   */


  export type TenantCountOutputType = {
    App: number
  }

  export type TenantCountOutputTypeSelect = {
    App?: boolean
  }

  export type TenantCountOutputTypeGetPayload<S extends boolean | null | undefined | TenantCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TenantCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TenantCountOutputTypeArgs)
    ? TenantCountOutputType 
    : S extends { select: any } & (TenantCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TenantCountOutputType ? TenantCountOutputType[P] : never
  } 
      : TenantCountOutputType




  // Custom InputTypes

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TenantCountOutputType
     */
    select?: TenantCountOutputTypeSelect | null
  }



  /**
   * Count Type JYProfileCountOutputType
   */


  export type JYProfileCountOutputType = {
    articles: number
    freeCounts: number
  }

  export type JYProfileCountOutputTypeSelect = {
    articles?: boolean
    freeCounts?: boolean
  }

  export type JYProfileCountOutputTypeGetPayload<S extends boolean | null | undefined | JYProfileCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? JYProfileCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (JYProfileCountOutputTypeArgs)
    ? JYProfileCountOutputType 
    : S extends { select: any } & (JYProfileCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof JYProfileCountOutputType ? JYProfileCountOutputType[P] : never
  } 
      : JYProfileCountOutputType




  // Custom InputTypes

  /**
   * JYProfileCountOutputType without action
   */
  export type JYProfileCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the JYProfileCountOutputType
     */
    select?: JYProfileCountOutputTypeSelect | null
  }



  /**
   * Count Type ProductCountOutputType
   */


  export type ProductCountOutputType = {
    productSnapshots: number
  }

  export type ProductCountOutputTypeSelect = {
    productSnapshots?: boolean
  }

  export type ProductCountOutputTypeGetPayload<S extends boolean | null | undefined | ProductCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProductCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ProductCountOutputTypeArgs)
    ? ProductCountOutputType 
    : S extends { select: any } & (ProductCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ProductCountOutputType ? ProductCountOutputType[P] : never
  } 
      : ProductCountOutputType




  // Custom InputTypes

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect | null
  }



  /**
   * Count Type CustomerCountOutputType
   */


  export type CustomerCountOutputType = {
    orders: number
  }

  export type CustomerCountOutputTypeSelect = {
    orders?: boolean
  }

  export type CustomerCountOutputTypeGetPayload<S extends boolean | null | undefined | CustomerCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CustomerCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CustomerCountOutputTypeArgs)
    ? CustomerCountOutputType 
    : S extends { select: any } & (CustomerCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CustomerCountOutputType ? CustomerCountOutputType[P] : never
  } 
      : CustomerCountOutputType




  // Custom InputTypes

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect | null
  }



  /**
   * Count Type OrderCountOutputType
   */


  export type OrderCountOutputType = {
    productSnapshots: number
  }

  export type OrderCountOutputTypeSelect = {
    productSnapshots?: boolean
  }

  export type OrderCountOutputTypeGetPayload<S extends boolean | null | undefined | OrderCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? OrderCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (OrderCountOutputTypeArgs)
    ? OrderCountOutputType 
    : S extends { select: any } & (OrderCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof OrderCountOutputType ? OrderCountOutputType[P] : never
  } 
      : OrderCountOutputType




  // Custom InputTypes

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model App
   */


  export type AggregateApp = {
    _count: AppCountAggregateOutputType | null
    _min: AppMinAggregateOutputType | null
    _max: AppMaxAggregateOutputType | null
  }

  export type AppMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    hashedAppToken: string | null
    hashedPassword: string | null
    hashedRefreshToken: string | null
    recoveryCode: string | null
    recoveryToken: string | null
    displayName: string | null
    description: string | null
    isDeleted: boolean | null
    tenantId: string | null
  }

  export type AppMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    hashedAppToken: string | null
    hashedPassword: string | null
    hashedRefreshToken: string | null
    recoveryCode: string | null
    recoveryToken: string | null
    displayName: string | null
    description: string | null
    isDeleted: boolean | null
    tenantId: string | null
  }

  export type AppCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    hashedAppToken: number
    hashedPassword: number
    hashedRefreshToken: number
    recoveryCode: number
    recoveryToken: number
    displayName: number
    description: number
    isDeleted: number
    tenantId: number
    _all: number
  }


  export type AppMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    hashedAppToken?: true
    hashedPassword?: true
    hashedRefreshToken?: true
    recoveryCode?: true
    recoveryToken?: true
    displayName?: true
    description?: true
    isDeleted?: true
    tenantId?: true
  }

  export type AppMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    hashedAppToken?: true
    hashedPassword?: true
    hashedRefreshToken?: true
    recoveryCode?: true
    recoveryToken?: true
    displayName?: true
    description?: true
    isDeleted?: true
    tenantId?: true
  }

  export type AppCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    hashedAppToken?: true
    hashedPassword?: true
    hashedRefreshToken?: true
    recoveryCode?: true
    recoveryToken?: true
    displayName?: true
    description?: true
    isDeleted?: true
    tenantId?: true
    _all?: true
  }

  export type AppAggregateArgs = {
    /**
     * Filter which App to aggregate.
     */
    where?: AppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apps to fetch.
     */
    orderBy?: Enumerable<AppOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Apps
    **/
    _count?: true | AppCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppMaxAggregateInputType
  }

  export type GetAppAggregateType<T extends AppAggregateArgs> = {
        [P in keyof T & keyof AggregateApp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApp[P]>
      : GetScalarType<T[P], AggregateApp[P]>
  }




  export type AppGroupByArgs = {
    where?: AppWhereInput
    orderBy?: Enumerable<AppOrderByWithAggregationInput>
    by: AppScalarFieldEnum[]
    having?: AppScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppCountAggregateInputType | true
    _min?: AppMinAggregateInputType
    _max?: AppMaxAggregateInputType
  }


  export type AppGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    name: string
    hashedAppToken: string | null
    hashedPassword: string
    hashedRefreshToken: string | null
    recoveryCode: string | null
    recoveryToken: string | null
    displayName: string
    description: string | null
    isDeleted: boolean | null
    tenantId: string
    _count: AppCountAggregateOutputType | null
    _min: AppMinAggregateOutputType | null
    _max: AppMaxAggregateOutputType | null
  }

  type GetAppGroupByPayload<T extends AppGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AppGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppGroupByOutputType[P]>
            : GetScalarType<T[P], AppGroupByOutputType[P]>
        }
      >
    >


  export type AppSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    hashedAppToken?: boolean
    hashedPassword?: boolean
    hashedRefreshToken?: boolean
    recoveryCode?: boolean
    recoveryToken?: boolean
    displayName?: boolean
    description?: boolean
    isDeleted?: boolean
    tenantId?: boolean
    products?: boolean | App$productsArgs
    customers?: boolean | App$customersArgs
    orders?: boolean | App$ordersArgs
    tenant?: boolean | TenantArgs
    _count?: boolean | AppCountOutputTypeArgs
  }


  export type AppInclude = {
    products?: boolean | App$productsArgs
    customers?: boolean | App$customersArgs
    orders?: boolean | App$ordersArgs
    tenant?: boolean | TenantArgs
    _count?: boolean | AppCountOutputTypeArgs
  }

  export type AppGetPayload<S extends boolean | null | undefined | AppArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? App :
    S extends undefined ? never :
    S extends { include: any } & (AppArgs | AppFindManyArgs)
    ? App  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'products' ? Array < ProductGetPayload<S['include'][P]>>  :
        P extends 'customers' ? Array < CustomerGetPayload<S['include'][P]>>  :
        P extends 'orders' ? Array < OrderGetPayload<S['include'][P]>>  :
        P extends 'tenant' ? TenantGetPayload<S['include'][P]> | null :
        P extends '_count' ? AppCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AppArgs | AppFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'products' ? Array < ProductGetPayload<S['select'][P]>>  :
        P extends 'customers' ? Array < CustomerGetPayload<S['select'][P]>>  :
        P extends 'orders' ? Array < OrderGetPayload<S['select'][P]>>  :
        P extends 'tenant' ? TenantGetPayload<S['select'][P]> | null :
        P extends '_count' ? AppCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof App ? App[P] : never
  } 
      : App


  type AppCountArgs = 
    Omit<AppFindManyArgs, 'select' | 'include'> & {
      select?: AppCountAggregateInputType | true
    }

  export interface AppDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one App that matches the filter.
     * @param {AppFindUniqueArgs} args - Arguments to find a App
     * @example
     * // Get one App
     * const app = await prisma.app.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AppFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AppFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'App'> extends True ? Prisma__AppClient<AppGetPayload<T>> : Prisma__AppClient<AppGetPayload<T> | null, null>

    /**
     * Find one App that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AppFindUniqueOrThrowArgs} args - Arguments to find a App
     * @example
     * // Get one App
     * const app = await prisma.app.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AppFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AppFindUniqueOrThrowArgs>
    ): Prisma__AppClient<AppGetPayload<T>>

    /**
     * Find the first App that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppFindFirstArgs} args - Arguments to find a App
     * @example
     * // Get one App
     * const app = await prisma.app.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AppFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AppFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'App'> extends True ? Prisma__AppClient<AppGetPayload<T>> : Prisma__AppClient<AppGetPayload<T> | null, null>

    /**
     * Find the first App that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppFindFirstOrThrowArgs} args - Arguments to find a App
     * @example
     * // Get one App
     * const app = await prisma.app.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AppFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AppFindFirstOrThrowArgs>
    ): Prisma__AppClient<AppGetPayload<T>>

    /**
     * Find zero or more Apps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Apps
     * const apps = await prisma.app.findMany()
     * 
     * // Get first 10 Apps
     * const apps = await prisma.app.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appWithIdOnly = await prisma.app.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AppFindManyArgs>(
      args?: SelectSubset<T, AppFindManyArgs>
    ): Prisma.PrismaPromise<Array<AppGetPayload<T>>>

    /**
     * Create a App.
     * @param {AppCreateArgs} args - Arguments to create a App.
     * @example
     * // Create one App
     * const App = await prisma.app.create({
     *   data: {
     *     // ... data to create a App
     *   }
     * })
     * 
    **/
    create<T extends AppCreateArgs>(
      args: SelectSubset<T, AppCreateArgs>
    ): Prisma__AppClient<AppGetPayload<T>>

    /**
     * Create many Apps.
     *     @param {AppCreateManyArgs} args - Arguments to create many Apps.
     *     @example
     *     // Create many Apps
     *     const app = await prisma.app.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AppCreateManyArgs>(
      args?: SelectSubset<T, AppCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a App.
     * @param {AppDeleteArgs} args - Arguments to delete one App.
     * @example
     * // Delete one App
     * const App = await prisma.app.delete({
     *   where: {
     *     // ... filter to delete one App
     *   }
     * })
     * 
    **/
    delete<T extends AppDeleteArgs>(
      args: SelectSubset<T, AppDeleteArgs>
    ): Prisma__AppClient<AppGetPayload<T>>

    /**
     * Update one App.
     * @param {AppUpdateArgs} args - Arguments to update one App.
     * @example
     * // Update one App
     * const app = await prisma.app.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AppUpdateArgs>(
      args: SelectSubset<T, AppUpdateArgs>
    ): Prisma__AppClient<AppGetPayload<T>>

    /**
     * Delete zero or more Apps.
     * @param {AppDeleteManyArgs} args - Arguments to filter Apps to delete.
     * @example
     * // Delete a few Apps
     * const { count } = await prisma.app.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AppDeleteManyArgs>(
      args?: SelectSubset<T, AppDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Apps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Apps
     * const app = await prisma.app.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AppUpdateManyArgs>(
      args: SelectSubset<T, AppUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one App.
     * @param {AppUpsertArgs} args - Arguments to update or create a App.
     * @example
     * // Update or create a App
     * const app = await prisma.app.upsert({
     *   create: {
     *     // ... data to create a App
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the App we want to update
     *   }
     * })
    **/
    upsert<T extends AppUpsertArgs>(
      args: SelectSubset<T, AppUpsertArgs>
    ): Prisma__AppClient<AppGetPayload<T>>

    /**
     * Count the number of Apps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppCountArgs} args - Arguments to filter Apps to count.
     * @example
     * // Count the number of Apps
     * const count = await prisma.app.count({
     *   where: {
     *     // ... the filter for the Apps we want to count
     *   }
     * })
    **/
    count<T extends AppCountArgs>(
      args?: Subset<T, AppCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a App.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppAggregateArgs>(args: Subset<T, AppAggregateArgs>): Prisma.PrismaPromise<GetAppAggregateType<T>>

    /**
     * Group by App.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppGroupByArgs['orderBy'] }
        : { orderBy?: AppGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for App.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AppClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    products<T extends App$productsArgs= {}>(args?: Subset<T, App$productsArgs>): Prisma.PrismaPromise<Array<ProductGetPayload<T>>| Null>;

    customers<T extends App$customersArgs= {}>(args?: Subset<T, App$customersArgs>): Prisma.PrismaPromise<Array<CustomerGetPayload<T>>| Null>;

    orders<T extends App$ordersArgs= {}>(args?: Subset<T, App$ordersArgs>): Prisma.PrismaPromise<Array<OrderGetPayload<T>>| Null>;

    tenant<T extends TenantArgs= {}>(args?: Subset<T, TenantArgs>): Prisma__TenantClient<TenantGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * App base type for findUnique actions
   */
  export type AppFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude | null
    /**
     * Filter, which App to fetch.
     */
    where: AppWhereUniqueInput
  }

  /**
   * App findUnique
   */
  export interface AppFindUniqueArgs extends AppFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * App findUniqueOrThrow
   */
  export type AppFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude | null
    /**
     * Filter, which App to fetch.
     */
    where: AppWhereUniqueInput
  }


  /**
   * App base type for findFirst actions
   */
  export type AppFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude | null
    /**
     * Filter, which App to fetch.
     */
    where?: AppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apps to fetch.
     */
    orderBy?: Enumerable<AppOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Apps.
     */
    cursor?: AppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Apps.
     */
    distinct?: Enumerable<AppScalarFieldEnum>
  }

  /**
   * App findFirst
   */
  export interface AppFindFirstArgs extends AppFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * App findFirstOrThrow
   */
  export type AppFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude | null
    /**
     * Filter, which App to fetch.
     */
    where?: AppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apps to fetch.
     */
    orderBy?: Enumerable<AppOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Apps.
     */
    cursor?: AppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Apps.
     */
    distinct?: Enumerable<AppScalarFieldEnum>
  }


  /**
   * App findMany
   */
  export type AppFindManyArgs = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude | null
    /**
     * Filter, which Apps to fetch.
     */
    where?: AppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apps to fetch.
     */
    orderBy?: Enumerable<AppOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Apps.
     */
    cursor?: AppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apps.
     */
    skip?: number
    distinct?: Enumerable<AppScalarFieldEnum>
  }


  /**
   * App create
   */
  export type AppCreateArgs = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude | null
    /**
     * The data needed to create a App.
     */
    data: XOR<AppCreateInput, AppUncheckedCreateInput>
  }


  /**
   * App createMany
   */
  export type AppCreateManyArgs = {
    /**
     * The data used to create many Apps.
     */
    data: Enumerable<AppCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * App update
   */
  export type AppUpdateArgs = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude | null
    /**
     * The data needed to update a App.
     */
    data: XOR<AppUpdateInput, AppUncheckedUpdateInput>
    /**
     * Choose, which App to update.
     */
    where: AppWhereUniqueInput
  }


  /**
   * App updateMany
   */
  export type AppUpdateManyArgs = {
    /**
     * The data used to update Apps.
     */
    data: XOR<AppUpdateManyMutationInput, AppUncheckedUpdateManyInput>
    /**
     * Filter which Apps to update
     */
    where?: AppWhereInput
  }


  /**
   * App upsert
   */
  export type AppUpsertArgs = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude | null
    /**
     * The filter to search for the App to update in case it exists.
     */
    where: AppWhereUniqueInput
    /**
     * In case the App found by the `where` argument doesn't exist, create a new App with this data.
     */
    create: XOR<AppCreateInput, AppUncheckedCreateInput>
    /**
     * In case the App was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppUpdateInput, AppUncheckedUpdateInput>
  }


  /**
   * App delete
   */
  export type AppDeleteArgs = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude | null
    /**
     * Filter which App to delete.
     */
    where: AppWhereUniqueInput
  }


  /**
   * App deleteMany
   */
  export type AppDeleteManyArgs = {
    /**
     * Filter which Apps to delete
     */
    where?: AppWhereInput
  }


  /**
   * App.products
   */
  export type App$productsArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    where?: ProductWhereInput
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * App.customers
   */
  export type App$customersArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    where?: CustomerWhereInput
    orderBy?: Enumerable<CustomerOrderByWithRelationInput>
    cursor?: CustomerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }


  /**
   * App.orders
   */
  export type App$ordersArgs = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude | null
    where?: OrderWhereInput
    orderBy?: Enumerable<OrderOrderByWithRelationInput>
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * App without action
   */
  export type AppArgs = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude | null
  }



  /**
   * Model Tenant
   */


  export type AggregateTenant = {
    _count: TenantCountAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  export type TenantMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    email: string | null
    hashedPassword: string | null
    hashedRefreshToken: string | null
    recoveryCode: string | null
    recoveryToken: string | null
    role: string | null
  }

  export type TenantMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    email: string | null
    hashedPassword: string | null
    hashedRefreshToken: string | null
    recoveryCode: string | null
    recoveryToken: string | null
    role: string | null
  }

  export type TenantCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    email: number
    hashedPassword: number
    hashedRefreshToken: number
    recoveryCode: number
    recoveryToken: number
    role: number
    _all: number
  }


  export type TenantMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    email?: true
    hashedPassword?: true
    hashedRefreshToken?: true
    recoveryCode?: true
    recoveryToken?: true
    role?: true
  }

  export type TenantMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    email?: true
    hashedPassword?: true
    hashedRefreshToken?: true
    recoveryCode?: true
    recoveryToken?: true
    role?: true
  }

  export type TenantCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    email?: true
    hashedPassword?: true
    hashedRefreshToken?: true
    recoveryCode?: true
    recoveryToken?: true
    role?: true
    _all?: true
  }

  export type TenantAggregateArgs = {
    /**
     * Filter which Tenant to aggregate.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: Enumerable<TenantOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tenants
    **/
    _count?: true | TenantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TenantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TenantMaxAggregateInputType
  }

  export type GetTenantAggregateType<T extends TenantAggregateArgs> = {
        [P in keyof T & keyof AggregateTenant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTenant[P]>
      : GetScalarType<T[P], AggregateTenant[P]>
  }




  export type TenantGroupByArgs = {
    where?: TenantWhereInput
    orderBy?: Enumerable<TenantOrderByWithAggregationInput>
    by: TenantScalarFieldEnum[]
    having?: TenantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TenantCountAggregateInputType | true
    _min?: TenantMinAggregateInputType
    _max?: TenantMaxAggregateInputType
  }


  export type TenantGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    name: string
    email: string
    hashedPassword: string
    hashedRefreshToken: string | null
    recoveryCode: string | null
    recoveryToken: string | null
    role: string | null
    _count: TenantCountAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  type GetTenantGroupByPayload<T extends TenantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TenantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TenantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TenantGroupByOutputType[P]>
            : GetScalarType<T[P], TenantGroupByOutputType[P]>
        }
      >
    >


  export type TenantSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    email?: boolean
    hashedPassword?: boolean
    hashedRefreshToken?: boolean
    recoveryCode?: boolean
    recoveryToken?: boolean
    role?: boolean
    App?: boolean | Tenant$AppArgs
    _count?: boolean | TenantCountOutputTypeArgs
  }


  export type TenantInclude = {
    App?: boolean | Tenant$AppArgs
    _count?: boolean | TenantCountOutputTypeArgs
  }

  export type TenantGetPayload<S extends boolean | null | undefined | TenantArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Tenant :
    S extends undefined ? never :
    S extends { include: any } & (TenantArgs | TenantFindManyArgs)
    ? Tenant  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'App' ? Array < AppGetPayload<S['include'][P]>>  :
        P extends '_count' ? TenantCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TenantArgs | TenantFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'App' ? Array < AppGetPayload<S['select'][P]>>  :
        P extends '_count' ? TenantCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Tenant ? Tenant[P] : never
  } 
      : Tenant


  type TenantCountArgs = 
    Omit<TenantFindManyArgs, 'select' | 'include'> & {
      select?: TenantCountAggregateInputType | true
    }

  export interface TenantDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Tenant that matches the filter.
     * @param {TenantFindUniqueArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TenantFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TenantFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tenant'> extends True ? Prisma__TenantClient<TenantGetPayload<T>> : Prisma__TenantClient<TenantGetPayload<T> | null, null>

    /**
     * Find one Tenant that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TenantFindUniqueOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TenantFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TenantFindUniqueOrThrowArgs>
    ): Prisma__TenantClient<TenantGetPayload<T>>

    /**
     * Find the first Tenant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TenantFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TenantFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tenant'> extends True ? Prisma__TenantClient<TenantGetPayload<T>> : Prisma__TenantClient<TenantGetPayload<T> | null, null>

    /**
     * Find the first Tenant that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TenantFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TenantFindFirstOrThrowArgs>
    ): Prisma__TenantClient<TenantGetPayload<T>>

    /**
     * Find zero or more Tenants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tenants
     * const tenants = await prisma.tenant.findMany()
     * 
     * // Get first 10 Tenants
     * const tenants = await prisma.tenant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tenantWithIdOnly = await prisma.tenant.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TenantFindManyArgs>(
      args?: SelectSubset<T, TenantFindManyArgs>
    ): Prisma.PrismaPromise<Array<TenantGetPayload<T>>>

    /**
     * Create a Tenant.
     * @param {TenantCreateArgs} args - Arguments to create a Tenant.
     * @example
     * // Create one Tenant
     * const Tenant = await prisma.tenant.create({
     *   data: {
     *     // ... data to create a Tenant
     *   }
     * })
     * 
    **/
    create<T extends TenantCreateArgs>(
      args: SelectSubset<T, TenantCreateArgs>
    ): Prisma__TenantClient<TenantGetPayload<T>>

    /**
     * Create many Tenants.
     *     @param {TenantCreateManyArgs} args - Arguments to create many Tenants.
     *     @example
     *     // Create many Tenants
     *     const tenant = await prisma.tenant.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TenantCreateManyArgs>(
      args?: SelectSubset<T, TenantCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tenant.
     * @param {TenantDeleteArgs} args - Arguments to delete one Tenant.
     * @example
     * // Delete one Tenant
     * const Tenant = await prisma.tenant.delete({
     *   where: {
     *     // ... filter to delete one Tenant
     *   }
     * })
     * 
    **/
    delete<T extends TenantDeleteArgs>(
      args: SelectSubset<T, TenantDeleteArgs>
    ): Prisma__TenantClient<TenantGetPayload<T>>

    /**
     * Update one Tenant.
     * @param {TenantUpdateArgs} args - Arguments to update one Tenant.
     * @example
     * // Update one Tenant
     * const tenant = await prisma.tenant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TenantUpdateArgs>(
      args: SelectSubset<T, TenantUpdateArgs>
    ): Prisma__TenantClient<TenantGetPayload<T>>

    /**
     * Delete zero or more Tenants.
     * @param {TenantDeleteManyArgs} args - Arguments to filter Tenants to delete.
     * @example
     * // Delete a few Tenants
     * const { count } = await prisma.tenant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TenantDeleteManyArgs>(
      args?: SelectSubset<T, TenantDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tenants
     * const tenant = await prisma.tenant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TenantUpdateManyArgs>(
      args: SelectSubset<T, TenantUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tenant.
     * @param {TenantUpsertArgs} args - Arguments to update or create a Tenant.
     * @example
     * // Update or create a Tenant
     * const tenant = await prisma.tenant.upsert({
     *   create: {
     *     // ... data to create a Tenant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tenant we want to update
     *   }
     * })
    **/
    upsert<T extends TenantUpsertArgs>(
      args: SelectSubset<T, TenantUpsertArgs>
    ): Prisma__TenantClient<TenantGetPayload<T>>

    /**
     * Count the number of Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantCountArgs} args - Arguments to filter Tenants to count.
     * @example
     * // Count the number of Tenants
     * const count = await prisma.tenant.count({
     *   where: {
     *     // ... the filter for the Tenants we want to count
     *   }
     * })
    **/
    count<T extends TenantCountArgs>(
      args?: Subset<T, TenantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TenantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TenantAggregateArgs>(args: Subset<T, TenantAggregateArgs>): Prisma.PrismaPromise<GetTenantAggregateType<T>>

    /**
     * Group by Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TenantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TenantGroupByArgs['orderBy'] }
        : { orderBy?: TenantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TenantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTenantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Tenant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TenantClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    App<T extends Tenant$AppArgs= {}>(args?: Subset<T, Tenant$AppArgs>): Prisma.PrismaPromise<Array<AppGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Tenant base type for findUnique actions
   */
  export type TenantFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TenantInclude | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findUnique
   */
  export interface TenantFindUniqueArgs extends TenantFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tenant findUniqueOrThrow
   */
  export type TenantFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TenantInclude | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }


  /**
   * Tenant base type for findFirst actions
   */
  export type TenantFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TenantInclude | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: Enumerable<TenantOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: Enumerable<TenantScalarFieldEnum>
  }

  /**
   * Tenant findFirst
   */
  export interface TenantFindFirstArgs extends TenantFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tenant findFirstOrThrow
   */
  export type TenantFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TenantInclude | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: Enumerable<TenantOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: Enumerable<TenantScalarFieldEnum>
  }


  /**
   * Tenant findMany
   */
  export type TenantFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TenantInclude | null
    /**
     * Filter, which Tenants to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: Enumerable<TenantOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    distinct?: Enumerable<TenantScalarFieldEnum>
  }


  /**
   * Tenant create
   */
  export type TenantCreateArgs = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TenantInclude | null
    /**
     * The data needed to create a Tenant.
     */
    data: XOR<TenantCreateInput, TenantUncheckedCreateInput>
  }


  /**
   * Tenant createMany
   */
  export type TenantCreateManyArgs = {
    /**
     * The data used to create many Tenants.
     */
    data: Enumerable<TenantCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Tenant update
   */
  export type TenantUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TenantInclude | null
    /**
     * The data needed to update a Tenant.
     */
    data: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
    /**
     * Choose, which Tenant to update.
     */
    where: TenantWhereUniqueInput
  }


  /**
   * Tenant updateMany
   */
  export type TenantUpdateManyArgs = {
    /**
     * The data used to update Tenants.
     */
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyInput>
    /**
     * Filter which Tenants to update
     */
    where?: TenantWhereInput
  }


  /**
   * Tenant upsert
   */
  export type TenantUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TenantInclude | null
    /**
     * The filter to search for the Tenant to update in case it exists.
     */
    where: TenantWhereUniqueInput
    /**
     * In case the Tenant found by the `where` argument doesn't exist, create a new Tenant with this data.
     */
    create: XOR<TenantCreateInput, TenantUncheckedCreateInput>
    /**
     * In case the Tenant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
  }


  /**
   * Tenant delete
   */
  export type TenantDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TenantInclude | null
    /**
     * Filter which Tenant to delete.
     */
    where: TenantWhereUniqueInput
  }


  /**
   * Tenant deleteMany
   */
  export type TenantDeleteManyArgs = {
    /**
     * Filter which Tenants to delete
     */
    where?: TenantWhereInput
  }


  /**
   * Tenant.App
   */
  export type Tenant$AppArgs = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude | null
    where?: AppWhereInput
    orderBy?: Enumerable<AppOrderByWithRelationInput>
    cursor?: AppWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AppScalarFieldEnum>
  }


  /**
   * Tenant without action
   */
  export type TenantArgs = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TenantInclude | null
  }



  /**
   * Model TenantPreSignup
   */


  export type AggregateTenantPreSignup = {
    _count: TenantPreSignupCountAggregateOutputType | null
    _min: TenantPreSignupMinAggregateOutputType | null
    _max: TenantPreSignupMaxAggregateOutputType | null
  }

  export type TenantPreSignupMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    verifyCode: string | null
  }

  export type TenantPreSignupMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    verifyCode: string | null
  }

  export type TenantPreSignupCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    email: number
    verifyCode: number
    _all: number
  }


  export type TenantPreSignupMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    verifyCode?: true
  }

  export type TenantPreSignupMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    verifyCode?: true
  }

  export type TenantPreSignupCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    verifyCode?: true
    _all?: true
  }

  export type TenantPreSignupAggregateArgs = {
    /**
     * Filter which TenantPreSignup to aggregate.
     */
    where?: TenantPreSignupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantPreSignups to fetch.
     */
    orderBy?: Enumerable<TenantPreSignupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TenantPreSignupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantPreSignups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantPreSignups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TenantPreSignups
    **/
    _count?: true | TenantPreSignupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TenantPreSignupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TenantPreSignupMaxAggregateInputType
  }

  export type GetTenantPreSignupAggregateType<T extends TenantPreSignupAggregateArgs> = {
        [P in keyof T & keyof AggregateTenantPreSignup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTenantPreSignup[P]>
      : GetScalarType<T[P], AggregateTenantPreSignup[P]>
  }




  export type TenantPreSignupGroupByArgs = {
    where?: TenantPreSignupWhereInput
    orderBy?: Enumerable<TenantPreSignupOrderByWithAggregationInput>
    by: TenantPreSignupScalarFieldEnum[]
    having?: TenantPreSignupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TenantPreSignupCountAggregateInputType | true
    _min?: TenantPreSignupMinAggregateInputType
    _max?: TenantPreSignupMaxAggregateInputType
  }


  export type TenantPreSignupGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    email: string
    verifyCode: string
    _count: TenantPreSignupCountAggregateOutputType | null
    _min: TenantPreSignupMinAggregateOutputType | null
    _max: TenantPreSignupMaxAggregateOutputType | null
  }

  type GetTenantPreSignupGroupByPayload<T extends TenantPreSignupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TenantPreSignupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TenantPreSignupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TenantPreSignupGroupByOutputType[P]>
            : GetScalarType<T[P], TenantPreSignupGroupByOutputType[P]>
        }
      >
    >


  export type TenantPreSignupSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    verifyCode?: boolean
  }


  export type TenantPreSignupGetPayload<S extends boolean | null | undefined | TenantPreSignupArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TenantPreSignup :
    S extends undefined ? never :
    S extends { include: any } & (TenantPreSignupArgs | TenantPreSignupFindManyArgs)
    ? TenantPreSignup 
    : S extends { select: any } & (TenantPreSignupArgs | TenantPreSignupFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TenantPreSignup ? TenantPreSignup[P] : never
  } 
      : TenantPreSignup


  type TenantPreSignupCountArgs = 
    Omit<TenantPreSignupFindManyArgs, 'select' | 'include'> & {
      select?: TenantPreSignupCountAggregateInputType | true
    }

  export interface TenantPreSignupDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TenantPreSignup that matches the filter.
     * @param {TenantPreSignupFindUniqueArgs} args - Arguments to find a TenantPreSignup
     * @example
     * // Get one TenantPreSignup
     * const tenantPreSignup = await prisma.tenantPreSignup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TenantPreSignupFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TenantPreSignupFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TenantPreSignup'> extends True ? Prisma__TenantPreSignupClient<TenantPreSignupGetPayload<T>> : Prisma__TenantPreSignupClient<TenantPreSignupGetPayload<T> | null, null>

    /**
     * Find one TenantPreSignup that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TenantPreSignupFindUniqueOrThrowArgs} args - Arguments to find a TenantPreSignup
     * @example
     * // Get one TenantPreSignup
     * const tenantPreSignup = await prisma.tenantPreSignup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TenantPreSignupFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TenantPreSignupFindUniqueOrThrowArgs>
    ): Prisma__TenantPreSignupClient<TenantPreSignupGetPayload<T>>

    /**
     * Find the first TenantPreSignup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantPreSignupFindFirstArgs} args - Arguments to find a TenantPreSignup
     * @example
     * // Get one TenantPreSignup
     * const tenantPreSignup = await prisma.tenantPreSignup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TenantPreSignupFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TenantPreSignupFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TenantPreSignup'> extends True ? Prisma__TenantPreSignupClient<TenantPreSignupGetPayload<T>> : Prisma__TenantPreSignupClient<TenantPreSignupGetPayload<T> | null, null>

    /**
     * Find the first TenantPreSignup that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantPreSignupFindFirstOrThrowArgs} args - Arguments to find a TenantPreSignup
     * @example
     * // Get one TenantPreSignup
     * const tenantPreSignup = await prisma.tenantPreSignup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TenantPreSignupFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TenantPreSignupFindFirstOrThrowArgs>
    ): Prisma__TenantPreSignupClient<TenantPreSignupGetPayload<T>>

    /**
     * Find zero or more TenantPreSignups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantPreSignupFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TenantPreSignups
     * const tenantPreSignups = await prisma.tenantPreSignup.findMany()
     * 
     * // Get first 10 TenantPreSignups
     * const tenantPreSignups = await prisma.tenantPreSignup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tenantPreSignupWithIdOnly = await prisma.tenantPreSignup.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TenantPreSignupFindManyArgs>(
      args?: SelectSubset<T, TenantPreSignupFindManyArgs>
    ): Prisma.PrismaPromise<Array<TenantPreSignupGetPayload<T>>>

    /**
     * Create a TenantPreSignup.
     * @param {TenantPreSignupCreateArgs} args - Arguments to create a TenantPreSignup.
     * @example
     * // Create one TenantPreSignup
     * const TenantPreSignup = await prisma.tenantPreSignup.create({
     *   data: {
     *     // ... data to create a TenantPreSignup
     *   }
     * })
     * 
    **/
    create<T extends TenantPreSignupCreateArgs>(
      args: SelectSubset<T, TenantPreSignupCreateArgs>
    ): Prisma__TenantPreSignupClient<TenantPreSignupGetPayload<T>>

    /**
     * Create many TenantPreSignups.
     *     @param {TenantPreSignupCreateManyArgs} args - Arguments to create many TenantPreSignups.
     *     @example
     *     // Create many TenantPreSignups
     *     const tenantPreSignup = await prisma.tenantPreSignup.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TenantPreSignupCreateManyArgs>(
      args?: SelectSubset<T, TenantPreSignupCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TenantPreSignup.
     * @param {TenantPreSignupDeleteArgs} args - Arguments to delete one TenantPreSignup.
     * @example
     * // Delete one TenantPreSignup
     * const TenantPreSignup = await prisma.tenantPreSignup.delete({
     *   where: {
     *     // ... filter to delete one TenantPreSignup
     *   }
     * })
     * 
    **/
    delete<T extends TenantPreSignupDeleteArgs>(
      args: SelectSubset<T, TenantPreSignupDeleteArgs>
    ): Prisma__TenantPreSignupClient<TenantPreSignupGetPayload<T>>

    /**
     * Update one TenantPreSignup.
     * @param {TenantPreSignupUpdateArgs} args - Arguments to update one TenantPreSignup.
     * @example
     * // Update one TenantPreSignup
     * const tenantPreSignup = await prisma.tenantPreSignup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TenantPreSignupUpdateArgs>(
      args: SelectSubset<T, TenantPreSignupUpdateArgs>
    ): Prisma__TenantPreSignupClient<TenantPreSignupGetPayload<T>>

    /**
     * Delete zero or more TenantPreSignups.
     * @param {TenantPreSignupDeleteManyArgs} args - Arguments to filter TenantPreSignups to delete.
     * @example
     * // Delete a few TenantPreSignups
     * const { count } = await prisma.tenantPreSignup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TenantPreSignupDeleteManyArgs>(
      args?: SelectSubset<T, TenantPreSignupDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TenantPreSignups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantPreSignupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TenantPreSignups
     * const tenantPreSignup = await prisma.tenantPreSignup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TenantPreSignupUpdateManyArgs>(
      args: SelectSubset<T, TenantPreSignupUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TenantPreSignup.
     * @param {TenantPreSignupUpsertArgs} args - Arguments to update or create a TenantPreSignup.
     * @example
     * // Update or create a TenantPreSignup
     * const tenantPreSignup = await prisma.tenantPreSignup.upsert({
     *   create: {
     *     // ... data to create a TenantPreSignup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TenantPreSignup we want to update
     *   }
     * })
    **/
    upsert<T extends TenantPreSignupUpsertArgs>(
      args: SelectSubset<T, TenantPreSignupUpsertArgs>
    ): Prisma__TenantPreSignupClient<TenantPreSignupGetPayload<T>>

    /**
     * Count the number of TenantPreSignups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantPreSignupCountArgs} args - Arguments to filter TenantPreSignups to count.
     * @example
     * // Count the number of TenantPreSignups
     * const count = await prisma.tenantPreSignup.count({
     *   where: {
     *     // ... the filter for the TenantPreSignups we want to count
     *   }
     * })
    **/
    count<T extends TenantPreSignupCountArgs>(
      args?: Subset<T, TenantPreSignupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TenantPreSignupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TenantPreSignup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantPreSignupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TenantPreSignupAggregateArgs>(args: Subset<T, TenantPreSignupAggregateArgs>): Prisma.PrismaPromise<GetTenantPreSignupAggregateType<T>>

    /**
     * Group by TenantPreSignup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantPreSignupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TenantPreSignupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TenantPreSignupGroupByArgs['orderBy'] }
        : { orderBy?: TenantPreSignupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TenantPreSignupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTenantPreSignupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TenantPreSignup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TenantPreSignupClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TenantPreSignup base type for findUnique actions
   */
  export type TenantPreSignupFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TenantPreSignup
     */
    select?: TenantPreSignupSelect | null
    /**
     * Filter, which TenantPreSignup to fetch.
     */
    where: TenantPreSignupWhereUniqueInput
  }

  /**
   * TenantPreSignup findUnique
   */
  export interface TenantPreSignupFindUniqueArgs extends TenantPreSignupFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TenantPreSignup findUniqueOrThrow
   */
  export type TenantPreSignupFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TenantPreSignup
     */
    select?: TenantPreSignupSelect | null
    /**
     * Filter, which TenantPreSignup to fetch.
     */
    where: TenantPreSignupWhereUniqueInput
  }


  /**
   * TenantPreSignup base type for findFirst actions
   */
  export type TenantPreSignupFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TenantPreSignup
     */
    select?: TenantPreSignupSelect | null
    /**
     * Filter, which TenantPreSignup to fetch.
     */
    where?: TenantPreSignupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantPreSignups to fetch.
     */
    orderBy?: Enumerable<TenantPreSignupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TenantPreSignups.
     */
    cursor?: TenantPreSignupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantPreSignups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantPreSignups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TenantPreSignups.
     */
    distinct?: Enumerable<TenantPreSignupScalarFieldEnum>
  }

  /**
   * TenantPreSignup findFirst
   */
  export interface TenantPreSignupFindFirstArgs extends TenantPreSignupFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TenantPreSignup findFirstOrThrow
   */
  export type TenantPreSignupFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TenantPreSignup
     */
    select?: TenantPreSignupSelect | null
    /**
     * Filter, which TenantPreSignup to fetch.
     */
    where?: TenantPreSignupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantPreSignups to fetch.
     */
    orderBy?: Enumerable<TenantPreSignupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TenantPreSignups.
     */
    cursor?: TenantPreSignupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantPreSignups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantPreSignups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TenantPreSignups.
     */
    distinct?: Enumerable<TenantPreSignupScalarFieldEnum>
  }


  /**
   * TenantPreSignup findMany
   */
  export type TenantPreSignupFindManyArgs = {
    /**
     * Select specific fields to fetch from the TenantPreSignup
     */
    select?: TenantPreSignupSelect | null
    /**
     * Filter, which TenantPreSignups to fetch.
     */
    where?: TenantPreSignupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantPreSignups to fetch.
     */
    orderBy?: Enumerable<TenantPreSignupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TenantPreSignups.
     */
    cursor?: TenantPreSignupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantPreSignups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantPreSignups.
     */
    skip?: number
    distinct?: Enumerable<TenantPreSignupScalarFieldEnum>
  }


  /**
   * TenantPreSignup create
   */
  export type TenantPreSignupCreateArgs = {
    /**
     * Select specific fields to fetch from the TenantPreSignup
     */
    select?: TenantPreSignupSelect | null
    /**
     * The data needed to create a TenantPreSignup.
     */
    data: XOR<TenantPreSignupCreateInput, TenantPreSignupUncheckedCreateInput>
  }


  /**
   * TenantPreSignup createMany
   */
  export type TenantPreSignupCreateManyArgs = {
    /**
     * The data used to create many TenantPreSignups.
     */
    data: Enumerable<TenantPreSignupCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TenantPreSignup update
   */
  export type TenantPreSignupUpdateArgs = {
    /**
     * Select specific fields to fetch from the TenantPreSignup
     */
    select?: TenantPreSignupSelect | null
    /**
     * The data needed to update a TenantPreSignup.
     */
    data: XOR<TenantPreSignupUpdateInput, TenantPreSignupUncheckedUpdateInput>
    /**
     * Choose, which TenantPreSignup to update.
     */
    where: TenantPreSignupWhereUniqueInput
  }


  /**
   * TenantPreSignup updateMany
   */
  export type TenantPreSignupUpdateManyArgs = {
    /**
     * The data used to update TenantPreSignups.
     */
    data: XOR<TenantPreSignupUpdateManyMutationInput, TenantPreSignupUncheckedUpdateManyInput>
    /**
     * Filter which TenantPreSignups to update
     */
    where?: TenantPreSignupWhereInput
  }


  /**
   * TenantPreSignup upsert
   */
  export type TenantPreSignupUpsertArgs = {
    /**
     * Select specific fields to fetch from the TenantPreSignup
     */
    select?: TenantPreSignupSelect | null
    /**
     * The filter to search for the TenantPreSignup to update in case it exists.
     */
    where: TenantPreSignupWhereUniqueInput
    /**
     * In case the TenantPreSignup found by the `where` argument doesn't exist, create a new TenantPreSignup with this data.
     */
    create: XOR<TenantPreSignupCreateInput, TenantPreSignupUncheckedCreateInput>
    /**
     * In case the TenantPreSignup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TenantPreSignupUpdateInput, TenantPreSignupUncheckedUpdateInput>
  }


  /**
   * TenantPreSignup delete
   */
  export type TenantPreSignupDeleteArgs = {
    /**
     * Select specific fields to fetch from the TenantPreSignup
     */
    select?: TenantPreSignupSelect | null
    /**
     * Filter which TenantPreSignup to delete.
     */
    where: TenantPreSignupWhereUniqueInput
  }


  /**
   * TenantPreSignup deleteMany
   */
  export type TenantPreSignupDeleteManyArgs = {
    /**
     * Filter which TenantPreSignups to delete
     */
    where?: TenantPreSignupWhereInput
  }


  /**
   * TenantPreSignup without action
   */
  export type TenantPreSignupArgs = {
    /**
     * Select specific fields to fetch from the TenantPreSignup
     */
    select?: TenantPreSignupSelect | null
  }



  /**
   * Model Question
   */


  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    success: number | null
  }

  export type QuestionSumAggregateOutputType = {
    success: number | null
  }

  export type QuestionMinAggregateOutputType = {
    id: string | null
    uid: string | null
    question: string | null
    answer: string | null
    success: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: string | null
    uid: string | null
    question: string | null
    answer: string | null
    success: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    uid: number
    question: number
    answer: number
    success: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    success?: true
  }

  export type QuestionSumAggregateInputType = {
    success?: true
  }

  export type QuestionMinAggregateInputType = {
    id?: true
    uid?: true
    question?: true
    answer?: true
    success?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    uid?: true
    question?: true
    answer?: true
    success?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    uid?: true
    question?: true
    answer?: true
    success?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuestionAggregateArgs = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: Enumerable<QuestionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs = {
    where?: QuestionWhereInput
    orderBy?: Enumerable<QuestionOrderByWithAggregationInput>
    by: QuestionScalarFieldEnum[]
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }


  export type QuestionGroupByOutputType = {
    id: string
    uid: string
    question: string | null
    answer: string | null
    success: number
    createdAt: Date
    updatedAt: Date
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect = {
    id?: boolean
    uid?: boolean
    question?: boolean
    answer?: boolean
    success?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type QuestionGetPayload<S extends boolean | null | undefined | QuestionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Question :
    S extends undefined ? never :
    S extends { include: any } & (QuestionArgs | QuestionFindManyArgs)
    ? Question 
    : S extends { select: any } & (QuestionArgs | QuestionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Question ? Question[P] : never
  } 
      : Question


  type QuestionCountArgs = 
    Omit<QuestionFindManyArgs, 'select' | 'include'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends QuestionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, QuestionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Question'> extends True ? Prisma__QuestionClient<QuestionGetPayload<T>> : Prisma__QuestionClient<QuestionGetPayload<T> | null, null>

    /**
     * Find one Question that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, QuestionFindUniqueOrThrowArgs>
    ): Prisma__QuestionClient<QuestionGetPayload<T>>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends QuestionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, QuestionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Question'> extends True ? Prisma__QuestionClient<QuestionGetPayload<T>> : Prisma__QuestionClient<QuestionGetPayload<T> | null, null>

    /**
     * Find the first Question that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, QuestionFindFirstOrThrowArgs>
    ): Prisma__QuestionClient<QuestionGetPayload<T>>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends QuestionFindManyArgs>(
      args?: SelectSubset<T, QuestionFindManyArgs>
    ): Prisma.PrismaPromise<Array<QuestionGetPayload<T>>>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
    **/
    create<T extends QuestionCreateArgs>(
      args: SelectSubset<T, QuestionCreateArgs>
    ): Prisma__QuestionClient<QuestionGetPayload<T>>

    /**
     * Create many Questions.
     *     @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     *     @example
     *     // Create many Questions
     *     const question = await prisma.question.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends QuestionCreateManyArgs>(
      args?: SelectSubset<T, QuestionCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
    **/
    delete<T extends QuestionDeleteArgs>(
      args: SelectSubset<T, QuestionDeleteArgs>
    ): Prisma__QuestionClient<QuestionGetPayload<T>>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends QuestionUpdateArgs>(
      args: SelectSubset<T, QuestionUpdateArgs>
    ): Prisma__QuestionClient<QuestionGetPayload<T>>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends QuestionDeleteManyArgs>(
      args?: SelectSubset<T, QuestionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends QuestionUpdateManyArgs>(
      args: SelectSubset<T, QuestionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
    **/
    upsert<T extends QuestionUpsertArgs>(
      args: SelectSubset<T, QuestionUpsertArgs>
    ): Prisma__QuestionClient<QuestionGetPayload<T>>

    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__QuestionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Question base type for findUnique actions
   */
  export type QuestionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUnique
   */
  export interface QuestionFindUniqueArgs extends QuestionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }


  /**
   * Question base type for findFirst actions
   */
  export type QuestionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: Enumerable<QuestionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: Enumerable<QuestionScalarFieldEnum>
  }

  /**
   * Question findFirst
   */
  export interface QuestionFindFirstArgs extends QuestionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: Enumerable<QuestionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: Enumerable<QuestionScalarFieldEnum>
  }


  /**
   * Question findMany
   */
  export type QuestionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: Enumerable<QuestionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: Enumerable<QuestionScalarFieldEnum>
  }


  /**
   * Question create
   */
  export type QuestionCreateArgs = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }


  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs = {
    /**
     * The data used to create many Questions.
     */
    data: Enumerable<QuestionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Question update
   */
  export type QuestionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }


  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
  }


  /**
   * Question upsert
   */
  export type QuestionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }


  /**
   * Question delete
   */
  export type QuestionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }


  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
  }


  /**
   * Question without action
   */
  export type QuestionArgs = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
  }



  /**
   * Model JYProfile
   */


  export type AggregateJYProfile = {
    _count: JYProfileCountAggregateOutputType | null
    _min: JYProfileMinAggregateOutputType | null
    _max: JYProfileMaxAggregateOutputType | null
  }

  export type JYProfileMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type JYProfileMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type JYProfileCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type JYProfileMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type JYProfileMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type JYProfileCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type JYProfileAggregateArgs = {
    /**
     * Filter which JYProfile to aggregate.
     */
    where?: JYProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JYProfiles to fetch.
     */
    orderBy?: Enumerable<JYProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JYProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JYProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JYProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JYProfiles
    **/
    _count?: true | JYProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JYProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JYProfileMaxAggregateInputType
  }

  export type GetJYProfileAggregateType<T extends JYProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateJYProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJYProfile[P]>
      : GetScalarType<T[P], AggregateJYProfile[P]>
  }




  export type JYProfileGroupByArgs = {
    where?: JYProfileWhereInput
    orderBy?: Enumerable<JYProfileOrderByWithAggregationInput>
    by: JYProfileScalarFieldEnum[]
    having?: JYProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JYProfileCountAggregateInputType | true
    _min?: JYProfileMinAggregateInputType
    _max?: JYProfileMaxAggregateInputType
  }


  export type JYProfileGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: JYProfileCountAggregateOutputType | null
    _min: JYProfileMinAggregateOutputType | null
    _max: JYProfileMaxAggregateOutputType | null
  }

  type GetJYProfileGroupByPayload<T extends JYProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<JYProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JYProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JYProfileGroupByOutputType[P]>
            : GetScalarType<T[P], JYProfileGroupByOutputType[P]>
        }
      >
    >


  export type JYProfileSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    articles?: boolean | JYProfile$articlesArgs
    freeCounts?: boolean | JYProfile$freeCountsArgs
    _count?: boolean | JYProfileCountOutputTypeArgs
  }


  export type JYProfileInclude = {
    articles?: boolean | JYProfile$articlesArgs
    freeCounts?: boolean | JYProfile$freeCountsArgs
    _count?: boolean | JYProfileCountOutputTypeArgs
  }

  export type JYProfileGetPayload<S extends boolean | null | undefined | JYProfileArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? JYProfile :
    S extends undefined ? never :
    S extends { include: any } & (JYProfileArgs | JYProfileFindManyArgs)
    ? JYProfile  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'articles' ? Array < ArticleGetPayload<S['include'][P]>>  :
        P extends 'freeCounts' ? Array < JYFreeCountGetPayload<S['include'][P]>>  :
        P extends '_count' ? JYProfileCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (JYProfileArgs | JYProfileFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'articles' ? Array < ArticleGetPayload<S['select'][P]>>  :
        P extends 'freeCounts' ? Array < JYFreeCountGetPayload<S['select'][P]>>  :
        P extends '_count' ? JYProfileCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof JYProfile ? JYProfile[P] : never
  } 
      : JYProfile


  type JYProfileCountArgs = 
    Omit<JYProfileFindManyArgs, 'select' | 'include'> & {
      select?: JYProfileCountAggregateInputType | true
    }

  export interface JYProfileDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one JYProfile that matches the filter.
     * @param {JYProfileFindUniqueArgs} args - Arguments to find a JYProfile
     * @example
     * // Get one JYProfile
     * const jYProfile = await prisma.jYProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends JYProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, JYProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'JYProfile'> extends True ? Prisma__JYProfileClient<JYProfileGetPayload<T>> : Prisma__JYProfileClient<JYProfileGetPayload<T> | null, null>

    /**
     * Find one JYProfile that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {JYProfileFindUniqueOrThrowArgs} args - Arguments to find a JYProfile
     * @example
     * // Get one JYProfile
     * const jYProfile = await prisma.jYProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends JYProfileFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, JYProfileFindUniqueOrThrowArgs>
    ): Prisma__JYProfileClient<JYProfileGetPayload<T>>

    /**
     * Find the first JYProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JYProfileFindFirstArgs} args - Arguments to find a JYProfile
     * @example
     * // Get one JYProfile
     * const jYProfile = await prisma.jYProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends JYProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, JYProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'JYProfile'> extends True ? Prisma__JYProfileClient<JYProfileGetPayload<T>> : Prisma__JYProfileClient<JYProfileGetPayload<T> | null, null>

    /**
     * Find the first JYProfile that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JYProfileFindFirstOrThrowArgs} args - Arguments to find a JYProfile
     * @example
     * // Get one JYProfile
     * const jYProfile = await prisma.jYProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends JYProfileFindFirstOrThrowArgs>(
      args?: SelectSubset<T, JYProfileFindFirstOrThrowArgs>
    ): Prisma__JYProfileClient<JYProfileGetPayload<T>>

    /**
     * Find zero or more JYProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JYProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JYProfiles
     * const jYProfiles = await prisma.jYProfile.findMany()
     * 
     * // Get first 10 JYProfiles
     * const jYProfiles = await prisma.jYProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jYProfileWithIdOnly = await prisma.jYProfile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends JYProfileFindManyArgs>(
      args?: SelectSubset<T, JYProfileFindManyArgs>
    ): Prisma.PrismaPromise<Array<JYProfileGetPayload<T>>>

    /**
     * Create a JYProfile.
     * @param {JYProfileCreateArgs} args - Arguments to create a JYProfile.
     * @example
     * // Create one JYProfile
     * const JYProfile = await prisma.jYProfile.create({
     *   data: {
     *     // ... data to create a JYProfile
     *   }
     * })
     * 
    **/
    create<T extends JYProfileCreateArgs>(
      args: SelectSubset<T, JYProfileCreateArgs>
    ): Prisma__JYProfileClient<JYProfileGetPayload<T>>

    /**
     * Create many JYProfiles.
     *     @param {JYProfileCreateManyArgs} args - Arguments to create many JYProfiles.
     *     @example
     *     // Create many JYProfiles
     *     const jYProfile = await prisma.jYProfile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends JYProfileCreateManyArgs>(
      args?: SelectSubset<T, JYProfileCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a JYProfile.
     * @param {JYProfileDeleteArgs} args - Arguments to delete one JYProfile.
     * @example
     * // Delete one JYProfile
     * const JYProfile = await prisma.jYProfile.delete({
     *   where: {
     *     // ... filter to delete one JYProfile
     *   }
     * })
     * 
    **/
    delete<T extends JYProfileDeleteArgs>(
      args: SelectSubset<T, JYProfileDeleteArgs>
    ): Prisma__JYProfileClient<JYProfileGetPayload<T>>

    /**
     * Update one JYProfile.
     * @param {JYProfileUpdateArgs} args - Arguments to update one JYProfile.
     * @example
     * // Update one JYProfile
     * const jYProfile = await prisma.jYProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends JYProfileUpdateArgs>(
      args: SelectSubset<T, JYProfileUpdateArgs>
    ): Prisma__JYProfileClient<JYProfileGetPayload<T>>

    /**
     * Delete zero or more JYProfiles.
     * @param {JYProfileDeleteManyArgs} args - Arguments to filter JYProfiles to delete.
     * @example
     * // Delete a few JYProfiles
     * const { count } = await prisma.jYProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends JYProfileDeleteManyArgs>(
      args?: SelectSubset<T, JYProfileDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JYProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JYProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JYProfiles
     * const jYProfile = await prisma.jYProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends JYProfileUpdateManyArgs>(
      args: SelectSubset<T, JYProfileUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JYProfile.
     * @param {JYProfileUpsertArgs} args - Arguments to update or create a JYProfile.
     * @example
     * // Update or create a JYProfile
     * const jYProfile = await prisma.jYProfile.upsert({
     *   create: {
     *     // ... data to create a JYProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JYProfile we want to update
     *   }
     * })
    **/
    upsert<T extends JYProfileUpsertArgs>(
      args: SelectSubset<T, JYProfileUpsertArgs>
    ): Prisma__JYProfileClient<JYProfileGetPayload<T>>

    /**
     * Count the number of JYProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JYProfileCountArgs} args - Arguments to filter JYProfiles to count.
     * @example
     * // Count the number of JYProfiles
     * const count = await prisma.jYProfile.count({
     *   where: {
     *     // ... the filter for the JYProfiles we want to count
     *   }
     * })
    **/
    count<T extends JYProfileCountArgs>(
      args?: Subset<T, JYProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JYProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JYProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JYProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JYProfileAggregateArgs>(args: Subset<T, JYProfileAggregateArgs>): Prisma.PrismaPromise<GetJYProfileAggregateType<T>>

    /**
     * Group by JYProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JYProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JYProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JYProfileGroupByArgs['orderBy'] }
        : { orderBy?: JYProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JYProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJYProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for JYProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__JYProfileClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    articles<T extends JYProfile$articlesArgs= {}>(args?: Subset<T, JYProfile$articlesArgs>): Prisma.PrismaPromise<Array<ArticleGetPayload<T>>| Null>;

    freeCounts<T extends JYProfile$freeCountsArgs= {}>(args?: Subset<T, JYProfile$freeCountsArgs>): Prisma.PrismaPromise<Array<JYFreeCountGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * JYProfile base type for findUnique actions
   */
  export type JYProfileFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the JYProfile
     */
    select?: JYProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYProfileInclude | null
    /**
     * Filter, which JYProfile to fetch.
     */
    where: JYProfileWhereUniqueInput
  }

  /**
   * JYProfile findUnique
   */
  export interface JYProfileFindUniqueArgs extends JYProfileFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * JYProfile findUniqueOrThrow
   */
  export type JYProfileFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the JYProfile
     */
    select?: JYProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYProfileInclude | null
    /**
     * Filter, which JYProfile to fetch.
     */
    where: JYProfileWhereUniqueInput
  }


  /**
   * JYProfile base type for findFirst actions
   */
  export type JYProfileFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the JYProfile
     */
    select?: JYProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYProfileInclude | null
    /**
     * Filter, which JYProfile to fetch.
     */
    where?: JYProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JYProfiles to fetch.
     */
    orderBy?: Enumerable<JYProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JYProfiles.
     */
    cursor?: JYProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JYProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JYProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JYProfiles.
     */
    distinct?: Enumerable<JYProfileScalarFieldEnum>
  }

  /**
   * JYProfile findFirst
   */
  export interface JYProfileFindFirstArgs extends JYProfileFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * JYProfile findFirstOrThrow
   */
  export type JYProfileFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the JYProfile
     */
    select?: JYProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYProfileInclude | null
    /**
     * Filter, which JYProfile to fetch.
     */
    where?: JYProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JYProfiles to fetch.
     */
    orderBy?: Enumerable<JYProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JYProfiles.
     */
    cursor?: JYProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JYProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JYProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JYProfiles.
     */
    distinct?: Enumerable<JYProfileScalarFieldEnum>
  }


  /**
   * JYProfile findMany
   */
  export type JYProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the JYProfile
     */
    select?: JYProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYProfileInclude | null
    /**
     * Filter, which JYProfiles to fetch.
     */
    where?: JYProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JYProfiles to fetch.
     */
    orderBy?: Enumerable<JYProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JYProfiles.
     */
    cursor?: JYProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JYProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JYProfiles.
     */
    skip?: number
    distinct?: Enumerable<JYProfileScalarFieldEnum>
  }


  /**
   * JYProfile create
   */
  export type JYProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the JYProfile
     */
    select?: JYProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYProfileInclude | null
    /**
     * The data needed to create a JYProfile.
     */
    data: XOR<JYProfileCreateInput, JYProfileUncheckedCreateInput>
  }


  /**
   * JYProfile createMany
   */
  export type JYProfileCreateManyArgs = {
    /**
     * The data used to create many JYProfiles.
     */
    data: Enumerable<JYProfileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * JYProfile update
   */
  export type JYProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the JYProfile
     */
    select?: JYProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYProfileInclude | null
    /**
     * The data needed to update a JYProfile.
     */
    data: XOR<JYProfileUpdateInput, JYProfileUncheckedUpdateInput>
    /**
     * Choose, which JYProfile to update.
     */
    where: JYProfileWhereUniqueInput
  }


  /**
   * JYProfile updateMany
   */
  export type JYProfileUpdateManyArgs = {
    /**
     * The data used to update JYProfiles.
     */
    data: XOR<JYProfileUpdateManyMutationInput, JYProfileUncheckedUpdateManyInput>
    /**
     * Filter which JYProfiles to update
     */
    where?: JYProfileWhereInput
  }


  /**
   * JYProfile upsert
   */
  export type JYProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the JYProfile
     */
    select?: JYProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYProfileInclude | null
    /**
     * The filter to search for the JYProfile to update in case it exists.
     */
    where: JYProfileWhereUniqueInput
    /**
     * In case the JYProfile found by the `where` argument doesn't exist, create a new JYProfile with this data.
     */
    create: XOR<JYProfileCreateInput, JYProfileUncheckedCreateInput>
    /**
     * In case the JYProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JYProfileUpdateInput, JYProfileUncheckedUpdateInput>
  }


  /**
   * JYProfile delete
   */
  export type JYProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the JYProfile
     */
    select?: JYProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYProfileInclude | null
    /**
     * Filter which JYProfile to delete.
     */
    where: JYProfileWhereUniqueInput
  }


  /**
   * JYProfile deleteMany
   */
  export type JYProfileDeleteManyArgs = {
    /**
     * Filter which JYProfiles to delete
     */
    where?: JYProfileWhereInput
  }


  /**
   * JYProfile.articles
   */
  export type JYProfile$articlesArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    where?: ArticleWhereInput
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    cursor?: ArticleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ArticleScalarFieldEnum>
  }


  /**
   * JYProfile.freeCounts
   */
  export type JYProfile$freeCountsArgs = {
    /**
     * Select specific fields to fetch from the JYFreeCount
     */
    select?: JYFreeCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYFreeCountInclude | null
    where?: JYFreeCountWhereInput
    orderBy?: Enumerable<JYFreeCountOrderByWithRelationInput>
    cursor?: JYFreeCountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<JYFreeCountScalarFieldEnum>
  }


  /**
   * JYProfile without action
   */
  export type JYProfileArgs = {
    /**
     * Select specific fields to fetch from the JYProfile
     */
    select?: JYProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYProfileInclude | null
  }



  /**
   * Model JYFreeCount
   */


  export type AggregateJYFreeCount = {
    _count: JYFreeCountCountAggregateOutputType | null
    _avg: JYFreeCountAvgAggregateOutputType | null
    _sum: JYFreeCountSumAggregateOutputType | null
    _min: JYFreeCountMinAggregateOutputType | null
    _max: JYFreeCountMaxAggregateOutputType | null
  }

  export type JYFreeCountAvgAggregateOutputType = {
    cycle: number | null
    count: number | null
  }

  export type JYFreeCountSumAggregateOutputType = {
    cycle: number | null
    count: number | null
  }

  export type JYFreeCountMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    cycle: number | null
    count: number | null
    profileId: string | null
  }

  export type JYFreeCountMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    cycle: number | null
    count: number | null
    profileId: string | null
  }

  export type JYFreeCountCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    cycle: number
    count: number
    profileId: number
    _all: number
  }


  export type JYFreeCountAvgAggregateInputType = {
    cycle?: true
    count?: true
  }

  export type JYFreeCountSumAggregateInputType = {
    cycle?: true
    count?: true
  }

  export type JYFreeCountMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    cycle?: true
    count?: true
    profileId?: true
  }

  export type JYFreeCountMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    cycle?: true
    count?: true
    profileId?: true
  }

  export type JYFreeCountCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    cycle?: true
    count?: true
    profileId?: true
    _all?: true
  }

  export type JYFreeCountAggregateArgs = {
    /**
     * Filter which JYFreeCount to aggregate.
     */
    where?: JYFreeCountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JYFreeCounts to fetch.
     */
    orderBy?: Enumerable<JYFreeCountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JYFreeCountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JYFreeCounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JYFreeCounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JYFreeCounts
    **/
    _count?: true | JYFreeCountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JYFreeCountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JYFreeCountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JYFreeCountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JYFreeCountMaxAggregateInputType
  }

  export type GetJYFreeCountAggregateType<T extends JYFreeCountAggregateArgs> = {
        [P in keyof T & keyof AggregateJYFreeCount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJYFreeCount[P]>
      : GetScalarType<T[P], AggregateJYFreeCount[P]>
  }




  export type JYFreeCountGroupByArgs = {
    where?: JYFreeCountWhereInput
    orderBy?: Enumerable<JYFreeCountOrderByWithAggregationInput>
    by: JYFreeCountScalarFieldEnum[]
    having?: JYFreeCountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JYFreeCountCountAggregateInputType | true
    _avg?: JYFreeCountAvgAggregateInputType
    _sum?: JYFreeCountSumAggregateInputType
    _min?: JYFreeCountMinAggregateInputType
    _max?: JYFreeCountMaxAggregateInputType
  }


  export type JYFreeCountGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    cycle: number
    count: number
    profileId: string
    _count: JYFreeCountCountAggregateOutputType | null
    _avg: JYFreeCountAvgAggregateOutputType | null
    _sum: JYFreeCountSumAggregateOutputType | null
    _min: JYFreeCountMinAggregateOutputType | null
    _max: JYFreeCountMaxAggregateOutputType | null
  }

  type GetJYFreeCountGroupByPayload<T extends JYFreeCountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<JYFreeCountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JYFreeCountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JYFreeCountGroupByOutputType[P]>
            : GetScalarType<T[P], JYFreeCountGroupByOutputType[P]>
        }
      >
    >


  export type JYFreeCountSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cycle?: boolean
    count?: boolean
    profileId?: boolean
    profile?: boolean | JYProfileArgs
  }


  export type JYFreeCountInclude = {
    profile?: boolean | JYProfileArgs
  }

  export type JYFreeCountGetPayload<S extends boolean | null | undefined | JYFreeCountArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? JYFreeCount :
    S extends undefined ? never :
    S extends { include: any } & (JYFreeCountArgs | JYFreeCountFindManyArgs)
    ? JYFreeCount  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'profile' ? JYProfileGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (JYFreeCountArgs | JYFreeCountFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'profile' ? JYProfileGetPayload<S['select'][P]> :  P extends keyof JYFreeCount ? JYFreeCount[P] : never
  } 
      : JYFreeCount


  type JYFreeCountCountArgs = 
    Omit<JYFreeCountFindManyArgs, 'select' | 'include'> & {
      select?: JYFreeCountCountAggregateInputType | true
    }

  export interface JYFreeCountDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one JYFreeCount that matches the filter.
     * @param {JYFreeCountFindUniqueArgs} args - Arguments to find a JYFreeCount
     * @example
     * // Get one JYFreeCount
     * const jYFreeCount = await prisma.jYFreeCount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends JYFreeCountFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, JYFreeCountFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'JYFreeCount'> extends True ? Prisma__JYFreeCountClient<JYFreeCountGetPayload<T>> : Prisma__JYFreeCountClient<JYFreeCountGetPayload<T> | null, null>

    /**
     * Find one JYFreeCount that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {JYFreeCountFindUniqueOrThrowArgs} args - Arguments to find a JYFreeCount
     * @example
     * // Get one JYFreeCount
     * const jYFreeCount = await prisma.jYFreeCount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends JYFreeCountFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, JYFreeCountFindUniqueOrThrowArgs>
    ): Prisma__JYFreeCountClient<JYFreeCountGetPayload<T>>

    /**
     * Find the first JYFreeCount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JYFreeCountFindFirstArgs} args - Arguments to find a JYFreeCount
     * @example
     * // Get one JYFreeCount
     * const jYFreeCount = await prisma.jYFreeCount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends JYFreeCountFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, JYFreeCountFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'JYFreeCount'> extends True ? Prisma__JYFreeCountClient<JYFreeCountGetPayload<T>> : Prisma__JYFreeCountClient<JYFreeCountGetPayload<T> | null, null>

    /**
     * Find the first JYFreeCount that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JYFreeCountFindFirstOrThrowArgs} args - Arguments to find a JYFreeCount
     * @example
     * // Get one JYFreeCount
     * const jYFreeCount = await prisma.jYFreeCount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends JYFreeCountFindFirstOrThrowArgs>(
      args?: SelectSubset<T, JYFreeCountFindFirstOrThrowArgs>
    ): Prisma__JYFreeCountClient<JYFreeCountGetPayload<T>>

    /**
     * Find zero or more JYFreeCounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JYFreeCountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JYFreeCounts
     * const jYFreeCounts = await prisma.jYFreeCount.findMany()
     * 
     * // Get first 10 JYFreeCounts
     * const jYFreeCounts = await prisma.jYFreeCount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jYFreeCountWithIdOnly = await prisma.jYFreeCount.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends JYFreeCountFindManyArgs>(
      args?: SelectSubset<T, JYFreeCountFindManyArgs>
    ): Prisma.PrismaPromise<Array<JYFreeCountGetPayload<T>>>

    /**
     * Create a JYFreeCount.
     * @param {JYFreeCountCreateArgs} args - Arguments to create a JYFreeCount.
     * @example
     * // Create one JYFreeCount
     * const JYFreeCount = await prisma.jYFreeCount.create({
     *   data: {
     *     // ... data to create a JYFreeCount
     *   }
     * })
     * 
    **/
    create<T extends JYFreeCountCreateArgs>(
      args: SelectSubset<T, JYFreeCountCreateArgs>
    ): Prisma__JYFreeCountClient<JYFreeCountGetPayload<T>>

    /**
     * Create many JYFreeCounts.
     *     @param {JYFreeCountCreateManyArgs} args - Arguments to create many JYFreeCounts.
     *     @example
     *     // Create many JYFreeCounts
     *     const jYFreeCount = await prisma.jYFreeCount.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends JYFreeCountCreateManyArgs>(
      args?: SelectSubset<T, JYFreeCountCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a JYFreeCount.
     * @param {JYFreeCountDeleteArgs} args - Arguments to delete one JYFreeCount.
     * @example
     * // Delete one JYFreeCount
     * const JYFreeCount = await prisma.jYFreeCount.delete({
     *   where: {
     *     // ... filter to delete one JYFreeCount
     *   }
     * })
     * 
    **/
    delete<T extends JYFreeCountDeleteArgs>(
      args: SelectSubset<T, JYFreeCountDeleteArgs>
    ): Prisma__JYFreeCountClient<JYFreeCountGetPayload<T>>

    /**
     * Update one JYFreeCount.
     * @param {JYFreeCountUpdateArgs} args - Arguments to update one JYFreeCount.
     * @example
     * // Update one JYFreeCount
     * const jYFreeCount = await prisma.jYFreeCount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends JYFreeCountUpdateArgs>(
      args: SelectSubset<T, JYFreeCountUpdateArgs>
    ): Prisma__JYFreeCountClient<JYFreeCountGetPayload<T>>

    /**
     * Delete zero or more JYFreeCounts.
     * @param {JYFreeCountDeleteManyArgs} args - Arguments to filter JYFreeCounts to delete.
     * @example
     * // Delete a few JYFreeCounts
     * const { count } = await prisma.jYFreeCount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends JYFreeCountDeleteManyArgs>(
      args?: SelectSubset<T, JYFreeCountDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JYFreeCounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JYFreeCountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JYFreeCounts
     * const jYFreeCount = await prisma.jYFreeCount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends JYFreeCountUpdateManyArgs>(
      args: SelectSubset<T, JYFreeCountUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JYFreeCount.
     * @param {JYFreeCountUpsertArgs} args - Arguments to update or create a JYFreeCount.
     * @example
     * // Update or create a JYFreeCount
     * const jYFreeCount = await prisma.jYFreeCount.upsert({
     *   create: {
     *     // ... data to create a JYFreeCount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JYFreeCount we want to update
     *   }
     * })
    **/
    upsert<T extends JYFreeCountUpsertArgs>(
      args: SelectSubset<T, JYFreeCountUpsertArgs>
    ): Prisma__JYFreeCountClient<JYFreeCountGetPayload<T>>

    /**
     * Count the number of JYFreeCounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JYFreeCountCountArgs} args - Arguments to filter JYFreeCounts to count.
     * @example
     * // Count the number of JYFreeCounts
     * const count = await prisma.jYFreeCount.count({
     *   where: {
     *     // ... the filter for the JYFreeCounts we want to count
     *   }
     * })
    **/
    count<T extends JYFreeCountCountArgs>(
      args?: Subset<T, JYFreeCountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JYFreeCountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JYFreeCount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JYFreeCountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JYFreeCountAggregateArgs>(args: Subset<T, JYFreeCountAggregateArgs>): Prisma.PrismaPromise<GetJYFreeCountAggregateType<T>>

    /**
     * Group by JYFreeCount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JYFreeCountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JYFreeCountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JYFreeCountGroupByArgs['orderBy'] }
        : { orderBy?: JYFreeCountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JYFreeCountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJYFreeCountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for JYFreeCount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__JYFreeCountClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    profile<T extends JYProfileArgs= {}>(args?: Subset<T, JYProfileArgs>): Prisma__JYProfileClient<JYProfileGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * JYFreeCount base type for findUnique actions
   */
  export type JYFreeCountFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the JYFreeCount
     */
    select?: JYFreeCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYFreeCountInclude | null
    /**
     * Filter, which JYFreeCount to fetch.
     */
    where: JYFreeCountWhereUniqueInput
  }

  /**
   * JYFreeCount findUnique
   */
  export interface JYFreeCountFindUniqueArgs extends JYFreeCountFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * JYFreeCount findUniqueOrThrow
   */
  export type JYFreeCountFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the JYFreeCount
     */
    select?: JYFreeCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYFreeCountInclude | null
    /**
     * Filter, which JYFreeCount to fetch.
     */
    where: JYFreeCountWhereUniqueInput
  }


  /**
   * JYFreeCount base type for findFirst actions
   */
  export type JYFreeCountFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the JYFreeCount
     */
    select?: JYFreeCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYFreeCountInclude | null
    /**
     * Filter, which JYFreeCount to fetch.
     */
    where?: JYFreeCountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JYFreeCounts to fetch.
     */
    orderBy?: Enumerable<JYFreeCountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JYFreeCounts.
     */
    cursor?: JYFreeCountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JYFreeCounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JYFreeCounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JYFreeCounts.
     */
    distinct?: Enumerable<JYFreeCountScalarFieldEnum>
  }

  /**
   * JYFreeCount findFirst
   */
  export interface JYFreeCountFindFirstArgs extends JYFreeCountFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * JYFreeCount findFirstOrThrow
   */
  export type JYFreeCountFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the JYFreeCount
     */
    select?: JYFreeCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYFreeCountInclude | null
    /**
     * Filter, which JYFreeCount to fetch.
     */
    where?: JYFreeCountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JYFreeCounts to fetch.
     */
    orderBy?: Enumerable<JYFreeCountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JYFreeCounts.
     */
    cursor?: JYFreeCountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JYFreeCounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JYFreeCounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JYFreeCounts.
     */
    distinct?: Enumerable<JYFreeCountScalarFieldEnum>
  }


  /**
   * JYFreeCount findMany
   */
  export type JYFreeCountFindManyArgs = {
    /**
     * Select specific fields to fetch from the JYFreeCount
     */
    select?: JYFreeCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYFreeCountInclude | null
    /**
     * Filter, which JYFreeCounts to fetch.
     */
    where?: JYFreeCountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JYFreeCounts to fetch.
     */
    orderBy?: Enumerable<JYFreeCountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JYFreeCounts.
     */
    cursor?: JYFreeCountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JYFreeCounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JYFreeCounts.
     */
    skip?: number
    distinct?: Enumerable<JYFreeCountScalarFieldEnum>
  }


  /**
   * JYFreeCount create
   */
  export type JYFreeCountCreateArgs = {
    /**
     * Select specific fields to fetch from the JYFreeCount
     */
    select?: JYFreeCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYFreeCountInclude | null
    /**
     * The data needed to create a JYFreeCount.
     */
    data: XOR<JYFreeCountCreateInput, JYFreeCountUncheckedCreateInput>
  }


  /**
   * JYFreeCount createMany
   */
  export type JYFreeCountCreateManyArgs = {
    /**
     * The data used to create many JYFreeCounts.
     */
    data: Enumerable<JYFreeCountCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * JYFreeCount update
   */
  export type JYFreeCountUpdateArgs = {
    /**
     * Select specific fields to fetch from the JYFreeCount
     */
    select?: JYFreeCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYFreeCountInclude | null
    /**
     * The data needed to update a JYFreeCount.
     */
    data: XOR<JYFreeCountUpdateInput, JYFreeCountUncheckedUpdateInput>
    /**
     * Choose, which JYFreeCount to update.
     */
    where: JYFreeCountWhereUniqueInput
  }


  /**
   * JYFreeCount updateMany
   */
  export type JYFreeCountUpdateManyArgs = {
    /**
     * The data used to update JYFreeCounts.
     */
    data: XOR<JYFreeCountUpdateManyMutationInput, JYFreeCountUncheckedUpdateManyInput>
    /**
     * Filter which JYFreeCounts to update
     */
    where?: JYFreeCountWhereInput
  }


  /**
   * JYFreeCount upsert
   */
  export type JYFreeCountUpsertArgs = {
    /**
     * Select specific fields to fetch from the JYFreeCount
     */
    select?: JYFreeCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYFreeCountInclude | null
    /**
     * The filter to search for the JYFreeCount to update in case it exists.
     */
    where: JYFreeCountWhereUniqueInput
    /**
     * In case the JYFreeCount found by the `where` argument doesn't exist, create a new JYFreeCount with this data.
     */
    create: XOR<JYFreeCountCreateInput, JYFreeCountUncheckedCreateInput>
    /**
     * In case the JYFreeCount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JYFreeCountUpdateInput, JYFreeCountUncheckedUpdateInput>
  }


  /**
   * JYFreeCount delete
   */
  export type JYFreeCountDeleteArgs = {
    /**
     * Select specific fields to fetch from the JYFreeCount
     */
    select?: JYFreeCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYFreeCountInclude | null
    /**
     * Filter which JYFreeCount to delete.
     */
    where: JYFreeCountWhereUniqueInput
  }


  /**
   * JYFreeCount deleteMany
   */
  export type JYFreeCountDeleteManyArgs = {
    /**
     * Filter which JYFreeCounts to delete
     */
    where?: JYFreeCountWhereInput
  }


  /**
   * JYFreeCount without action
   */
  export type JYFreeCountArgs = {
    /**
     * Select specific fields to fetch from the JYFreeCount
     */
    select?: JYFreeCountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JYFreeCountInclude | null
  }



  /**
   * Model Article
   */


  export type AggregateArticle = {
    _count: ArticleCountAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  export type ArticleMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    link: string | null
    source: string | null
    title: string | null
    image: string | null
    excerpt: string | null
    profileId: string | null
  }

  export type ArticleMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    link: string | null
    source: string | null
    title: string | null
    image: string | null
    excerpt: string | null
    profileId: string | null
  }

  export type ArticleCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    link: number
    source: number
    title: number
    image: number
    excerpt: number
    profileId: number
    _all: number
  }


  export type ArticleMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    link?: true
    source?: true
    title?: true
    image?: true
    excerpt?: true
    profileId?: true
  }

  export type ArticleMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    link?: true
    source?: true
    title?: true
    image?: true
    excerpt?: true
    profileId?: true
  }

  export type ArticleCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    link?: true
    source?: true
    title?: true
    image?: true
    excerpt?: true
    profileId?: true
    _all?: true
  }

  export type ArticleAggregateArgs = {
    /**
     * Filter which Article to aggregate.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Articles
    **/
    _count?: true | ArticleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArticleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArticleMaxAggregateInputType
  }

  export type GetArticleAggregateType<T extends ArticleAggregateArgs> = {
        [P in keyof T & keyof AggregateArticle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArticle[P]>
      : GetScalarType<T[P], AggregateArticle[P]>
  }




  export type ArticleGroupByArgs = {
    where?: ArticleWhereInput
    orderBy?: Enumerable<ArticleOrderByWithAggregationInput>
    by: ArticleScalarFieldEnum[]
    having?: ArticleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArticleCountAggregateInputType | true
    _min?: ArticleMinAggregateInputType
    _max?: ArticleMaxAggregateInputType
  }


  export type ArticleGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    link: string
    source: string | null
    title: string | null
    image: string | null
    excerpt: string | null
    profileId: string
    _count: ArticleCountAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  type GetArticleGroupByPayload<T extends ArticleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ArticleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArticleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArticleGroupByOutputType[P]>
            : GetScalarType<T[P], ArticleGroupByOutputType[P]>
        }
      >
    >


  export type ArticleSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    link?: boolean
    source?: boolean
    title?: boolean
    image?: boolean
    excerpt?: boolean
    profileId?: boolean
    profile?: boolean | JYProfileArgs
  }


  export type ArticleInclude = {
    profile?: boolean | JYProfileArgs
  }

  export type ArticleGetPayload<S extends boolean | null | undefined | ArticleArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Article :
    S extends undefined ? never :
    S extends { include: any } & (ArticleArgs | ArticleFindManyArgs)
    ? Article  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'profile' ? JYProfileGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ArticleArgs | ArticleFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'profile' ? JYProfileGetPayload<S['select'][P]> :  P extends keyof Article ? Article[P] : never
  } 
      : Article


  type ArticleCountArgs = 
    Omit<ArticleFindManyArgs, 'select' | 'include'> & {
      select?: ArticleCountAggregateInputType | true
    }

  export interface ArticleDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Article that matches the filter.
     * @param {ArticleFindUniqueArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ArticleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ArticleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Article'> extends True ? Prisma__ArticleClient<ArticleGetPayload<T>> : Prisma__ArticleClient<ArticleGetPayload<T> | null, null>

    /**
     * Find one Article that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ArticleFindUniqueOrThrowArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ArticleFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ArticleFindUniqueOrThrowArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Find the first Article that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindFirstArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ArticleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ArticleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Article'> extends True ? Prisma__ArticleClient<ArticleGetPayload<T>> : Prisma__ArticleClient<ArticleGetPayload<T> | null, null>

    /**
     * Find the first Article that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindFirstOrThrowArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ArticleFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ArticleFindFirstOrThrowArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Find zero or more Articles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Articles
     * const articles = await prisma.article.findMany()
     * 
     * // Get first 10 Articles
     * const articles = await prisma.article.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const articleWithIdOnly = await prisma.article.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ArticleFindManyArgs>(
      args?: SelectSubset<T, ArticleFindManyArgs>
    ): Prisma.PrismaPromise<Array<ArticleGetPayload<T>>>

    /**
     * Create a Article.
     * @param {ArticleCreateArgs} args - Arguments to create a Article.
     * @example
     * // Create one Article
     * const Article = await prisma.article.create({
     *   data: {
     *     // ... data to create a Article
     *   }
     * })
     * 
    **/
    create<T extends ArticleCreateArgs>(
      args: SelectSubset<T, ArticleCreateArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Create many Articles.
     *     @param {ArticleCreateManyArgs} args - Arguments to create many Articles.
     *     @example
     *     // Create many Articles
     *     const article = await prisma.article.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ArticleCreateManyArgs>(
      args?: SelectSubset<T, ArticleCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Article.
     * @param {ArticleDeleteArgs} args - Arguments to delete one Article.
     * @example
     * // Delete one Article
     * const Article = await prisma.article.delete({
     *   where: {
     *     // ... filter to delete one Article
     *   }
     * })
     * 
    **/
    delete<T extends ArticleDeleteArgs>(
      args: SelectSubset<T, ArticleDeleteArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Update one Article.
     * @param {ArticleUpdateArgs} args - Arguments to update one Article.
     * @example
     * // Update one Article
     * const article = await prisma.article.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ArticleUpdateArgs>(
      args: SelectSubset<T, ArticleUpdateArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Delete zero or more Articles.
     * @param {ArticleDeleteManyArgs} args - Arguments to filter Articles to delete.
     * @example
     * // Delete a few Articles
     * const { count } = await prisma.article.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ArticleDeleteManyArgs>(
      args?: SelectSubset<T, ArticleDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Articles
     * const article = await prisma.article.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ArticleUpdateManyArgs>(
      args: SelectSubset<T, ArticleUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Article.
     * @param {ArticleUpsertArgs} args - Arguments to update or create a Article.
     * @example
     * // Update or create a Article
     * const article = await prisma.article.upsert({
     *   create: {
     *     // ... data to create a Article
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Article we want to update
     *   }
     * })
    **/
    upsert<T extends ArticleUpsertArgs>(
      args: SelectSubset<T, ArticleUpsertArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Count the number of Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleCountArgs} args - Arguments to filter Articles to count.
     * @example
     * // Count the number of Articles
     * const count = await prisma.article.count({
     *   where: {
     *     // ... the filter for the Articles we want to count
     *   }
     * })
    **/
    count<T extends ArticleCountArgs>(
      args?: Subset<T, ArticleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArticleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArticleAggregateArgs>(args: Subset<T, ArticleAggregateArgs>): Prisma.PrismaPromise<GetArticleAggregateType<T>>

    /**
     * Group by Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArticleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArticleGroupByArgs['orderBy'] }
        : { orderBy?: ArticleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArticleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArticleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Article.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ArticleClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    profile<T extends JYProfileArgs= {}>(args?: Subset<T, JYProfileArgs>): Prisma__JYProfileClient<JYProfileGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Article base type for findUnique actions
   */
  export type ArticleFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * Filter, which Article to fetch.
     */
    where: ArticleWhereUniqueInput
  }

  /**
   * Article findUnique
   */
  export interface ArticleFindUniqueArgs extends ArticleFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Article findUniqueOrThrow
   */
  export type ArticleFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * Filter, which Article to fetch.
     */
    where: ArticleWhereUniqueInput
  }


  /**
   * Article base type for findFirst actions
   */
  export type ArticleFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * Filter, which Article to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Articles.
     */
    distinct?: Enumerable<ArticleScalarFieldEnum>
  }

  /**
   * Article findFirst
   */
  export interface ArticleFindFirstArgs extends ArticleFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Article findFirstOrThrow
   */
  export type ArticleFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * Filter, which Article to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Articles.
     */
    distinct?: Enumerable<ArticleScalarFieldEnum>
  }


  /**
   * Article findMany
   */
  export type ArticleFindManyArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * Filter, which Articles to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    distinct?: Enumerable<ArticleScalarFieldEnum>
  }


  /**
   * Article create
   */
  export type ArticleCreateArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * The data needed to create a Article.
     */
    data: XOR<ArticleCreateInput, ArticleUncheckedCreateInput>
  }


  /**
   * Article createMany
   */
  export type ArticleCreateManyArgs = {
    /**
     * The data used to create many Articles.
     */
    data: Enumerable<ArticleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Article update
   */
  export type ArticleUpdateArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * The data needed to update a Article.
     */
    data: XOR<ArticleUpdateInput, ArticleUncheckedUpdateInput>
    /**
     * Choose, which Article to update.
     */
    where: ArticleWhereUniqueInput
  }


  /**
   * Article updateMany
   */
  export type ArticleUpdateManyArgs = {
    /**
     * The data used to update Articles.
     */
    data: XOR<ArticleUpdateManyMutationInput, ArticleUncheckedUpdateManyInput>
    /**
     * Filter which Articles to update
     */
    where?: ArticleWhereInput
  }


  /**
   * Article upsert
   */
  export type ArticleUpsertArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * The filter to search for the Article to update in case it exists.
     */
    where: ArticleWhereUniqueInput
    /**
     * In case the Article found by the `where` argument doesn't exist, create a new Article with this data.
     */
    create: XOR<ArticleCreateInput, ArticleUncheckedCreateInput>
    /**
     * In case the Article was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArticleUpdateInput, ArticleUncheckedUpdateInput>
  }


  /**
   * Article delete
   */
  export type ArticleDeleteArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * Filter which Article to delete.
     */
    where: ArticleWhereUniqueInput
  }


  /**
   * Article deleteMany
   */
  export type ArticleDeleteManyArgs = {
    /**
     * Filter which Articles to delete
     */
    where?: ArticleWhereInput
  }


  /**
   * Article without action
   */
  export type ArticleArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
  }



  /**
   * Model Product
   */


  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    price: Decimal | null
    plan: number | null
    amount: number | null
    storeDuration: number | null
    validityPeriod: number | null
    restricted: number | null
  }

  export type ProductSumAggregateOutputType = {
    price: Decimal | null
    plan: number | null
    amount: number | null
    storeDuration: number | null
    validityPeriod: number | null
    restricted: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    price: Decimal | null
    productType: ProductType | null
    plan: number | null
    amount: number | null
    fileSize: string | null
    storeDuration: number | null
    hasAds: string | null
    tecSupport: string | null
    validityPeriod: number | null
    appId: string | null
    isDeleted: boolean | null
    tenantId: string | null
    restricted: number | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    price: Decimal | null
    productType: ProductType | null
    plan: number | null
    amount: number | null
    fileSize: string | null
    storeDuration: number | null
    hasAds: string | null
    tecSupport: string | null
    validityPeriod: number | null
    appId: string | null
    isDeleted: boolean | null
    tenantId: string | null
    restricted: number | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    price: number
    productType: number
    plan: number
    amount: number
    extendedDescriptionData: number
    fileSize: number
    storeDuration: number
    hasAds: number
    tecSupport: number
    validityPeriod: number
    appId: number
    isDeleted: number
    tenantId: number
    restricted: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    price?: true
    plan?: true
    amount?: true
    storeDuration?: true
    validityPeriod?: true
    restricted?: true
  }

  export type ProductSumAggregateInputType = {
    price?: true
    plan?: true
    amount?: true
    storeDuration?: true
    validityPeriod?: true
    restricted?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    price?: true
    productType?: true
    plan?: true
    amount?: true
    fileSize?: true
    storeDuration?: true
    hasAds?: true
    tecSupport?: true
    validityPeriod?: true
    appId?: true
    isDeleted?: true
    tenantId?: true
    restricted?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    price?: true
    productType?: true
    plan?: true
    amount?: true
    fileSize?: true
    storeDuration?: true
    hasAds?: true
    tecSupport?: true
    validityPeriod?: true
    appId?: true
    isDeleted?: true
    tenantId?: true
    restricted?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    price?: true
    productType?: true
    plan?: true
    amount?: true
    extendedDescriptionData?: true
    fileSize?: true
    storeDuration?: true
    hasAds?: true
    tecSupport?: true
    validityPeriod?: true
    appId?: true
    isDeleted?: true
    tenantId?: true
    restricted?: true
    _all?: true
  }

  export type ProductAggregateArgs = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs = {
    where?: ProductWhereInput
    orderBy?: Enumerable<ProductOrderByWithAggregationInput>
    by: ProductScalarFieldEnum[]
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }


  export type ProductGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    name: string
    price: Decimal
    productType: ProductType
    plan: number | null
    amount: number | null
    extendedDescriptionData: JsonValue | null
    fileSize: string | null
    storeDuration: number | null
    hasAds: string | null
    tecSupport: string | null
    validityPeriod: number | null
    appId: string
    isDeleted: boolean | null
    tenantId: string
    restricted: number
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    price?: boolean
    productType?: boolean
    plan?: boolean
    amount?: boolean
    extendedDescriptionData?: boolean
    fileSize?: boolean
    storeDuration?: boolean
    hasAds?: boolean
    tecSupport?: boolean
    validityPeriod?: boolean
    appId?: boolean
    isDeleted?: boolean
    tenantId?: boolean
    restricted?: boolean
    productSnapshots?: boolean | Product$productSnapshotsArgs
    app?: boolean | AppArgs
    _count?: boolean | ProductCountOutputTypeArgs
  }


  export type ProductInclude = {
    productSnapshots?: boolean | Product$productSnapshotsArgs
    app?: boolean | AppArgs
    _count?: boolean | ProductCountOutputTypeArgs
  }

  export type ProductGetPayload<S extends boolean | null | undefined | ProductArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Product :
    S extends undefined ? never :
    S extends { include: any } & (ProductArgs | ProductFindManyArgs)
    ? Product  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'productSnapshots' ? Array < ProductSnapshotGetPayload<S['include'][P]>>  :
        P extends 'app' ? AppGetPayload<S['include'][P]> :
        P extends '_count' ? ProductCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ProductArgs | ProductFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'productSnapshots' ? Array < ProductSnapshotGetPayload<S['select'][P]>>  :
        P extends 'app' ? AppGetPayload<S['select'][P]> :
        P extends '_count' ? ProductCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Product ? Product[P] : never
  } 
      : Product


  type ProductCountArgs = 
    Omit<ProductFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProductFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Product'> extends True ? Prisma__ProductClient<ProductGetPayload<T>> : Prisma__ProductClient<ProductGetPayload<T> | null, null>

    /**
     * Find one Product that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProductFindUniqueOrThrowArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProductFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Product'> extends True ? Prisma__ProductClient<ProductGetPayload<T>> : Prisma__ProductClient<ProductGetPayload<T> | null, null>

    /**
     * Find the first Product that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProductFindFirstOrThrowArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs>(
      args?: SelectSubset<T, ProductFindManyArgs>
    ): Prisma.PrismaPromise<Array<ProductGetPayload<T>>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs>(
      args: SelectSubset<T, ProductCreateArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>

    /**
     * Create many Products.
     *     @param {ProductCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductCreateManyArgs>(
      args?: SelectSubset<T, ProductCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs>(
      args: SelectSubset<T, ProductDeleteArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs>(
      args: SelectSubset<T, ProductUpdateArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs>(
      args?: SelectSubset<T, ProductDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs>(
      args: SelectSubset<T, ProductUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs>(
      args: SelectSubset<T, ProductUpsertArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    productSnapshots<T extends Product$productSnapshotsArgs= {}>(args?: Subset<T, Product$productSnapshotsArgs>): Prisma.PrismaPromise<Array<ProductSnapshotGetPayload<T>>| Null>;

    app<T extends AppArgs= {}>(args?: Subset<T, AppArgs>): Prisma__AppClient<AppGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Product base type for findUnique actions
   */
  export type ProductFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUnique
   */
  export interface ProductFindUniqueArgs extends ProductFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product base type for findFirst actions
   */
  export type ProductFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: Enumerable<ProductScalarFieldEnum>
  }

  /**
   * Product findFirst
   */
  export interface ProductFindFirstArgs extends ProductFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product findMany
   */
  export type ProductFindManyArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product create
   */
  export type ProductCreateArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }


  /**
   * Product createMany
   */
  export type ProductCreateManyArgs = {
    /**
     * The data used to create many Products.
     */
    data: Enumerable<ProductCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Product update
   */
  export type ProductUpdateArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }


  /**
   * Product upsert
   */
  export type ProductUpsertArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }


  /**
   * Product delete
   */
  export type ProductDeleteArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }


  /**
   * Product.productSnapshots
   */
  export type Product$productSnapshotsArgs = {
    /**
     * Select specific fields to fetch from the ProductSnapshot
     */
    select?: ProductSnapshotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSnapshotInclude | null
    where?: ProductSnapshotWhereInput
    orderBy?: Enumerable<ProductSnapshotOrderByWithRelationInput>
    cursor?: ProductSnapshotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductSnapshotScalarFieldEnum>
  }


  /**
   * Product without action
   */
  export type ProductArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
  }



  /**
   * Model Pay
   */


  export type AggregatePay = {
    _count: PayCountAggregateOutputType | null
    _min: PayMinAggregateOutputType | null
    _max: PayMaxAggregateOutputType | null
  }

  export type PayMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: PayStatus | null
    orderId: string | null
    transactionId: string | null
    tenantId: string | null
  }

  export type PayMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: PayStatus | null
    orderId: string | null
    transactionId: string | null
    tenantId: string | null
  }

  export type PayCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    status: number
    orderId: number
    transactionId: number
    tenantId: number
    _all: number
  }


  export type PayMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    orderId?: true
    transactionId?: true
    tenantId?: true
  }

  export type PayMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    orderId?: true
    transactionId?: true
    tenantId?: true
  }

  export type PayCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    orderId?: true
    transactionId?: true
    tenantId?: true
    _all?: true
  }

  export type PayAggregateArgs = {
    /**
     * Filter which Pay to aggregate.
     */
    where?: PayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pays to fetch.
     */
    orderBy?: Enumerable<PayOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pays
    **/
    _count?: true | PayCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayMaxAggregateInputType
  }

  export type GetPayAggregateType<T extends PayAggregateArgs> = {
        [P in keyof T & keyof AggregatePay]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePay[P]>
      : GetScalarType<T[P], AggregatePay[P]>
  }




  export type PayGroupByArgs = {
    where?: PayWhereInput
    orderBy?: Enumerable<PayOrderByWithAggregationInput>
    by: PayScalarFieldEnum[]
    having?: PayScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayCountAggregateInputType | true
    _min?: PayMinAggregateInputType
    _max?: PayMaxAggregateInputType
  }


  export type PayGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    status: PayStatus
    orderId: string
    transactionId: string
    tenantId: string
    _count: PayCountAggregateOutputType | null
    _min: PayMinAggregateOutputType | null
    _max: PayMaxAggregateOutputType | null
  }

  type GetPayGroupByPayload<T extends PayGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PayGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayGroupByOutputType[P]>
            : GetScalarType<T[P], PayGroupByOutputType[P]>
        }
      >
    >


  export type PaySelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    orderId?: boolean
    transactionId?: boolean
    tenantId?: boolean
    Order?: boolean | OrderArgs
  }


  export type PayInclude = {
    Order?: boolean | OrderArgs
  }

  export type PayGetPayload<S extends boolean | null | undefined | PayArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Pay :
    S extends undefined ? never :
    S extends { include: any } & (PayArgs | PayFindManyArgs)
    ? Pay  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Order' ? OrderGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PayArgs | PayFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Order' ? OrderGetPayload<S['select'][P]> :  P extends keyof Pay ? Pay[P] : never
  } 
      : Pay


  type PayCountArgs = 
    Omit<PayFindManyArgs, 'select' | 'include'> & {
      select?: PayCountAggregateInputType | true
    }

  export interface PayDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Pay that matches the filter.
     * @param {PayFindUniqueArgs} args - Arguments to find a Pay
     * @example
     * // Get one Pay
     * const pay = await prisma.pay.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PayFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PayFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Pay'> extends True ? Prisma__PayClient<PayGetPayload<T>> : Prisma__PayClient<PayGetPayload<T> | null, null>

    /**
     * Find one Pay that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PayFindUniqueOrThrowArgs} args - Arguments to find a Pay
     * @example
     * // Get one Pay
     * const pay = await prisma.pay.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PayFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PayFindUniqueOrThrowArgs>
    ): Prisma__PayClient<PayGetPayload<T>>

    /**
     * Find the first Pay that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayFindFirstArgs} args - Arguments to find a Pay
     * @example
     * // Get one Pay
     * const pay = await prisma.pay.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PayFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PayFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Pay'> extends True ? Prisma__PayClient<PayGetPayload<T>> : Prisma__PayClient<PayGetPayload<T> | null, null>

    /**
     * Find the first Pay that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayFindFirstOrThrowArgs} args - Arguments to find a Pay
     * @example
     * // Get one Pay
     * const pay = await prisma.pay.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PayFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PayFindFirstOrThrowArgs>
    ): Prisma__PayClient<PayGetPayload<T>>

    /**
     * Find zero or more Pays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pays
     * const pays = await prisma.pay.findMany()
     * 
     * // Get first 10 Pays
     * const pays = await prisma.pay.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payWithIdOnly = await prisma.pay.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PayFindManyArgs>(
      args?: SelectSubset<T, PayFindManyArgs>
    ): Prisma.PrismaPromise<Array<PayGetPayload<T>>>

    /**
     * Create a Pay.
     * @param {PayCreateArgs} args - Arguments to create a Pay.
     * @example
     * // Create one Pay
     * const Pay = await prisma.pay.create({
     *   data: {
     *     // ... data to create a Pay
     *   }
     * })
     * 
    **/
    create<T extends PayCreateArgs>(
      args: SelectSubset<T, PayCreateArgs>
    ): Prisma__PayClient<PayGetPayload<T>>

    /**
     * Create many Pays.
     *     @param {PayCreateManyArgs} args - Arguments to create many Pays.
     *     @example
     *     // Create many Pays
     *     const pay = await prisma.pay.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PayCreateManyArgs>(
      args?: SelectSubset<T, PayCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pay.
     * @param {PayDeleteArgs} args - Arguments to delete one Pay.
     * @example
     * // Delete one Pay
     * const Pay = await prisma.pay.delete({
     *   where: {
     *     // ... filter to delete one Pay
     *   }
     * })
     * 
    **/
    delete<T extends PayDeleteArgs>(
      args: SelectSubset<T, PayDeleteArgs>
    ): Prisma__PayClient<PayGetPayload<T>>

    /**
     * Update one Pay.
     * @param {PayUpdateArgs} args - Arguments to update one Pay.
     * @example
     * // Update one Pay
     * const pay = await prisma.pay.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PayUpdateArgs>(
      args: SelectSubset<T, PayUpdateArgs>
    ): Prisma__PayClient<PayGetPayload<T>>

    /**
     * Delete zero or more Pays.
     * @param {PayDeleteManyArgs} args - Arguments to filter Pays to delete.
     * @example
     * // Delete a few Pays
     * const { count } = await prisma.pay.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PayDeleteManyArgs>(
      args?: SelectSubset<T, PayDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pays
     * const pay = await prisma.pay.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PayUpdateManyArgs>(
      args: SelectSubset<T, PayUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pay.
     * @param {PayUpsertArgs} args - Arguments to update or create a Pay.
     * @example
     * // Update or create a Pay
     * const pay = await prisma.pay.upsert({
     *   create: {
     *     // ... data to create a Pay
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pay we want to update
     *   }
     * })
    **/
    upsert<T extends PayUpsertArgs>(
      args: SelectSubset<T, PayUpsertArgs>
    ): Prisma__PayClient<PayGetPayload<T>>

    /**
     * Count the number of Pays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayCountArgs} args - Arguments to filter Pays to count.
     * @example
     * // Count the number of Pays
     * const count = await prisma.pay.count({
     *   where: {
     *     // ... the filter for the Pays we want to count
     *   }
     * })
    **/
    count<T extends PayCountArgs>(
      args?: Subset<T, PayCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayAggregateArgs>(args: Subset<T, PayAggregateArgs>): Prisma.PrismaPromise<GetPayAggregateType<T>>

    /**
     * Group by Pay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PayGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PayGroupByArgs['orderBy'] }
        : { orderBy?: PayGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Pay.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PayClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Order<T extends OrderArgs= {}>(args?: Subset<T, OrderArgs>): Prisma__OrderClient<OrderGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Pay base type for findUnique actions
   */
  export type PayFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Pay
     */
    select?: PaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayInclude | null
    /**
     * Filter, which Pay to fetch.
     */
    where: PayWhereUniqueInput
  }

  /**
   * Pay findUnique
   */
  export interface PayFindUniqueArgs extends PayFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pay findUniqueOrThrow
   */
  export type PayFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Pay
     */
    select?: PaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayInclude | null
    /**
     * Filter, which Pay to fetch.
     */
    where: PayWhereUniqueInput
  }


  /**
   * Pay base type for findFirst actions
   */
  export type PayFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Pay
     */
    select?: PaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayInclude | null
    /**
     * Filter, which Pay to fetch.
     */
    where?: PayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pays to fetch.
     */
    orderBy?: Enumerable<PayOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pays.
     */
    cursor?: PayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pays.
     */
    distinct?: Enumerable<PayScalarFieldEnum>
  }

  /**
   * Pay findFirst
   */
  export interface PayFindFirstArgs extends PayFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pay findFirstOrThrow
   */
  export type PayFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Pay
     */
    select?: PaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayInclude | null
    /**
     * Filter, which Pay to fetch.
     */
    where?: PayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pays to fetch.
     */
    orderBy?: Enumerable<PayOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pays.
     */
    cursor?: PayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pays.
     */
    distinct?: Enumerable<PayScalarFieldEnum>
  }


  /**
   * Pay findMany
   */
  export type PayFindManyArgs = {
    /**
     * Select specific fields to fetch from the Pay
     */
    select?: PaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayInclude | null
    /**
     * Filter, which Pays to fetch.
     */
    where?: PayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pays to fetch.
     */
    orderBy?: Enumerable<PayOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pays.
     */
    cursor?: PayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pays.
     */
    skip?: number
    distinct?: Enumerable<PayScalarFieldEnum>
  }


  /**
   * Pay create
   */
  export type PayCreateArgs = {
    /**
     * Select specific fields to fetch from the Pay
     */
    select?: PaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayInclude | null
    /**
     * The data needed to create a Pay.
     */
    data: XOR<PayCreateInput, PayUncheckedCreateInput>
  }


  /**
   * Pay createMany
   */
  export type PayCreateManyArgs = {
    /**
     * The data used to create many Pays.
     */
    data: Enumerable<PayCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Pay update
   */
  export type PayUpdateArgs = {
    /**
     * Select specific fields to fetch from the Pay
     */
    select?: PaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayInclude | null
    /**
     * The data needed to update a Pay.
     */
    data: XOR<PayUpdateInput, PayUncheckedUpdateInput>
    /**
     * Choose, which Pay to update.
     */
    where: PayWhereUniqueInput
  }


  /**
   * Pay updateMany
   */
  export type PayUpdateManyArgs = {
    /**
     * The data used to update Pays.
     */
    data: XOR<PayUpdateManyMutationInput, PayUncheckedUpdateManyInput>
    /**
     * Filter which Pays to update
     */
    where?: PayWhereInput
  }


  /**
   * Pay upsert
   */
  export type PayUpsertArgs = {
    /**
     * Select specific fields to fetch from the Pay
     */
    select?: PaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayInclude | null
    /**
     * The filter to search for the Pay to update in case it exists.
     */
    where: PayWhereUniqueInput
    /**
     * In case the Pay found by the `where` argument doesn't exist, create a new Pay with this data.
     */
    create: XOR<PayCreateInput, PayUncheckedCreateInput>
    /**
     * In case the Pay was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PayUpdateInput, PayUncheckedUpdateInput>
  }


  /**
   * Pay delete
   */
  export type PayDeleteArgs = {
    /**
     * Select specific fields to fetch from the Pay
     */
    select?: PaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayInclude | null
    /**
     * Filter which Pay to delete.
     */
    where: PayWhereUniqueInput
  }


  /**
   * Pay deleteMany
   */
  export type PayDeleteManyArgs = {
    /**
     * Filter which Pays to delete
     */
    where?: PayWhereInput
  }


  /**
   * Pay without action
   */
  export type PayArgs = {
    /**
     * Select specific fields to fetch from the Pay
     */
    select?: PaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayInclude | null
  }



  /**
   * Model Customer
   */


  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    appId: string | null
    email: string | null
    hashedPassword: string | null
    hashedRefreshToken: string | null
    recoveryCode: string | null
    recoveryToken: string | null
    isDeleted: boolean | null
    tenantId: string | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    appId: string | null
    email: string | null
    hashedPassword: string | null
    hashedRefreshToken: string | null
    recoveryCode: string | null
    recoveryToken: string | null
    isDeleted: boolean | null
    tenantId: string | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    appId: number
    email: number
    hashedPassword: number
    hashedRefreshToken: number
    recoveryCode: number
    recoveryToken: number
    isDeleted: number
    tenantId: number
    _all: number
  }


  export type CustomerMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    appId?: true
    email?: true
    hashedPassword?: true
    hashedRefreshToken?: true
    recoveryCode?: true
    recoveryToken?: true
    isDeleted?: true
    tenantId?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    appId?: true
    email?: true
    hashedPassword?: true
    hashedRefreshToken?: true
    recoveryCode?: true
    recoveryToken?: true
    isDeleted?: true
    tenantId?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    appId?: true
    email?: true
    hashedPassword?: true
    hashedRefreshToken?: true
    recoveryCode?: true
    recoveryToken?: true
    isDeleted?: true
    tenantId?: true
    _all?: true
  }

  export type CustomerAggregateArgs = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: Enumerable<CustomerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs = {
    where?: CustomerWhereInput
    orderBy?: Enumerable<CustomerOrderByWithAggregationInput>
    by: CustomerScalarFieldEnum[]
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }


  export type CustomerGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    name: string
    appId: string
    email: string | null
    hashedPassword: string | null
    hashedRefreshToken: string | null
    recoveryCode: string | null
    recoveryToken: string | null
    isDeleted: boolean | null
    tenantId: string
    _count: CustomerCountAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    appId?: boolean
    email?: boolean
    hashedPassword?: boolean
    hashedRefreshToken?: boolean
    recoveryCode?: boolean
    recoveryToken?: boolean
    isDeleted?: boolean
    tenantId?: boolean
    app?: boolean | AppArgs
    orders?: boolean | Customer$ordersArgs
    legacyProfile?: boolean | LegacyProfileArgs
    profile?: boolean | ProfileArgs
    weixinProfile?: boolean | WeixinProfileArgs
    _count?: boolean | CustomerCountOutputTypeArgs
  }


  export type CustomerInclude = {
    app?: boolean | AppArgs
    orders?: boolean | Customer$ordersArgs
    legacyProfile?: boolean | LegacyProfileArgs
    profile?: boolean | ProfileArgs
    weixinProfile?: boolean | WeixinProfileArgs
    _count?: boolean | CustomerCountOutputTypeArgs
  }

  export type CustomerGetPayload<S extends boolean | null | undefined | CustomerArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Customer :
    S extends undefined ? never :
    S extends { include: any } & (CustomerArgs | CustomerFindManyArgs)
    ? Customer  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'app' ? AppGetPayload<S['include'][P]> :
        P extends 'orders' ? Array < OrderGetPayload<S['include'][P]>>  :
        P extends 'legacyProfile' ? LegacyProfileGetPayload<S['include'][P]> | null :
        P extends 'profile' ? ProfileGetPayload<S['include'][P]> | null :
        P extends 'weixinProfile' ? WeixinProfileGetPayload<S['include'][P]> | null :
        P extends '_count' ? CustomerCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CustomerArgs | CustomerFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'app' ? AppGetPayload<S['select'][P]> :
        P extends 'orders' ? Array < OrderGetPayload<S['select'][P]>>  :
        P extends 'legacyProfile' ? LegacyProfileGetPayload<S['select'][P]> | null :
        P extends 'profile' ? ProfileGetPayload<S['select'][P]> | null :
        P extends 'weixinProfile' ? WeixinProfileGetPayload<S['select'][P]> | null :
        P extends '_count' ? CustomerCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Customer ? Customer[P] : never
  } 
      : Customer


  type CustomerCountArgs = 
    Omit<CustomerFindManyArgs, 'select' | 'include'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CustomerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CustomerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Customer'> extends True ? Prisma__CustomerClient<CustomerGetPayload<T>> : Prisma__CustomerClient<CustomerGetPayload<T> | null, null>

    /**
     * Find one Customer that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CustomerFindUniqueOrThrowArgs>
    ): Prisma__CustomerClient<CustomerGetPayload<T>>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CustomerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CustomerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Customer'> extends True ? Prisma__CustomerClient<CustomerGetPayload<T>> : Prisma__CustomerClient<CustomerGetPayload<T> | null, null>

    /**
     * Find the first Customer that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CustomerFindFirstOrThrowArgs>
    ): Prisma__CustomerClient<CustomerGetPayload<T>>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CustomerFindManyArgs>(
      args?: SelectSubset<T, CustomerFindManyArgs>
    ): Prisma.PrismaPromise<Array<CustomerGetPayload<T>>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
    **/
    create<T extends CustomerCreateArgs>(
      args: SelectSubset<T, CustomerCreateArgs>
    ): Prisma__CustomerClient<CustomerGetPayload<T>>

    /**
     * Create many Customers.
     *     @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     *     @example
     *     // Create many Customers
     *     const customer = await prisma.customer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CustomerCreateManyArgs>(
      args?: SelectSubset<T, CustomerCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
    **/
    delete<T extends CustomerDeleteArgs>(
      args: SelectSubset<T, CustomerDeleteArgs>
    ): Prisma__CustomerClient<CustomerGetPayload<T>>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CustomerUpdateArgs>(
      args: SelectSubset<T, CustomerUpdateArgs>
    ): Prisma__CustomerClient<CustomerGetPayload<T>>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CustomerDeleteManyArgs>(
      args?: SelectSubset<T, CustomerDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CustomerUpdateManyArgs>(
      args: SelectSubset<T, CustomerUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
    **/
    upsert<T extends CustomerUpsertArgs>(
      args: SelectSubset<T, CustomerUpsertArgs>
    ): Prisma__CustomerClient<CustomerGetPayload<T>>

    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CustomerClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    app<T extends AppArgs= {}>(args?: Subset<T, AppArgs>): Prisma__AppClient<AppGetPayload<T> | Null>;

    orders<T extends Customer$ordersArgs= {}>(args?: Subset<T, Customer$ordersArgs>): Prisma.PrismaPromise<Array<OrderGetPayload<T>>| Null>;

    legacyProfile<T extends LegacyProfileArgs= {}>(args?: Subset<T, LegacyProfileArgs>): Prisma__LegacyProfileClient<LegacyProfileGetPayload<T> | Null>;

    profile<T extends ProfileArgs= {}>(args?: Subset<T, ProfileArgs>): Prisma__ProfileClient<ProfileGetPayload<T> | Null>;

    weixinProfile<T extends WeixinProfileArgs= {}>(args?: Subset<T, WeixinProfileArgs>): Prisma__WeixinProfileClient<WeixinProfileGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Customer base type for findUnique actions
   */
  export type CustomerFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUnique
   */
  export interface CustomerFindUniqueArgs extends CustomerFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer base type for findFirst actions
   */
  export type CustomerFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: Enumerable<CustomerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }

  /**
   * Customer findFirst
   */
  export interface CustomerFindFirstArgs extends CustomerFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: Enumerable<CustomerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }


  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: Enumerable<CustomerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }


  /**
   * Customer create
   */
  export type CustomerCreateArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }


  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs = {
    /**
     * The data used to create many Customers.
     */
    data: Enumerable<CustomerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Customer update
   */
  export type CustomerUpdateArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
  }


  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }


  /**
   * Customer delete
   */
  export type CustomerDeleteArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
  }


  /**
   * Customer.orders
   */
  export type Customer$ordersArgs = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude | null
    where?: OrderWhereInput
    orderBy?: Enumerable<OrderOrderByWithRelationInput>
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * Customer without action
   */
  export type CustomerArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
  }



  /**
   * Model WeixinProfile
   */


  export type AggregateWeixinProfile = {
    _count: WeixinProfileCountAggregateOutputType | null
    _avg: WeixinProfileAvgAggregateOutputType | null
    _sum: WeixinProfileSumAggregateOutputType | null
    _min: WeixinProfileMinAggregateOutputType | null
    _max: WeixinProfileMaxAggregateOutputType | null
  }

  export type WeixinProfileAvgAggregateOutputType = {
    sex: number | null
  }

  export type WeixinProfileSumAggregateOutputType = {
    sex: number | null
  }

  export type WeixinProfileMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    unionid: string | null
    loginOpenid: string | null
    headimgurl: string | null
    nickname: string | null
    sex: number | null
    customerId: string | null
    tenantId: string | null
  }

  export type WeixinProfileMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    unionid: string | null
    loginOpenid: string | null
    headimgurl: string | null
    nickname: string | null
    sex: number | null
    customerId: string | null
    tenantId: string | null
  }

  export type WeixinProfileCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    unionid: number
    loginOpenid: number
    headimgurl: number
    nickname: number
    sex: number
    customerId: number
    tenantId: number
    _all: number
  }


  export type WeixinProfileAvgAggregateInputType = {
    sex?: true
  }

  export type WeixinProfileSumAggregateInputType = {
    sex?: true
  }

  export type WeixinProfileMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    unionid?: true
    loginOpenid?: true
    headimgurl?: true
    nickname?: true
    sex?: true
    customerId?: true
    tenantId?: true
  }

  export type WeixinProfileMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    unionid?: true
    loginOpenid?: true
    headimgurl?: true
    nickname?: true
    sex?: true
    customerId?: true
    tenantId?: true
  }

  export type WeixinProfileCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    unionid?: true
    loginOpenid?: true
    headimgurl?: true
    nickname?: true
    sex?: true
    customerId?: true
    tenantId?: true
    _all?: true
  }

  export type WeixinProfileAggregateArgs = {
    /**
     * Filter which WeixinProfile to aggregate.
     */
    where?: WeixinProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeixinProfiles to fetch.
     */
    orderBy?: Enumerable<WeixinProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WeixinProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeixinProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeixinProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WeixinProfiles
    **/
    _count?: true | WeixinProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WeixinProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WeixinProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WeixinProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WeixinProfileMaxAggregateInputType
  }

  export type GetWeixinProfileAggregateType<T extends WeixinProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateWeixinProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeixinProfile[P]>
      : GetScalarType<T[P], AggregateWeixinProfile[P]>
  }




  export type WeixinProfileGroupByArgs = {
    where?: WeixinProfileWhereInput
    orderBy?: Enumerable<WeixinProfileOrderByWithAggregationInput>
    by: WeixinProfileScalarFieldEnum[]
    having?: WeixinProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WeixinProfileCountAggregateInputType | true
    _avg?: WeixinProfileAvgAggregateInputType
    _sum?: WeixinProfileSumAggregateInputType
    _min?: WeixinProfileMinAggregateInputType
    _max?: WeixinProfileMaxAggregateInputType
  }


  export type WeixinProfileGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    unionid: string | null
    loginOpenid: string
    headimgurl: string
    nickname: string
    sex: number
    customerId: string
    tenantId: string
    _count: WeixinProfileCountAggregateOutputType | null
    _avg: WeixinProfileAvgAggregateOutputType | null
    _sum: WeixinProfileSumAggregateOutputType | null
    _min: WeixinProfileMinAggregateOutputType | null
    _max: WeixinProfileMaxAggregateOutputType | null
  }

  type GetWeixinProfileGroupByPayload<T extends WeixinProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<WeixinProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WeixinProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WeixinProfileGroupByOutputType[P]>
            : GetScalarType<T[P], WeixinProfileGroupByOutputType[P]>
        }
      >
    >


  export type WeixinProfileSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    unionid?: boolean
    loginOpenid?: boolean
    headimgurl?: boolean
    nickname?: boolean
    sex?: boolean
    customerId?: boolean
    tenantId?: boolean
    customer?: boolean | CustomerArgs
  }


  export type WeixinProfileInclude = {
    customer?: boolean | CustomerArgs
  }

  export type WeixinProfileGetPayload<S extends boolean | null | undefined | WeixinProfileArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WeixinProfile :
    S extends undefined ? never :
    S extends { include: any } & (WeixinProfileArgs | WeixinProfileFindManyArgs)
    ? WeixinProfile  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'customer' ? CustomerGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (WeixinProfileArgs | WeixinProfileFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'customer' ? CustomerGetPayload<S['select'][P]> :  P extends keyof WeixinProfile ? WeixinProfile[P] : never
  } 
      : WeixinProfile


  type WeixinProfileCountArgs = 
    Omit<WeixinProfileFindManyArgs, 'select' | 'include'> & {
      select?: WeixinProfileCountAggregateInputType | true
    }

  export interface WeixinProfileDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one WeixinProfile that matches the filter.
     * @param {WeixinProfileFindUniqueArgs} args - Arguments to find a WeixinProfile
     * @example
     * // Get one WeixinProfile
     * const weixinProfile = await prisma.weixinProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WeixinProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WeixinProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WeixinProfile'> extends True ? Prisma__WeixinProfileClient<WeixinProfileGetPayload<T>> : Prisma__WeixinProfileClient<WeixinProfileGetPayload<T> | null, null>

    /**
     * Find one WeixinProfile that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WeixinProfileFindUniqueOrThrowArgs} args - Arguments to find a WeixinProfile
     * @example
     * // Get one WeixinProfile
     * const weixinProfile = await prisma.weixinProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WeixinProfileFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, WeixinProfileFindUniqueOrThrowArgs>
    ): Prisma__WeixinProfileClient<WeixinProfileGetPayload<T>>

    /**
     * Find the first WeixinProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeixinProfileFindFirstArgs} args - Arguments to find a WeixinProfile
     * @example
     * // Get one WeixinProfile
     * const weixinProfile = await prisma.weixinProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WeixinProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WeixinProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WeixinProfile'> extends True ? Prisma__WeixinProfileClient<WeixinProfileGetPayload<T>> : Prisma__WeixinProfileClient<WeixinProfileGetPayload<T> | null, null>

    /**
     * Find the first WeixinProfile that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeixinProfileFindFirstOrThrowArgs} args - Arguments to find a WeixinProfile
     * @example
     * // Get one WeixinProfile
     * const weixinProfile = await prisma.weixinProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WeixinProfileFindFirstOrThrowArgs>(
      args?: SelectSubset<T, WeixinProfileFindFirstOrThrowArgs>
    ): Prisma__WeixinProfileClient<WeixinProfileGetPayload<T>>

    /**
     * Find zero or more WeixinProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeixinProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WeixinProfiles
     * const weixinProfiles = await prisma.weixinProfile.findMany()
     * 
     * // Get first 10 WeixinProfiles
     * const weixinProfiles = await prisma.weixinProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const weixinProfileWithIdOnly = await prisma.weixinProfile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WeixinProfileFindManyArgs>(
      args?: SelectSubset<T, WeixinProfileFindManyArgs>
    ): Prisma.PrismaPromise<Array<WeixinProfileGetPayload<T>>>

    /**
     * Create a WeixinProfile.
     * @param {WeixinProfileCreateArgs} args - Arguments to create a WeixinProfile.
     * @example
     * // Create one WeixinProfile
     * const WeixinProfile = await prisma.weixinProfile.create({
     *   data: {
     *     // ... data to create a WeixinProfile
     *   }
     * })
     * 
    **/
    create<T extends WeixinProfileCreateArgs>(
      args: SelectSubset<T, WeixinProfileCreateArgs>
    ): Prisma__WeixinProfileClient<WeixinProfileGetPayload<T>>

    /**
     * Create many WeixinProfiles.
     *     @param {WeixinProfileCreateManyArgs} args - Arguments to create many WeixinProfiles.
     *     @example
     *     // Create many WeixinProfiles
     *     const weixinProfile = await prisma.weixinProfile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WeixinProfileCreateManyArgs>(
      args?: SelectSubset<T, WeixinProfileCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WeixinProfile.
     * @param {WeixinProfileDeleteArgs} args - Arguments to delete one WeixinProfile.
     * @example
     * // Delete one WeixinProfile
     * const WeixinProfile = await prisma.weixinProfile.delete({
     *   where: {
     *     // ... filter to delete one WeixinProfile
     *   }
     * })
     * 
    **/
    delete<T extends WeixinProfileDeleteArgs>(
      args: SelectSubset<T, WeixinProfileDeleteArgs>
    ): Prisma__WeixinProfileClient<WeixinProfileGetPayload<T>>

    /**
     * Update one WeixinProfile.
     * @param {WeixinProfileUpdateArgs} args - Arguments to update one WeixinProfile.
     * @example
     * // Update one WeixinProfile
     * const weixinProfile = await prisma.weixinProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WeixinProfileUpdateArgs>(
      args: SelectSubset<T, WeixinProfileUpdateArgs>
    ): Prisma__WeixinProfileClient<WeixinProfileGetPayload<T>>

    /**
     * Delete zero or more WeixinProfiles.
     * @param {WeixinProfileDeleteManyArgs} args - Arguments to filter WeixinProfiles to delete.
     * @example
     * // Delete a few WeixinProfiles
     * const { count } = await prisma.weixinProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WeixinProfileDeleteManyArgs>(
      args?: SelectSubset<T, WeixinProfileDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WeixinProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeixinProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WeixinProfiles
     * const weixinProfile = await prisma.weixinProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WeixinProfileUpdateManyArgs>(
      args: SelectSubset<T, WeixinProfileUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WeixinProfile.
     * @param {WeixinProfileUpsertArgs} args - Arguments to update or create a WeixinProfile.
     * @example
     * // Update or create a WeixinProfile
     * const weixinProfile = await prisma.weixinProfile.upsert({
     *   create: {
     *     // ... data to create a WeixinProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WeixinProfile we want to update
     *   }
     * })
    **/
    upsert<T extends WeixinProfileUpsertArgs>(
      args: SelectSubset<T, WeixinProfileUpsertArgs>
    ): Prisma__WeixinProfileClient<WeixinProfileGetPayload<T>>

    /**
     * Count the number of WeixinProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeixinProfileCountArgs} args - Arguments to filter WeixinProfiles to count.
     * @example
     * // Count the number of WeixinProfiles
     * const count = await prisma.weixinProfile.count({
     *   where: {
     *     // ... the filter for the WeixinProfiles we want to count
     *   }
     * })
    **/
    count<T extends WeixinProfileCountArgs>(
      args?: Subset<T, WeixinProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WeixinProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WeixinProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeixinProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WeixinProfileAggregateArgs>(args: Subset<T, WeixinProfileAggregateArgs>): Prisma.PrismaPromise<GetWeixinProfileAggregateType<T>>

    /**
     * Group by WeixinProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeixinProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WeixinProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WeixinProfileGroupByArgs['orderBy'] }
        : { orderBy?: WeixinProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WeixinProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeixinProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for WeixinProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WeixinProfileClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    customer<T extends CustomerArgs= {}>(args?: Subset<T, CustomerArgs>): Prisma__CustomerClient<CustomerGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * WeixinProfile base type for findUnique actions
   */
  export type WeixinProfileFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the WeixinProfile
     */
    select?: WeixinProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeixinProfileInclude | null
    /**
     * Filter, which WeixinProfile to fetch.
     */
    where: WeixinProfileWhereUniqueInput
  }

  /**
   * WeixinProfile findUnique
   */
  export interface WeixinProfileFindUniqueArgs extends WeixinProfileFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WeixinProfile findUniqueOrThrow
   */
  export type WeixinProfileFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WeixinProfile
     */
    select?: WeixinProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeixinProfileInclude | null
    /**
     * Filter, which WeixinProfile to fetch.
     */
    where: WeixinProfileWhereUniqueInput
  }


  /**
   * WeixinProfile base type for findFirst actions
   */
  export type WeixinProfileFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the WeixinProfile
     */
    select?: WeixinProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeixinProfileInclude | null
    /**
     * Filter, which WeixinProfile to fetch.
     */
    where?: WeixinProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeixinProfiles to fetch.
     */
    orderBy?: Enumerable<WeixinProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeixinProfiles.
     */
    cursor?: WeixinProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeixinProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeixinProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeixinProfiles.
     */
    distinct?: Enumerable<WeixinProfileScalarFieldEnum>
  }

  /**
   * WeixinProfile findFirst
   */
  export interface WeixinProfileFindFirstArgs extends WeixinProfileFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WeixinProfile findFirstOrThrow
   */
  export type WeixinProfileFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WeixinProfile
     */
    select?: WeixinProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeixinProfileInclude | null
    /**
     * Filter, which WeixinProfile to fetch.
     */
    where?: WeixinProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeixinProfiles to fetch.
     */
    orderBy?: Enumerable<WeixinProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeixinProfiles.
     */
    cursor?: WeixinProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeixinProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeixinProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeixinProfiles.
     */
    distinct?: Enumerable<WeixinProfileScalarFieldEnum>
  }


  /**
   * WeixinProfile findMany
   */
  export type WeixinProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the WeixinProfile
     */
    select?: WeixinProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeixinProfileInclude | null
    /**
     * Filter, which WeixinProfiles to fetch.
     */
    where?: WeixinProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeixinProfiles to fetch.
     */
    orderBy?: Enumerable<WeixinProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WeixinProfiles.
     */
    cursor?: WeixinProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeixinProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeixinProfiles.
     */
    skip?: number
    distinct?: Enumerable<WeixinProfileScalarFieldEnum>
  }


  /**
   * WeixinProfile create
   */
  export type WeixinProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the WeixinProfile
     */
    select?: WeixinProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeixinProfileInclude | null
    /**
     * The data needed to create a WeixinProfile.
     */
    data: XOR<WeixinProfileCreateInput, WeixinProfileUncheckedCreateInput>
  }


  /**
   * WeixinProfile createMany
   */
  export type WeixinProfileCreateManyArgs = {
    /**
     * The data used to create many WeixinProfiles.
     */
    data: Enumerable<WeixinProfileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * WeixinProfile update
   */
  export type WeixinProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the WeixinProfile
     */
    select?: WeixinProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeixinProfileInclude | null
    /**
     * The data needed to update a WeixinProfile.
     */
    data: XOR<WeixinProfileUpdateInput, WeixinProfileUncheckedUpdateInput>
    /**
     * Choose, which WeixinProfile to update.
     */
    where: WeixinProfileWhereUniqueInput
  }


  /**
   * WeixinProfile updateMany
   */
  export type WeixinProfileUpdateManyArgs = {
    /**
     * The data used to update WeixinProfiles.
     */
    data: XOR<WeixinProfileUpdateManyMutationInput, WeixinProfileUncheckedUpdateManyInput>
    /**
     * Filter which WeixinProfiles to update
     */
    where?: WeixinProfileWhereInput
  }


  /**
   * WeixinProfile upsert
   */
  export type WeixinProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the WeixinProfile
     */
    select?: WeixinProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeixinProfileInclude | null
    /**
     * The filter to search for the WeixinProfile to update in case it exists.
     */
    where: WeixinProfileWhereUniqueInput
    /**
     * In case the WeixinProfile found by the `where` argument doesn't exist, create a new WeixinProfile with this data.
     */
    create: XOR<WeixinProfileCreateInput, WeixinProfileUncheckedCreateInput>
    /**
     * In case the WeixinProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WeixinProfileUpdateInput, WeixinProfileUncheckedUpdateInput>
  }


  /**
   * WeixinProfile delete
   */
  export type WeixinProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the WeixinProfile
     */
    select?: WeixinProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeixinProfileInclude | null
    /**
     * Filter which WeixinProfile to delete.
     */
    where: WeixinProfileWhereUniqueInput
  }


  /**
   * WeixinProfile deleteMany
   */
  export type WeixinProfileDeleteManyArgs = {
    /**
     * Filter which WeixinProfiles to delete
     */
    where?: WeixinProfileWhereInput
  }


  /**
   * WeixinProfile without action
   */
  export type WeixinProfileArgs = {
    /**
     * Select specific fields to fetch from the WeixinProfile
     */
    select?: WeixinProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeixinProfileInclude | null
  }



  /**
   * Model Profile
   */


  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    plan: number | null
    amount: number | null
  }

  export type ProfileSumAggregateOutputType = {
    plan: number | null
    amount: number | null
  }

  export type ProfileMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    customerId: string | null
    productType: ProductType | null
    plan: number | null
    amount: number | null
    expireAt: Date | null
    tenantId: string | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    customerId: string | null
    productType: ProductType | null
    plan: number | null
    amount: number | null
    expireAt: Date | null
    tenantId: string | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    customerId: number
    productType: number
    plan: number
    amount: number
    expireAt: number
    tenantId: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    plan?: true
    amount?: true
  }

  export type ProfileSumAggregateInputType = {
    plan?: true
    amount?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    customerId?: true
    productType?: true
    plan?: true
    amount?: true
    expireAt?: true
    tenantId?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    customerId?: true
    productType?: true
    plan?: true
    amount?: true
    expireAt?: true
    tenantId?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    customerId?: true
    productType?: true
    plan?: true
    amount?: true
    expireAt?: true
    tenantId?: true
    _all?: true
  }

  export type ProfileAggregateArgs = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs = {
    where?: ProfileWhereInput
    orderBy?: Enumerable<ProfileOrderByWithAggregationInput>
    by: ProfileScalarFieldEnum[]
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _avg?: ProfileAvgAggregateInputType
    _sum?: ProfileSumAggregateInputType
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }


  export type ProfileGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    customerId: string
    productType: ProductType
    plan: number | null
    amount: number | null
    expireAt: Date | null
    tenantId: string
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customerId?: boolean
    productType?: boolean
    plan?: boolean
    amount?: boolean
    expireAt?: boolean
    tenantId?: boolean
    customer?: boolean | CustomerArgs
  }


  export type ProfileInclude = {
    customer?: boolean | CustomerArgs
  }

  export type ProfileGetPayload<S extends boolean | null | undefined | ProfileArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Profile :
    S extends undefined ? never :
    S extends { include: any } & (ProfileArgs | ProfileFindManyArgs)
    ? Profile  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'customer' ? CustomerGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ProfileArgs | ProfileFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'customer' ? CustomerGetPayload<S['select'][P]> :  P extends keyof Profile ? Profile[P] : never
  } 
      : Profile


  type ProfileCountArgs = 
    Omit<ProfileFindManyArgs, 'select' | 'include'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Profile'> extends True ? Prisma__ProfileClient<ProfileGetPayload<T>> : Prisma__ProfileClient<ProfileGetPayload<T> | null, null>

    /**
     * Find one Profile that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProfileFindUniqueOrThrowArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Profile'> extends True ? Prisma__ProfileClient<ProfileGetPayload<T>> : Prisma__ProfileClient<ProfileGetPayload<T> | null, null>

    /**
     * Find the first Profile that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProfileFindFirstOrThrowArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfileFindManyArgs>(
      args?: SelectSubset<T, ProfileFindManyArgs>
    ): Prisma.PrismaPromise<Array<ProfileGetPayload<T>>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends ProfileCreateArgs>(
      args: SelectSubset<T, ProfileCreateArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Create many Profiles.
     *     @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     *     @example
     *     // Create many Profiles
     *     const profile = await prisma.profile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfileCreateManyArgs>(
      args?: SelectSubset<T, ProfileCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends ProfileDeleteArgs>(
      args: SelectSubset<T, ProfileDeleteArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfileUpdateArgs>(
      args: SelectSubset<T, ProfileUpdateArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfileDeleteManyArgs>(
      args?: SelectSubset<T, ProfileDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfileUpdateManyArgs>(
      args: SelectSubset<T, ProfileUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends ProfileUpsertArgs>(
      args: SelectSubset<T, ProfileUpsertArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProfileClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    customer<T extends CustomerArgs= {}>(args?: Subset<T, CustomerArgs>): Prisma__CustomerClient<CustomerGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Profile base type for findUnique actions
   */
  export type ProfileFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUnique
   */
  export interface ProfileFindUniqueArgs extends ProfileFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile base type for findFirst actions
   */
  export type ProfileFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }

  /**
   * Profile findFirst
   */
  export interface ProfileFindFirstArgs extends ProfileFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile create
   */
  export type ProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }


  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs = {
    /**
     * The data used to create many Profiles.
     */
    data: Enumerable<ProfileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Profile update
   */
  export type ProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
  }


  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }


  /**
   * Profile delete
   */
  export type ProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
  }


  /**
   * Profile without action
   */
  export type ProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
  }



  /**
   * Model customerPreSignup
   */


  export type AggregateCustomerPreSignup = {
    _count: CustomerPreSignupCountAggregateOutputType | null
    _min: CustomerPreSignupMinAggregateOutputType | null
    _max: CustomerPreSignupMaxAggregateOutputType | null
  }

  export type CustomerPreSignupMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    verifyCode: string | null
    appId: string | null
    tenantId: string | null
  }

  export type CustomerPreSignupMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    verifyCode: string | null
    appId: string | null
    tenantId: string | null
  }

  export type CustomerPreSignupCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    email: number
    verifyCode: number
    appId: number
    tenantId: number
    _all: number
  }


  export type CustomerPreSignupMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    verifyCode?: true
    appId?: true
    tenantId?: true
  }

  export type CustomerPreSignupMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    verifyCode?: true
    appId?: true
    tenantId?: true
  }

  export type CustomerPreSignupCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    verifyCode?: true
    appId?: true
    tenantId?: true
    _all?: true
  }

  export type CustomerPreSignupAggregateArgs = {
    /**
     * Filter which customerPreSignup to aggregate.
     */
    where?: customerPreSignupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customerPreSignups to fetch.
     */
    orderBy?: Enumerable<customerPreSignupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: customerPreSignupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customerPreSignups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customerPreSignups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned customerPreSignups
    **/
    _count?: true | CustomerPreSignupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerPreSignupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerPreSignupMaxAggregateInputType
  }

  export type GetCustomerPreSignupAggregateType<T extends CustomerPreSignupAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerPreSignup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerPreSignup[P]>
      : GetScalarType<T[P], AggregateCustomerPreSignup[P]>
  }




  export type CustomerPreSignupGroupByArgs = {
    where?: customerPreSignupWhereInput
    orderBy?: Enumerable<customerPreSignupOrderByWithAggregationInput>
    by: CustomerPreSignupScalarFieldEnum[]
    having?: customerPreSignupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerPreSignupCountAggregateInputType | true
    _min?: CustomerPreSignupMinAggregateInputType
    _max?: CustomerPreSignupMaxAggregateInputType
  }


  export type CustomerPreSignupGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    email: string
    verifyCode: string
    appId: string
    tenantId: string
    _count: CustomerPreSignupCountAggregateOutputType | null
    _min: CustomerPreSignupMinAggregateOutputType | null
    _max: CustomerPreSignupMaxAggregateOutputType | null
  }

  type GetCustomerPreSignupGroupByPayload<T extends CustomerPreSignupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CustomerPreSignupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerPreSignupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerPreSignupGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerPreSignupGroupByOutputType[P]>
        }
      >
    >


  export type customerPreSignupSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    verifyCode?: boolean
    appId?: boolean
    tenantId?: boolean
  }


  export type customerPreSignupGetPayload<S extends boolean | null | undefined | customerPreSignupArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? customerPreSignup :
    S extends undefined ? never :
    S extends { include: any } & (customerPreSignupArgs | customerPreSignupFindManyArgs)
    ? customerPreSignup 
    : S extends { select: any } & (customerPreSignupArgs | customerPreSignupFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof customerPreSignup ? customerPreSignup[P] : never
  } 
      : customerPreSignup


  type customerPreSignupCountArgs = 
    Omit<customerPreSignupFindManyArgs, 'select' | 'include'> & {
      select?: CustomerPreSignupCountAggregateInputType | true
    }

  export interface customerPreSignupDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one CustomerPreSignup that matches the filter.
     * @param {customerPreSignupFindUniqueArgs} args - Arguments to find a CustomerPreSignup
     * @example
     * // Get one CustomerPreSignup
     * const customerPreSignup = await prisma.customerPreSignup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends customerPreSignupFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, customerPreSignupFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'customerPreSignup'> extends True ? Prisma__customerPreSignupClient<customerPreSignupGetPayload<T>> : Prisma__customerPreSignupClient<customerPreSignupGetPayload<T> | null, null>

    /**
     * Find one CustomerPreSignup that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {customerPreSignupFindUniqueOrThrowArgs} args - Arguments to find a CustomerPreSignup
     * @example
     * // Get one CustomerPreSignup
     * const customerPreSignup = await prisma.customerPreSignup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends customerPreSignupFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, customerPreSignupFindUniqueOrThrowArgs>
    ): Prisma__customerPreSignupClient<customerPreSignupGetPayload<T>>

    /**
     * Find the first CustomerPreSignup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerPreSignupFindFirstArgs} args - Arguments to find a CustomerPreSignup
     * @example
     * // Get one CustomerPreSignup
     * const customerPreSignup = await prisma.customerPreSignup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends customerPreSignupFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, customerPreSignupFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'customerPreSignup'> extends True ? Prisma__customerPreSignupClient<customerPreSignupGetPayload<T>> : Prisma__customerPreSignupClient<customerPreSignupGetPayload<T> | null, null>

    /**
     * Find the first CustomerPreSignup that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerPreSignupFindFirstOrThrowArgs} args - Arguments to find a CustomerPreSignup
     * @example
     * // Get one CustomerPreSignup
     * const customerPreSignup = await prisma.customerPreSignup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends customerPreSignupFindFirstOrThrowArgs>(
      args?: SelectSubset<T, customerPreSignupFindFirstOrThrowArgs>
    ): Prisma__customerPreSignupClient<customerPreSignupGetPayload<T>>

    /**
     * Find zero or more CustomerPreSignups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerPreSignupFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerPreSignups
     * const customerPreSignups = await prisma.customerPreSignup.findMany()
     * 
     * // Get first 10 CustomerPreSignups
     * const customerPreSignups = await prisma.customerPreSignup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerPreSignupWithIdOnly = await prisma.customerPreSignup.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends customerPreSignupFindManyArgs>(
      args?: SelectSubset<T, customerPreSignupFindManyArgs>
    ): Prisma.PrismaPromise<Array<customerPreSignupGetPayload<T>>>

    /**
     * Create a CustomerPreSignup.
     * @param {customerPreSignupCreateArgs} args - Arguments to create a CustomerPreSignup.
     * @example
     * // Create one CustomerPreSignup
     * const CustomerPreSignup = await prisma.customerPreSignup.create({
     *   data: {
     *     // ... data to create a CustomerPreSignup
     *   }
     * })
     * 
    **/
    create<T extends customerPreSignupCreateArgs>(
      args: SelectSubset<T, customerPreSignupCreateArgs>
    ): Prisma__customerPreSignupClient<customerPreSignupGetPayload<T>>

    /**
     * Create many CustomerPreSignups.
     *     @param {customerPreSignupCreateManyArgs} args - Arguments to create many CustomerPreSignups.
     *     @example
     *     // Create many CustomerPreSignups
     *     const customerPreSignup = await prisma.customerPreSignup.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends customerPreSignupCreateManyArgs>(
      args?: SelectSubset<T, customerPreSignupCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CustomerPreSignup.
     * @param {customerPreSignupDeleteArgs} args - Arguments to delete one CustomerPreSignup.
     * @example
     * // Delete one CustomerPreSignup
     * const CustomerPreSignup = await prisma.customerPreSignup.delete({
     *   where: {
     *     // ... filter to delete one CustomerPreSignup
     *   }
     * })
     * 
    **/
    delete<T extends customerPreSignupDeleteArgs>(
      args: SelectSubset<T, customerPreSignupDeleteArgs>
    ): Prisma__customerPreSignupClient<customerPreSignupGetPayload<T>>

    /**
     * Update one CustomerPreSignup.
     * @param {customerPreSignupUpdateArgs} args - Arguments to update one CustomerPreSignup.
     * @example
     * // Update one CustomerPreSignup
     * const customerPreSignup = await prisma.customerPreSignup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends customerPreSignupUpdateArgs>(
      args: SelectSubset<T, customerPreSignupUpdateArgs>
    ): Prisma__customerPreSignupClient<customerPreSignupGetPayload<T>>

    /**
     * Delete zero or more CustomerPreSignups.
     * @param {customerPreSignupDeleteManyArgs} args - Arguments to filter CustomerPreSignups to delete.
     * @example
     * // Delete a few CustomerPreSignups
     * const { count } = await prisma.customerPreSignup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends customerPreSignupDeleteManyArgs>(
      args?: SelectSubset<T, customerPreSignupDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerPreSignups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerPreSignupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerPreSignups
     * const customerPreSignup = await prisma.customerPreSignup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends customerPreSignupUpdateManyArgs>(
      args: SelectSubset<T, customerPreSignupUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CustomerPreSignup.
     * @param {customerPreSignupUpsertArgs} args - Arguments to update or create a CustomerPreSignup.
     * @example
     * // Update or create a CustomerPreSignup
     * const customerPreSignup = await prisma.customerPreSignup.upsert({
     *   create: {
     *     // ... data to create a CustomerPreSignup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerPreSignup we want to update
     *   }
     * })
    **/
    upsert<T extends customerPreSignupUpsertArgs>(
      args: SelectSubset<T, customerPreSignupUpsertArgs>
    ): Prisma__customerPreSignupClient<customerPreSignupGetPayload<T>>

    /**
     * Count the number of CustomerPreSignups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerPreSignupCountArgs} args - Arguments to filter CustomerPreSignups to count.
     * @example
     * // Count the number of CustomerPreSignups
     * const count = await prisma.customerPreSignup.count({
     *   where: {
     *     // ... the filter for the CustomerPreSignups we want to count
     *   }
     * })
    **/
    count<T extends customerPreSignupCountArgs>(
      args?: Subset<T, customerPreSignupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerPreSignupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerPreSignup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPreSignupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerPreSignupAggregateArgs>(args: Subset<T, CustomerPreSignupAggregateArgs>): Prisma.PrismaPromise<GetCustomerPreSignupAggregateType<T>>

    /**
     * Group by CustomerPreSignup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPreSignupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerPreSignupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerPreSignupGroupByArgs['orderBy'] }
        : { orderBy?: CustomerPreSignupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerPreSignupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerPreSignupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for customerPreSignup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__customerPreSignupClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * customerPreSignup base type for findUnique actions
   */
  export type customerPreSignupFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the customerPreSignup
     */
    select?: customerPreSignupSelect | null
    /**
     * Filter, which customerPreSignup to fetch.
     */
    where: customerPreSignupWhereUniqueInput
  }

  /**
   * customerPreSignup findUnique
   */
  export interface customerPreSignupFindUniqueArgs extends customerPreSignupFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * customerPreSignup findUniqueOrThrow
   */
  export type customerPreSignupFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the customerPreSignup
     */
    select?: customerPreSignupSelect | null
    /**
     * Filter, which customerPreSignup to fetch.
     */
    where: customerPreSignupWhereUniqueInput
  }


  /**
   * customerPreSignup base type for findFirst actions
   */
  export type customerPreSignupFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the customerPreSignup
     */
    select?: customerPreSignupSelect | null
    /**
     * Filter, which customerPreSignup to fetch.
     */
    where?: customerPreSignupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customerPreSignups to fetch.
     */
    orderBy?: Enumerable<customerPreSignupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customerPreSignups.
     */
    cursor?: customerPreSignupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customerPreSignups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customerPreSignups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customerPreSignups.
     */
    distinct?: Enumerable<CustomerPreSignupScalarFieldEnum>
  }

  /**
   * customerPreSignup findFirst
   */
  export interface customerPreSignupFindFirstArgs extends customerPreSignupFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * customerPreSignup findFirstOrThrow
   */
  export type customerPreSignupFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the customerPreSignup
     */
    select?: customerPreSignupSelect | null
    /**
     * Filter, which customerPreSignup to fetch.
     */
    where?: customerPreSignupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customerPreSignups to fetch.
     */
    orderBy?: Enumerable<customerPreSignupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customerPreSignups.
     */
    cursor?: customerPreSignupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customerPreSignups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customerPreSignups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customerPreSignups.
     */
    distinct?: Enumerable<CustomerPreSignupScalarFieldEnum>
  }


  /**
   * customerPreSignup findMany
   */
  export type customerPreSignupFindManyArgs = {
    /**
     * Select specific fields to fetch from the customerPreSignup
     */
    select?: customerPreSignupSelect | null
    /**
     * Filter, which customerPreSignups to fetch.
     */
    where?: customerPreSignupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customerPreSignups to fetch.
     */
    orderBy?: Enumerable<customerPreSignupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing customerPreSignups.
     */
    cursor?: customerPreSignupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customerPreSignups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customerPreSignups.
     */
    skip?: number
    distinct?: Enumerable<CustomerPreSignupScalarFieldEnum>
  }


  /**
   * customerPreSignup create
   */
  export type customerPreSignupCreateArgs = {
    /**
     * Select specific fields to fetch from the customerPreSignup
     */
    select?: customerPreSignupSelect | null
    /**
     * The data needed to create a customerPreSignup.
     */
    data: XOR<customerPreSignupCreateInput, customerPreSignupUncheckedCreateInput>
  }


  /**
   * customerPreSignup createMany
   */
  export type customerPreSignupCreateManyArgs = {
    /**
     * The data used to create many customerPreSignups.
     */
    data: Enumerable<customerPreSignupCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * customerPreSignup update
   */
  export type customerPreSignupUpdateArgs = {
    /**
     * Select specific fields to fetch from the customerPreSignup
     */
    select?: customerPreSignupSelect | null
    /**
     * The data needed to update a customerPreSignup.
     */
    data: XOR<customerPreSignupUpdateInput, customerPreSignupUncheckedUpdateInput>
    /**
     * Choose, which customerPreSignup to update.
     */
    where: customerPreSignupWhereUniqueInput
  }


  /**
   * customerPreSignup updateMany
   */
  export type customerPreSignupUpdateManyArgs = {
    /**
     * The data used to update customerPreSignups.
     */
    data: XOR<customerPreSignupUpdateManyMutationInput, customerPreSignupUncheckedUpdateManyInput>
    /**
     * Filter which customerPreSignups to update
     */
    where?: customerPreSignupWhereInput
  }


  /**
   * customerPreSignup upsert
   */
  export type customerPreSignupUpsertArgs = {
    /**
     * Select specific fields to fetch from the customerPreSignup
     */
    select?: customerPreSignupSelect | null
    /**
     * The filter to search for the customerPreSignup to update in case it exists.
     */
    where: customerPreSignupWhereUniqueInput
    /**
     * In case the customerPreSignup found by the `where` argument doesn't exist, create a new customerPreSignup with this data.
     */
    create: XOR<customerPreSignupCreateInput, customerPreSignupUncheckedCreateInput>
    /**
     * In case the customerPreSignup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<customerPreSignupUpdateInput, customerPreSignupUncheckedUpdateInput>
  }


  /**
   * customerPreSignup delete
   */
  export type customerPreSignupDeleteArgs = {
    /**
     * Select specific fields to fetch from the customerPreSignup
     */
    select?: customerPreSignupSelect | null
    /**
     * Filter which customerPreSignup to delete.
     */
    where: customerPreSignupWhereUniqueInput
  }


  /**
   * customerPreSignup deleteMany
   */
  export type customerPreSignupDeleteManyArgs = {
    /**
     * Filter which customerPreSignups to delete
     */
    where?: customerPreSignupWhereInput
  }


  /**
   * customerPreSignup without action
   */
  export type customerPreSignupArgs = {
    /**
     * Select specific fields to fetch from the customerPreSignup
     */
    select?: customerPreSignupSelect | null
  }



  /**
   * Model LegacyProfile
   */


  export type AggregateLegacyProfile = {
    _count: LegacyProfileCountAggregateOutputType | null
    _min: LegacyProfileMinAggregateOutputType | null
    _max: LegacyProfileMaxAggregateOutputType | null
  }

  export type LegacyProfileMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    customerId: string | null
    license: string | null
    refreshToken: string | null
  }

  export type LegacyProfileMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    customerId: string | null
    license: string | null
    refreshToken: string | null
  }

  export type LegacyProfileCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    customerId: number
    license: number
    refreshToken: number
    _all: number
  }


  export type LegacyProfileMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    customerId?: true
    license?: true
    refreshToken?: true
  }

  export type LegacyProfileMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    customerId?: true
    license?: true
    refreshToken?: true
  }

  export type LegacyProfileCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    customerId?: true
    license?: true
    refreshToken?: true
    _all?: true
  }

  export type LegacyProfileAggregateArgs = {
    /**
     * Filter which LegacyProfile to aggregate.
     */
    where?: LegacyProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LegacyProfiles to fetch.
     */
    orderBy?: Enumerable<LegacyProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LegacyProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LegacyProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LegacyProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LegacyProfiles
    **/
    _count?: true | LegacyProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LegacyProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LegacyProfileMaxAggregateInputType
  }

  export type GetLegacyProfileAggregateType<T extends LegacyProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateLegacyProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLegacyProfile[P]>
      : GetScalarType<T[P], AggregateLegacyProfile[P]>
  }




  export type LegacyProfileGroupByArgs = {
    where?: LegacyProfileWhereInput
    orderBy?: Enumerable<LegacyProfileOrderByWithAggregationInput>
    by: LegacyProfileScalarFieldEnum[]
    having?: LegacyProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LegacyProfileCountAggregateInputType | true
    _min?: LegacyProfileMinAggregateInputType
    _max?: LegacyProfileMaxAggregateInputType
  }


  export type LegacyProfileGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    customerId: string
    license: string
    refreshToken: string
    _count: LegacyProfileCountAggregateOutputType | null
    _min: LegacyProfileMinAggregateOutputType | null
    _max: LegacyProfileMaxAggregateOutputType | null
  }

  type GetLegacyProfileGroupByPayload<T extends LegacyProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LegacyProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LegacyProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LegacyProfileGroupByOutputType[P]>
            : GetScalarType<T[P], LegacyProfileGroupByOutputType[P]>
        }
      >
    >


  export type LegacyProfileSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customerId?: boolean
    license?: boolean
    refreshToken?: boolean
    customer?: boolean | CustomerArgs
  }


  export type LegacyProfileInclude = {
    customer?: boolean | CustomerArgs
  }

  export type LegacyProfileGetPayload<S extends boolean | null | undefined | LegacyProfileArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LegacyProfile :
    S extends undefined ? never :
    S extends { include: any } & (LegacyProfileArgs | LegacyProfileFindManyArgs)
    ? LegacyProfile  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'customer' ? CustomerGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (LegacyProfileArgs | LegacyProfileFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'customer' ? CustomerGetPayload<S['select'][P]> :  P extends keyof LegacyProfile ? LegacyProfile[P] : never
  } 
      : LegacyProfile


  type LegacyProfileCountArgs = 
    Omit<LegacyProfileFindManyArgs, 'select' | 'include'> & {
      select?: LegacyProfileCountAggregateInputType | true
    }

  export interface LegacyProfileDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one LegacyProfile that matches the filter.
     * @param {LegacyProfileFindUniqueArgs} args - Arguments to find a LegacyProfile
     * @example
     * // Get one LegacyProfile
     * const legacyProfile = await prisma.legacyProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LegacyProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LegacyProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LegacyProfile'> extends True ? Prisma__LegacyProfileClient<LegacyProfileGetPayload<T>> : Prisma__LegacyProfileClient<LegacyProfileGetPayload<T> | null, null>

    /**
     * Find one LegacyProfile that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LegacyProfileFindUniqueOrThrowArgs} args - Arguments to find a LegacyProfile
     * @example
     * // Get one LegacyProfile
     * const legacyProfile = await prisma.legacyProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LegacyProfileFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LegacyProfileFindUniqueOrThrowArgs>
    ): Prisma__LegacyProfileClient<LegacyProfileGetPayload<T>>

    /**
     * Find the first LegacyProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegacyProfileFindFirstArgs} args - Arguments to find a LegacyProfile
     * @example
     * // Get one LegacyProfile
     * const legacyProfile = await prisma.legacyProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LegacyProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LegacyProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LegacyProfile'> extends True ? Prisma__LegacyProfileClient<LegacyProfileGetPayload<T>> : Prisma__LegacyProfileClient<LegacyProfileGetPayload<T> | null, null>

    /**
     * Find the first LegacyProfile that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegacyProfileFindFirstOrThrowArgs} args - Arguments to find a LegacyProfile
     * @example
     * // Get one LegacyProfile
     * const legacyProfile = await prisma.legacyProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LegacyProfileFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LegacyProfileFindFirstOrThrowArgs>
    ): Prisma__LegacyProfileClient<LegacyProfileGetPayload<T>>

    /**
     * Find zero or more LegacyProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegacyProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LegacyProfiles
     * const legacyProfiles = await prisma.legacyProfile.findMany()
     * 
     * // Get first 10 LegacyProfiles
     * const legacyProfiles = await prisma.legacyProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const legacyProfileWithIdOnly = await prisma.legacyProfile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LegacyProfileFindManyArgs>(
      args?: SelectSubset<T, LegacyProfileFindManyArgs>
    ): Prisma.PrismaPromise<Array<LegacyProfileGetPayload<T>>>

    /**
     * Create a LegacyProfile.
     * @param {LegacyProfileCreateArgs} args - Arguments to create a LegacyProfile.
     * @example
     * // Create one LegacyProfile
     * const LegacyProfile = await prisma.legacyProfile.create({
     *   data: {
     *     // ... data to create a LegacyProfile
     *   }
     * })
     * 
    **/
    create<T extends LegacyProfileCreateArgs>(
      args: SelectSubset<T, LegacyProfileCreateArgs>
    ): Prisma__LegacyProfileClient<LegacyProfileGetPayload<T>>

    /**
     * Create many LegacyProfiles.
     *     @param {LegacyProfileCreateManyArgs} args - Arguments to create many LegacyProfiles.
     *     @example
     *     // Create many LegacyProfiles
     *     const legacyProfile = await prisma.legacyProfile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LegacyProfileCreateManyArgs>(
      args?: SelectSubset<T, LegacyProfileCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LegacyProfile.
     * @param {LegacyProfileDeleteArgs} args - Arguments to delete one LegacyProfile.
     * @example
     * // Delete one LegacyProfile
     * const LegacyProfile = await prisma.legacyProfile.delete({
     *   where: {
     *     // ... filter to delete one LegacyProfile
     *   }
     * })
     * 
    **/
    delete<T extends LegacyProfileDeleteArgs>(
      args: SelectSubset<T, LegacyProfileDeleteArgs>
    ): Prisma__LegacyProfileClient<LegacyProfileGetPayload<T>>

    /**
     * Update one LegacyProfile.
     * @param {LegacyProfileUpdateArgs} args - Arguments to update one LegacyProfile.
     * @example
     * // Update one LegacyProfile
     * const legacyProfile = await prisma.legacyProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LegacyProfileUpdateArgs>(
      args: SelectSubset<T, LegacyProfileUpdateArgs>
    ): Prisma__LegacyProfileClient<LegacyProfileGetPayload<T>>

    /**
     * Delete zero or more LegacyProfiles.
     * @param {LegacyProfileDeleteManyArgs} args - Arguments to filter LegacyProfiles to delete.
     * @example
     * // Delete a few LegacyProfiles
     * const { count } = await prisma.legacyProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LegacyProfileDeleteManyArgs>(
      args?: SelectSubset<T, LegacyProfileDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LegacyProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegacyProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LegacyProfiles
     * const legacyProfile = await prisma.legacyProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LegacyProfileUpdateManyArgs>(
      args: SelectSubset<T, LegacyProfileUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LegacyProfile.
     * @param {LegacyProfileUpsertArgs} args - Arguments to update or create a LegacyProfile.
     * @example
     * // Update or create a LegacyProfile
     * const legacyProfile = await prisma.legacyProfile.upsert({
     *   create: {
     *     // ... data to create a LegacyProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LegacyProfile we want to update
     *   }
     * })
    **/
    upsert<T extends LegacyProfileUpsertArgs>(
      args: SelectSubset<T, LegacyProfileUpsertArgs>
    ): Prisma__LegacyProfileClient<LegacyProfileGetPayload<T>>

    /**
     * Count the number of LegacyProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegacyProfileCountArgs} args - Arguments to filter LegacyProfiles to count.
     * @example
     * // Count the number of LegacyProfiles
     * const count = await prisma.legacyProfile.count({
     *   where: {
     *     // ... the filter for the LegacyProfiles we want to count
     *   }
     * })
    **/
    count<T extends LegacyProfileCountArgs>(
      args?: Subset<T, LegacyProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LegacyProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LegacyProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegacyProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LegacyProfileAggregateArgs>(args: Subset<T, LegacyProfileAggregateArgs>): Prisma.PrismaPromise<GetLegacyProfileAggregateType<T>>

    /**
     * Group by LegacyProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LegacyProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LegacyProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LegacyProfileGroupByArgs['orderBy'] }
        : { orderBy?: LegacyProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LegacyProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLegacyProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for LegacyProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LegacyProfileClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    customer<T extends CustomerArgs= {}>(args?: Subset<T, CustomerArgs>): Prisma__CustomerClient<CustomerGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * LegacyProfile base type for findUnique actions
   */
  export type LegacyProfileFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the LegacyProfile
     */
    select?: LegacyProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LegacyProfileInclude | null
    /**
     * Filter, which LegacyProfile to fetch.
     */
    where: LegacyProfileWhereUniqueInput
  }

  /**
   * LegacyProfile findUnique
   */
  export interface LegacyProfileFindUniqueArgs extends LegacyProfileFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LegacyProfile findUniqueOrThrow
   */
  export type LegacyProfileFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LegacyProfile
     */
    select?: LegacyProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LegacyProfileInclude | null
    /**
     * Filter, which LegacyProfile to fetch.
     */
    where: LegacyProfileWhereUniqueInput
  }


  /**
   * LegacyProfile base type for findFirst actions
   */
  export type LegacyProfileFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the LegacyProfile
     */
    select?: LegacyProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LegacyProfileInclude | null
    /**
     * Filter, which LegacyProfile to fetch.
     */
    where?: LegacyProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LegacyProfiles to fetch.
     */
    orderBy?: Enumerable<LegacyProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LegacyProfiles.
     */
    cursor?: LegacyProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LegacyProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LegacyProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LegacyProfiles.
     */
    distinct?: Enumerable<LegacyProfileScalarFieldEnum>
  }

  /**
   * LegacyProfile findFirst
   */
  export interface LegacyProfileFindFirstArgs extends LegacyProfileFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LegacyProfile findFirstOrThrow
   */
  export type LegacyProfileFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LegacyProfile
     */
    select?: LegacyProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LegacyProfileInclude | null
    /**
     * Filter, which LegacyProfile to fetch.
     */
    where?: LegacyProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LegacyProfiles to fetch.
     */
    orderBy?: Enumerable<LegacyProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LegacyProfiles.
     */
    cursor?: LegacyProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LegacyProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LegacyProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LegacyProfiles.
     */
    distinct?: Enumerable<LegacyProfileScalarFieldEnum>
  }


  /**
   * LegacyProfile findMany
   */
  export type LegacyProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the LegacyProfile
     */
    select?: LegacyProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LegacyProfileInclude | null
    /**
     * Filter, which LegacyProfiles to fetch.
     */
    where?: LegacyProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LegacyProfiles to fetch.
     */
    orderBy?: Enumerable<LegacyProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LegacyProfiles.
     */
    cursor?: LegacyProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LegacyProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LegacyProfiles.
     */
    skip?: number
    distinct?: Enumerable<LegacyProfileScalarFieldEnum>
  }


  /**
   * LegacyProfile create
   */
  export type LegacyProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the LegacyProfile
     */
    select?: LegacyProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LegacyProfileInclude | null
    /**
     * The data needed to create a LegacyProfile.
     */
    data: XOR<LegacyProfileCreateInput, LegacyProfileUncheckedCreateInput>
  }


  /**
   * LegacyProfile createMany
   */
  export type LegacyProfileCreateManyArgs = {
    /**
     * The data used to create many LegacyProfiles.
     */
    data: Enumerable<LegacyProfileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * LegacyProfile update
   */
  export type LegacyProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the LegacyProfile
     */
    select?: LegacyProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LegacyProfileInclude | null
    /**
     * The data needed to update a LegacyProfile.
     */
    data: XOR<LegacyProfileUpdateInput, LegacyProfileUncheckedUpdateInput>
    /**
     * Choose, which LegacyProfile to update.
     */
    where: LegacyProfileWhereUniqueInput
  }


  /**
   * LegacyProfile updateMany
   */
  export type LegacyProfileUpdateManyArgs = {
    /**
     * The data used to update LegacyProfiles.
     */
    data: XOR<LegacyProfileUpdateManyMutationInput, LegacyProfileUncheckedUpdateManyInput>
    /**
     * Filter which LegacyProfiles to update
     */
    where?: LegacyProfileWhereInput
  }


  /**
   * LegacyProfile upsert
   */
  export type LegacyProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the LegacyProfile
     */
    select?: LegacyProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LegacyProfileInclude | null
    /**
     * The filter to search for the LegacyProfile to update in case it exists.
     */
    where: LegacyProfileWhereUniqueInput
    /**
     * In case the LegacyProfile found by the `where` argument doesn't exist, create a new LegacyProfile with this data.
     */
    create: XOR<LegacyProfileCreateInput, LegacyProfileUncheckedCreateInput>
    /**
     * In case the LegacyProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LegacyProfileUpdateInput, LegacyProfileUncheckedUpdateInput>
  }


  /**
   * LegacyProfile delete
   */
  export type LegacyProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the LegacyProfile
     */
    select?: LegacyProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LegacyProfileInclude | null
    /**
     * Filter which LegacyProfile to delete.
     */
    where: LegacyProfileWhereUniqueInput
  }


  /**
   * LegacyProfile deleteMany
   */
  export type LegacyProfileDeleteManyArgs = {
    /**
     * Filter which LegacyProfiles to delete
     */
    where?: LegacyProfileWhereInput
  }


  /**
   * LegacyProfile without action
   */
  export type LegacyProfileArgs = {
    /**
     * Select specific fields to fetch from the LegacyProfile
     */
    select?: LegacyProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LegacyProfileInclude | null
  }



  /**
   * Model ProductSnapshot
   */


  export type AggregateProductSnapshot = {
    _count: ProductSnapshotCountAggregateOutputType | null
    _avg: ProductSnapshotAvgAggregateOutputType | null
    _sum: ProductSnapshotSumAggregateOutputType | null
    _min: ProductSnapshotMinAggregateOutputType | null
    _max: ProductSnapshotMaxAggregateOutputType | null
  }

  export type ProductSnapshotAvgAggregateOutputType = {
    snapshotPrice: Decimal | null
  }

  export type ProductSnapshotSumAggregateOutputType = {
    snapshotPrice: Decimal | null
  }

  export type ProductSnapshotMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    snapshotPrice: Decimal | null
    orderId: string | null
    productId: string | null
    tenantId: string | null
  }

  export type ProductSnapshotMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    snapshotPrice: Decimal | null
    orderId: string | null
    productId: string | null
    tenantId: string | null
  }

  export type ProductSnapshotCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    snapshotPrice: number
    orderId: number
    productId: number
    tenantId: number
    _all: number
  }


  export type ProductSnapshotAvgAggregateInputType = {
    snapshotPrice?: true
  }

  export type ProductSnapshotSumAggregateInputType = {
    snapshotPrice?: true
  }

  export type ProductSnapshotMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    snapshotPrice?: true
    orderId?: true
    productId?: true
    tenantId?: true
  }

  export type ProductSnapshotMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    snapshotPrice?: true
    orderId?: true
    productId?: true
    tenantId?: true
  }

  export type ProductSnapshotCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    snapshotPrice?: true
    orderId?: true
    productId?: true
    tenantId?: true
    _all?: true
  }

  export type ProductSnapshotAggregateArgs = {
    /**
     * Filter which ProductSnapshot to aggregate.
     */
    where?: ProductSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSnapshots to fetch.
     */
    orderBy?: Enumerable<ProductSnapshotOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductSnapshots
    **/
    _count?: true | ProductSnapshotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductSnapshotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSnapshotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductSnapshotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductSnapshotMaxAggregateInputType
  }

  export type GetProductSnapshotAggregateType<T extends ProductSnapshotAggregateArgs> = {
        [P in keyof T & keyof AggregateProductSnapshot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductSnapshot[P]>
      : GetScalarType<T[P], AggregateProductSnapshot[P]>
  }




  export type ProductSnapshotGroupByArgs = {
    where?: ProductSnapshotWhereInput
    orderBy?: Enumerable<ProductSnapshotOrderByWithAggregationInput>
    by: ProductSnapshotScalarFieldEnum[]
    having?: ProductSnapshotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductSnapshotCountAggregateInputType | true
    _avg?: ProductSnapshotAvgAggregateInputType
    _sum?: ProductSnapshotSumAggregateInputType
    _min?: ProductSnapshotMinAggregateInputType
    _max?: ProductSnapshotMaxAggregateInputType
  }


  export type ProductSnapshotGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    snapshotPrice: Decimal
    orderId: string
    productId: string
    tenantId: string
    _count: ProductSnapshotCountAggregateOutputType | null
    _avg: ProductSnapshotAvgAggregateOutputType | null
    _sum: ProductSnapshotSumAggregateOutputType | null
    _min: ProductSnapshotMinAggregateOutputType | null
    _max: ProductSnapshotMaxAggregateOutputType | null
  }

  type GetProductSnapshotGroupByPayload<T extends ProductSnapshotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProductSnapshotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductSnapshotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductSnapshotGroupByOutputType[P]>
            : GetScalarType<T[P], ProductSnapshotGroupByOutputType[P]>
        }
      >
    >


  export type ProductSnapshotSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    snapshotPrice?: boolean
    orderId?: boolean
    productId?: boolean
    tenantId?: boolean
    order?: boolean | OrderArgs
    product?: boolean | ProductArgs
  }


  export type ProductSnapshotInclude = {
    order?: boolean | OrderArgs
    product?: boolean | ProductArgs
  }

  export type ProductSnapshotGetPayload<S extends boolean | null | undefined | ProductSnapshotArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProductSnapshot :
    S extends undefined ? never :
    S extends { include: any } & (ProductSnapshotArgs | ProductSnapshotFindManyArgs)
    ? ProductSnapshot  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'order' ? OrderGetPayload<S['include'][P]> :
        P extends 'product' ? ProductGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ProductSnapshotArgs | ProductSnapshotFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'order' ? OrderGetPayload<S['select'][P]> :
        P extends 'product' ? ProductGetPayload<S['select'][P]> :  P extends keyof ProductSnapshot ? ProductSnapshot[P] : never
  } 
      : ProductSnapshot


  type ProductSnapshotCountArgs = 
    Omit<ProductSnapshotFindManyArgs, 'select' | 'include'> & {
      select?: ProductSnapshotCountAggregateInputType | true
    }

  export interface ProductSnapshotDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ProductSnapshot that matches the filter.
     * @param {ProductSnapshotFindUniqueArgs} args - Arguments to find a ProductSnapshot
     * @example
     * // Get one ProductSnapshot
     * const productSnapshot = await prisma.productSnapshot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductSnapshotFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProductSnapshotFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ProductSnapshot'> extends True ? Prisma__ProductSnapshotClient<ProductSnapshotGetPayload<T>> : Prisma__ProductSnapshotClient<ProductSnapshotGetPayload<T> | null, null>

    /**
     * Find one ProductSnapshot that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductSnapshotFindUniqueOrThrowArgs} args - Arguments to find a ProductSnapshot
     * @example
     * // Get one ProductSnapshot
     * const productSnapshot = await prisma.productSnapshot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductSnapshotFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProductSnapshotFindUniqueOrThrowArgs>
    ): Prisma__ProductSnapshotClient<ProductSnapshotGetPayload<T>>

    /**
     * Find the first ProductSnapshot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSnapshotFindFirstArgs} args - Arguments to find a ProductSnapshot
     * @example
     * // Get one ProductSnapshot
     * const productSnapshot = await prisma.productSnapshot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductSnapshotFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProductSnapshotFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ProductSnapshot'> extends True ? Prisma__ProductSnapshotClient<ProductSnapshotGetPayload<T>> : Prisma__ProductSnapshotClient<ProductSnapshotGetPayload<T> | null, null>

    /**
     * Find the first ProductSnapshot that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSnapshotFindFirstOrThrowArgs} args - Arguments to find a ProductSnapshot
     * @example
     * // Get one ProductSnapshot
     * const productSnapshot = await prisma.productSnapshot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductSnapshotFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProductSnapshotFindFirstOrThrowArgs>
    ): Prisma__ProductSnapshotClient<ProductSnapshotGetPayload<T>>

    /**
     * Find zero or more ProductSnapshots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSnapshotFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductSnapshots
     * const productSnapshots = await prisma.productSnapshot.findMany()
     * 
     * // Get first 10 ProductSnapshots
     * const productSnapshots = await prisma.productSnapshot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productSnapshotWithIdOnly = await prisma.productSnapshot.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductSnapshotFindManyArgs>(
      args?: SelectSubset<T, ProductSnapshotFindManyArgs>
    ): Prisma.PrismaPromise<Array<ProductSnapshotGetPayload<T>>>

    /**
     * Create a ProductSnapshot.
     * @param {ProductSnapshotCreateArgs} args - Arguments to create a ProductSnapshot.
     * @example
     * // Create one ProductSnapshot
     * const ProductSnapshot = await prisma.productSnapshot.create({
     *   data: {
     *     // ... data to create a ProductSnapshot
     *   }
     * })
     * 
    **/
    create<T extends ProductSnapshotCreateArgs>(
      args: SelectSubset<T, ProductSnapshotCreateArgs>
    ): Prisma__ProductSnapshotClient<ProductSnapshotGetPayload<T>>

    /**
     * Create many ProductSnapshots.
     *     @param {ProductSnapshotCreateManyArgs} args - Arguments to create many ProductSnapshots.
     *     @example
     *     // Create many ProductSnapshots
     *     const productSnapshot = await prisma.productSnapshot.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductSnapshotCreateManyArgs>(
      args?: SelectSubset<T, ProductSnapshotCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductSnapshot.
     * @param {ProductSnapshotDeleteArgs} args - Arguments to delete one ProductSnapshot.
     * @example
     * // Delete one ProductSnapshot
     * const ProductSnapshot = await prisma.productSnapshot.delete({
     *   where: {
     *     // ... filter to delete one ProductSnapshot
     *   }
     * })
     * 
    **/
    delete<T extends ProductSnapshotDeleteArgs>(
      args: SelectSubset<T, ProductSnapshotDeleteArgs>
    ): Prisma__ProductSnapshotClient<ProductSnapshotGetPayload<T>>

    /**
     * Update one ProductSnapshot.
     * @param {ProductSnapshotUpdateArgs} args - Arguments to update one ProductSnapshot.
     * @example
     * // Update one ProductSnapshot
     * const productSnapshot = await prisma.productSnapshot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductSnapshotUpdateArgs>(
      args: SelectSubset<T, ProductSnapshotUpdateArgs>
    ): Prisma__ProductSnapshotClient<ProductSnapshotGetPayload<T>>

    /**
     * Delete zero or more ProductSnapshots.
     * @param {ProductSnapshotDeleteManyArgs} args - Arguments to filter ProductSnapshots to delete.
     * @example
     * // Delete a few ProductSnapshots
     * const { count } = await prisma.productSnapshot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductSnapshotDeleteManyArgs>(
      args?: SelectSubset<T, ProductSnapshotDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSnapshotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductSnapshots
     * const productSnapshot = await prisma.productSnapshot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductSnapshotUpdateManyArgs>(
      args: SelectSubset<T, ProductSnapshotUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductSnapshot.
     * @param {ProductSnapshotUpsertArgs} args - Arguments to update or create a ProductSnapshot.
     * @example
     * // Update or create a ProductSnapshot
     * const productSnapshot = await prisma.productSnapshot.upsert({
     *   create: {
     *     // ... data to create a ProductSnapshot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductSnapshot we want to update
     *   }
     * })
    **/
    upsert<T extends ProductSnapshotUpsertArgs>(
      args: SelectSubset<T, ProductSnapshotUpsertArgs>
    ): Prisma__ProductSnapshotClient<ProductSnapshotGetPayload<T>>

    /**
     * Count the number of ProductSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSnapshotCountArgs} args - Arguments to filter ProductSnapshots to count.
     * @example
     * // Count the number of ProductSnapshots
     * const count = await prisma.productSnapshot.count({
     *   where: {
     *     // ... the filter for the ProductSnapshots we want to count
     *   }
     * })
    **/
    count<T extends ProductSnapshotCountArgs>(
      args?: Subset<T, ProductSnapshotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductSnapshotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSnapshotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductSnapshotAggregateArgs>(args: Subset<T, ProductSnapshotAggregateArgs>): Prisma.PrismaPromise<GetProductSnapshotAggregateType<T>>

    /**
     * Group by ProductSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSnapshotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductSnapshotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductSnapshotGroupByArgs['orderBy'] }
        : { orderBy?: ProductSnapshotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductSnapshotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductSnapshotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductSnapshot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductSnapshotClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    order<T extends OrderArgs= {}>(args?: Subset<T, OrderArgs>): Prisma__OrderClient<OrderGetPayload<T> | Null>;

    product<T extends ProductArgs= {}>(args?: Subset<T, ProductArgs>): Prisma__ProductClient<ProductGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ProductSnapshot base type for findUnique actions
   */
  export type ProductSnapshotFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ProductSnapshot
     */
    select?: ProductSnapshotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSnapshotInclude | null
    /**
     * Filter, which ProductSnapshot to fetch.
     */
    where: ProductSnapshotWhereUniqueInput
  }

  /**
   * ProductSnapshot findUnique
   */
  export interface ProductSnapshotFindUniqueArgs extends ProductSnapshotFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ProductSnapshot findUniqueOrThrow
   */
  export type ProductSnapshotFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ProductSnapshot
     */
    select?: ProductSnapshotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSnapshotInclude | null
    /**
     * Filter, which ProductSnapshot to fetch.
     */
    where: ProductSnapshotWhereUniqueInput
  }


  /**
   * ProductSnapshot base type for findFirst actions
   */
  export type ProductSnapshotFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ProductSnapshot
     */
    select?: ProductSnapshotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSnapshotInclude | null
    /**
     * Filter, which ProductSnapshot to fetch.
     */
    where?: ProductSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSnapshots to fetch.
     */
    orderBy?: Enumerable<ProductSnapshotOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductSnapshots.
     */
    cursor?: ProductSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductSnapshots.
     */
    distinct?: Enumerable<ProductSnapshotScalarFieldEnum>
  }

  /**
   * ProductSnapshot findFirst
   */
  export interface ProductSnapshotFindFirstArgs extends ProductSnapshotFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ProductSnapshot findFirstOrThrow
   */
  export type ProductSnapshotFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ProductSnapshot
     */
    select?: ProductSnapshotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSnapshotInclude | null
    /**
     * Filter, which ProductSnapshot to fetch.
     */
    where?: ProductSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSnapshots to fetch.
     */
    orderBy?: Enumerable<ProductSnapshotOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductSnapshots.
     */
    cursor?: ProductSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductSnapshots.
     */
    distinct?: Enumerable<ProductSnapshotScalarFieldEnum>
  }


  /**
   * ProductSnapshot findMany
   */
  export type ProductSnapshotFindManyArgs = {
    /**
     * Select specific fields to fetch from the ProductSnapshot
     */
    select?: ProductSnapshotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSnapshotInclude | null
    /**
     * Filter, which ProductSnapshots to fetch.
     */
    where?: ProductSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSnapshots to fetch.
     */
    orderBy?: Enumerable<ProductSnapshotOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductSnapshots.
     */
    cursor?: ProductSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSnapshots.
     */
    skip?: number
    distinct?: Enumerable<ProductSnapshotScalarFieldEnum>
  }


  /**
   * ProductSnapshot create
   */
  export type ProductSnapshotCreateArgs = {
    /**
     * Select specific fields to fetch from the ProductSnapshot
     */
    select?: ProductSnapshotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSnapshotInclude | null
    /**
     * The data needed to create a ProductSnapshot.
     */
    data: XOR<ProductSnapshotCreateInput, ProductSnapshotUncheckedCreateInput>
  }


  /**
   * ProductSnapshot createMany
   */
  export type ProductSnapshotCreateManyArgs = {
    /**
     * The data used to create many ProductSnapshots.
     */
    data: Enumerable<ProductSnapshotCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ProductSnapshot update
   */
  export type ProductSnapshotUpdateArgs = {
    /**
     * Select specific fields to fetch from the ProductSnapshot
     */
    select?: ProductSnapshotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSnapshotInclude | null
    /**
     * The data needed to update a ProductSnapshot.
     */
    data: XOR<ProductSnapshotUpdateInput, ProductSnapshotUncheckedUpdateInput>
    /**
     * Choose, which ProductSnapshot to update.
     */
    where: ProductSnapshotWhereUniqueInput
  }


  /**
   * ProductSnapshot updateMany
   */
  export type ProductSnapshotUpdateManyArgs = {
    /**
     * The data used to update ProductSnapshots.
     */
    data: XOR<ProductSnapshotUpdateManyMutationInput, ProductSnapshotUncheckedUpdateManyInput>
    /**
     * Filter which ProductSnapshots to update
     */
    where?: ProductSnapshotWhereInput
  }


  /**
   * ProductSnapshot upsert
   */
  export type ProductSnapshotUpsertArgs = {
    /**
     * Select specific fields to fetch from the ProductSnapshot
     */
    select?: ProductSnapshotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSnapshotInclude | null
    /**
     * The filter to search for the ProductSnapshot to update in case it exists.
     */
    where: ProductSnapshotWhereUniqueInput
    /**
     * In case the ProductSnapshot found by the `where` argument doesn't exist, create a new ProductSnapshot with this data.
     */
    create: XOR<ProductSnapshotCreateInput, ProductSnapshotUncheckedCreateInput>
    /**
     * In case the ProductSnapshot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductSnapshotUpdateInput, ProductSnapshotUncheckedUpdateInput>
  }


  /**
   * ProductSnapshot delete
   */
  export type ProductSnapshotDeleteArgs = {
    /**
     * Select specific fields to fetch from the ProductSnapshot
     */
    select?: ProductSnapshotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSnapshotInclude | null
    /**
     * Filter which ProductSnapshot to delete.
     */
    where: ProductSnapshotWhereUniqueInput
  }


  /**
   * ProductSnapshot deleteMany
   */
  export type ProductSnapshotDeleteManyArgs = {
    /**
     * Filter which ProductSnapshots to delete
     */
    where?: ProductSnapshotWhereInput
  }


  /**
   * ProductSnapshot without action
   */
  export type ProductSnapshotArgs = {
    /**
     * Select specific fields to fetch from the ProductSnapshot
     */
    select?: ProductSnapshotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSnapshotInclude | null
  }



  /**
   * Model Order
   */


  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    serial: number | null
  }

  export type OrderSumAggregateOutputType = {
    serial: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    serial: number | null
    status: OrderStatus | null
    customerId: string | null
    appId: string | null
    isDeleted: boolean | null
    tenantId: string | null
  }

  export type OrderMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    serial: number | null
    status: OrderStatus | null
    customerId: string | null
    appId: string | null
    isDeleted: boolean | null
    tenantId: string | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    serial: number
    status: number
    customerId: number
    appId: number
    isDeleted: number
    tenantId: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    serial?: true
  }

  export type OrderSumAggregateInputType = {
    serial?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    serial?: true
    status?: true
    customerId?: true
    appId?: true
    isDeleted?: true
    tenantId?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    serial?: true
    status?: true
    customerId?: true
    appId?: true
    isDeleted?: true
    tenantId?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    serial?: true
    status?: true
    customerId?: true
    appId?: true
    isDeleted?: true
    tenantId?: true
    _all?: true
  }

  export type OrderAggregateArgs = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: Enumerable<OrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs = {
    where?: OrderWhereInput
    orderBy?: Enumerable<OrderOrderByWithAggregationInput>
    by: OrderScalarFieldEnum[]
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }


  export type OrderGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    serial: number
    status: OrderStatus
    customerId: string
    appId: string
    isDeleted: boolean | null
    tenantId: string
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serial?: boolean
    status?: boolean
    customerId?: boolean
    appId?: boolean
    isDeleted?: boolean
    tenantId?: boolean
    customer?: boolean | CustomerArgs
    pay?: boolean | PayArgs
    productSnapshots?: boolean | Order$productSnapshotsArgs
    App?: boolean | AppArgs
    _count?: boolean | OrderCountOutputTypeArgs
  }


  export type OrderInclude = {
    customer?: boolean | CustomerArgs
    pay?: boolean | PayArgs
    productSnapshots?: boolean | Order$productSnapshotsArgs
    App?: boolean | AppArgs
    _count?: boolean | OrderCountOutputTypeArgs
  }

  export type OrderGetPayload<S extends boolean | null | undefined | OrderArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Order :
    S extends undefined ? never :
    S extends { include: any } & (OrderArgs | OrderFindManyArgs)
    ? Order  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'customer' ? CustomerGetPayload<S['include'][P]> :
        P extends 'pay' ? PayGetPayload<S['include'][P]> | null :
        P extends 'productSnapshots' ? Array < ProductSnapshotGetPayload<S['include'][P]>>  :
        P extends 'App' ? AppGetPayload<S['include'][P]> :
        P extends '_count' ? OrderCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (OrderArgs | OrderFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'customer' ? CustomerGetPayload<S['select'][P]> :
        P extends 'pay' ? PayGetPayload<S['select'][P]> | null :
        P extends 'productSnapshots' ? Array < ProductSnapshotGetPayload<S['select'][P]>>  :
        P extends 'App' ? AppGetPayload<S['select'][P]> :
        P extends '_count' ? OrderCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Order ? Order[P] : never
  } 
      : Order


  type OrderCountArgs = 
    Omit<OrderFindManyArgs, 'select' | 'include'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrderFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrderFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Order'> extends True ? Prisma__OrderClient<OrderGetPayload<T>> : Prisma__OrderClient<OrderGetPayload<T> | null, null>

    /**
     * Find one Order that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, OrderFindUniqueOrThrowArgs>
    ): Prisma__OrderClient<OrderGetPayload<T>>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrderFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrderFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Order'> extends True ? Prisma__OrderClient<OrderGetPayload<T>> : Prisma__OrderClient<OrderGetPayload<T> | null, null>

    /**
     * Find the first Order that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(
      args?: SelectSubset<T, OrderFindFirstOrThrowArgs>
    ): Prisma__OrderClient<OrderGetPayload<T>>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrderFindManyArgs>(
      args?: SelectSubset<T, OrderFindManyArgs>
    ): Prisma.PrismaPromise<Array<OrderGetPayload<T>>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
    **/
    create<T extends OrderCreateArgs>(
      args: SelectSubset<T, OrderCreateArgs>
    ): Prisma__OrderClient<OrderGetPayload<T>>

    /**
     * Create many Orders.
     *     @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     *     @example
     *     // Create many Orders
     *     const order = await prisma.order.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrderCreateManyArgs>(
      args?: SelectSubset<T, OrderCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
    **/
    delete<T extends OrderDeleteArgs>(
      args: SelectSubset<T, OrderDeleteArgs>
    ): Prisma__OrderClient<OrderGetPayload<T>>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrderUpdateArgs>(
      args: SelectSubset<T, OrderUpdateArgs>
    ): Prisma__OrderClient<OrderGetPayload<T>>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrderDeleteManyArgs>(
      args?: SelectSubset<T, OrderDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrderUpdateManyArgs>(
      args: SelectSubset<T, OrderUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
    **/
    upsert<T extends OrderUpsertArgs>(
      args: SelectSubset<T, OrderUpsertArgs>
    ): Prisma__OrderClient<OrderGetPayload<T>>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrderClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    customer<T extends CustomerArgs= {}>(args?: Subset<T, CustomerArgs>): Prisma__CustomerClient<CustomerGetPayload<T> | Null>;

    pay<T extends PayArgs= {}>(args?: Subset<T, PayArgs>): Prisma__PayClient<PayGetPayload<T> | Null>;

    productSnapshots<T extends Order$productSnapshotsArgs= {}>(args?: Subset<T, Order$productSnapshotsArgs>): Prisma.PrismaPromise<Array<ProductSnapshotGetPayload<T>>| Null>;

    App<T extends AppArgs= {}>(args?: Subset<T, AppArgs>): Prisma__AppClient<AppGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Order base type for findUnique actions
   */
  export type OrderFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUnique
   */
  export interface OrderFindUniqueArgs extends OrderFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order base type for findFirst actions
   */
  export type OrderFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: Enumerable<OrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: Enumerable<OrderScalarFieldEnum>
  }

  /**
   * Order findFirst
   */
  export interface OrderFindFirstArgs extends OrderFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: Enumerable<OrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * Order findMany
   */
  export type OrderFindManyArgs = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: Enumerable<OrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: Enumerable<OrderScalarFieldEnum>
  }


  /**
   * Order create
   */
  export type OrderCreateArgs = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }


  /**
   * Order createMany
   */
  export type OrderCreateManyArgs = {
    /**
     * The data used to create many Orders.
     */
    data: Enumerable<OrderCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Order update
   */
  export type OrderUpdateArgs = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
  }


  /**
   * Order upsert
   */
  export type OrderUpsertArgs = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }


  /**
   * Order delete
   */
  export type OrderDeleteArgs = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }


  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
  }


  /**
   * Order.productSnapshots
   */
  export type Order$productSnapshotsArgs = {
    /**
     * Select specific fields to fetch from the ProductSnapshot
     */
    select?: ProductSnapshotSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSnapshotInclude | null
    where?: ProductSnapshotWhereInput
    orderBy?: Enumerable<ProductSnapshotOrderByWithRelationInput>
    cursor?: ProductSnapshotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductSnapshotScalarFieldEnum>
  }


  /**
   * Order without action
   */
  export type OrderArgs = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrderInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AppScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    hashedAppToken: 'hashedAppToken',
    hashedPassword: 'hashedPassword',
    hashedRefreshToken: 'hashedRefreshToken',
    recoveryCode: 'recoveryCode',
    recoveryToken: 'recoveryToken',
    displayName: 'displayName',
    description: 'description',
    isDeleted: 'isDeleted',
    tenantId: 'tenantId'
  };

  export type AppScalarFieldEnum = (typeof AppScalarFieldEnum)[keyof typeof AppScalarFieldEnum]


  export const ArticleScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    link: 'link',
    source: 'source',
    title: 'title',
    image: 'image',
    excerpt: 'excerpt',
    profileId: 'profileId'
  };

  export type ArticleScalarFieldEnum = (typeof ArticleScalarFieldEnum)[keyof typeof ArticleScalarFieldEnum]


  export const CustomerPreSignupScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    email: 'email',
    verifyCode: 'verifyCode',
    appId: 'appId',
    tenantId: 'tenantId'
  };

  export type CustomerPreSignupScalarFieldEnum = (typeof CustomerPreSignupScalarFieldEnum)[keyof typeof CustomerPreSignupScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    appId: 'appId',
    email: 'email',
    hashedPassword: 'hashedPassword',
    hashedRefreshToken: 'hashedRefreshToken',
    recoveryCode: 'recoveryCode',
    recoveryToken: 'recoveryToken',
    isDeleted: 'isDeleted',
    tenantId: 'tenantId'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const JYFreeCountScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    cycle: 'cycle',
    count: 'count',
    profileId: 'profileId'
  };

  export type JYFreeCountScalarFieldEnum = (typeof JYFreeCountScalarFieldEnum)[keyof typeof JYFreeCountScalarFieldEnum]


  export const JYProfileScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type JYProfileScalarFieldEnum = (typeof JYProfileScalarFieldEnum)[keyof typeof JYProfileScalarFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const LegacyProfileScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    customerId: 'customerId',
    license: 'license',
    refreshToken: 'refreshToken'
  };

  export type LegacyProfileScalarFieldEnum = (typeof LegacyProfileScalarFieldEnum)[keyof typeof LegacyProfileScalarFieldEnum]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const OrderScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    serial: 'serial',
    status: 'status',
    customerId: 'customerId',
    appId: 'appId',
    isDeleted: 'isDeleted',
    tenantId: 'tenantId'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const PayScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    status: 'status',
    orderId: 'orderId',
    transactionId: 'transactionId',
    tenantId: 'tenantId'
  };

  export type PayScalarFieldEnum = (typeof PayScalarFieldEnum)[keyof typeof PayScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    price: 'price',
    productType: 'productType',
    plan: 'plan',
    amount: 'amount',
    extendedDescriptionData: 'extendedDescriptionData',
    fileSize: 'fileSize',
    storeDuration: 'storeDuration',
    hasAds: 'hasAds',
    tecSupport: 'tecSupport',
    validityPeriod: 'validityPeriod',
    appId: 'appId',
    isDeleted: 'isDeleted',
    tenantId: 'tenantId',
    restricted: 'restricted'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ProductSnapshotScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    snapshotPrice: 'snapshotPrice',
    orderId: 'orderId',
    productId: 'productId',
    tenantId: 'tenantId'
  };

  export type ProductSnapshotScalarFieldEnum = (typeof ProductSnapshotScalarFieldEnum)[keyof typeof ProductSnapshotScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    customerId: 'customerId',
    productType: 'productType',
    plan: 'plan',
    amount: 'amount',
    expireAt: 'expireAt',
    tenantId: 'tenantId'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    question: 'question',
    answer: 'answer',
    success: 'success',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TenantPreSignupScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    email: 'email',
    verifyCode: 'verifyCode'
  };

  export type TenantPreSignupScalarFieldEnum = (typeof TenantPreSignupScalarFieldEnum)[keyof typeof TenantPreSignupScalarFieldEnum]


  export const TenantScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    email: 'email',
    hashedPassword: 'hashedPassword',
    hashedRefreshToken: 'hashedRefreshToken',
    recoveryCode: 'recoveryCode',
    recoveryToken: 'recoveryToken',
    role: 'role'
  };

  export type TenantScalarFieldEnum = (typeof TenantScalarFieldEnum)[keyof typeof TenantScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const WeixinProfileScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    unionid: 'unionid',
    loginOpenid: 'loginOpenid',
    headimgurl: 'headimgurl',
    nickname: 'nickname',
    sex: 'sex',
    customerId: 'customerId',
    tenantId: 'tenantId'
  };

  export type WeixinProfileScalarFieldEnum = (typeof WeixinProfileScalarFieldEnum)[keyof typeof WeixinProfileScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type AppWhereInput = {
    AND?: Enumerable<AppWhereInput>
    OR?: Enumerable<AppWhereInput>
    NOT?: Enumerable<AppWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    hashedAppToken?: StringNullableFilter | string | null
    hashedPassword?: StringFilter | string
    hashedRefreshToken?: StringNullableFilter | string | null
    recoveryCode?: StringNullableFilter | string | null
    recoveryToken?: StringNullableFilter | string | null
    displayName?: StringFilter | string
    description?: StringNullableFilter | string | null
    isDeleted?: BoolNullableFilter | boolean | null
    tenantId?: StringFilter | string
    products?: ProductListRelationFilter
    customers?: CustomerListRelationFilter
    orders?: OrderListRelationFilter
    tenant?: XOR<TenantRelationFilter, TenantWhereInput> | null
  }

  export type AppOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    hashedAppToken?: SortOrder
    hashedPassword?: SortOrder
    hashedRefreshToken?: SortOrder
    recoveryCode?: SortOrder
    recoveryToken?: SortOrder
    displayName?: SortOrder
    description?: SortOrder
    isDeleted?: SortOrder
    tenantId?: SortOrder
    products?: ProductOrderByRelationAggregateInput
    customers?: CustomerOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type AppWhereUniqueInput = {
    id?: string
    name?: string
  }

  export type AppOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    hashedAppToken?: SortOrder
    hashedPassword?: SortOrder
    hashedRefreshToken?: SortOrder
    recoveryCode?: SortOrder
    recoveryToken?: SortOrder
    displayName?: SortOrder
    description?: SortOrder
    isDeleted?: SortOrder
    tenantId?: SortOrder
    _count?: AppCountOrderByAggregateInput
    _max?: AppMaxOrderByAggregateInput
    _min?: AppMinOrderByAggregateInput
  }

  export type AppScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AppScalarWhereWithAggregatesInput>
    OR?: Enumerable<AppScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AppScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    hashedAppToken?: StringNullableWithAggregatesFilter | string | null
    hashedPassword?: StringWithAggregatesFilter | string
    hashedRefreshToken?: StringNullableWithAggregatesFilter | string | null
    recoveryCode?: StringNullableWithAggregatesFilter | string | null
    recoveryToken?: StringNullableWithAggregatesFilter | string | null
    displayName?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    isDeleted?: BoolNullableWithAggregatesFilter | boolean | null
    tenantId?: StringWithAggregatesFilter | string
  }

  export type TenantWhereInput = {
    AND?: Enumerable<TenantWhereInput>
    OR?: Enumerable<TenantWhereInput>
    NOT?: Enumerable<TenantWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    email?: StringFilter | string
    hashedPassword?: StringFilter | string
    hashedRefreshToken?: StringNullableFilter | string | null
    recoveryCode?: StringNullableFilter | string | null
    recoveryToken?: StringNullableFilter | string | null
    role?: StringNullableFilter | string | null
    App?: AppListRelationFilter
  }

  export type TenantOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    hashedRefreshToken?: SortOrder
    recoveryCode?: SortOrder
    recoveryToken?: SortOrder
    role?: SortOrder
    App?: AppOrderByRelationAggregateInput
  }

  export type TenantWhereUniqueInput = {
    id?: string
  }

  export type TenantOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    hashedRefreshToken?: SortOrder
    recoveryCode?: SortOrder
    recoveryToken?: SortOrder
    role?: SortOrder
    _count?: TenantCountOrderByAggregateInput
    _max?: TenantMaxOrderByAggregateInput
    _min?: TenantMinOrderByAggregateInput
  }

  export type TenantScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TenantScalarWhereWithAggregatesInput>
    OR?: Enumerable<TenantScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TenantScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    hashedPassword?: StringWithAggregatesFilter | string
    hashedRefreshToken?: StringNullableWithAggregatesFilter | string | null
    recoveryCode?: StringNullableWithAggregatesFilter | string | null
    recoveryToken?: StringNullableWithAggregatesFilter | string | null
    role?: StringNullableWithAggregatesFilter | string | null
  }

  export type TenantPreSignupWhereInput = {
    AND?: Enumerable<TenantPreSignupWhereInput>
    OR?: Enumerable<TenantPreSignupWhereInput>
    NOT?: Enumerable<TenantPreSignupWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    email?: StringFilter | string
    verifyCode?: StringFilter | string
  }

  export type TenantPreSignupOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    verifyCode?: SortOrder
  }

  export type TenantPreSignupWhereUniqueInput = {
    id?: string
  }

  export type TenantPreSignupOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    verifyCode?: SortOrder
    _count?: TenantPreSignupCountOrderByAggregateInput
    _max?: TenantPreSignupMaxOrderByAggregateInput
    _min?: TenantPreSignupMinOrderByAggregateInput
  }

  export type TenantPreSignupScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TenantPreSignupScalarWhereWithAggregatesInput>
    OR?: Enumerable<TenantPreSignupScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TenantPreSignupScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    email?: StringWithAggregatesFilter | string
    verifyCode?: StringWithAggregatesFilter | string
  }

  export type QuestionWhereInput = {
    AND?: Enumerable<QuestionWhereInput>
    OR?: Enumerable<QuestionWhereInput>
    NOT?: Enumerable<QuestionWhereInput>
    id?: StringFilter | string
    uid?: StringFilter | string
    question?: StringNullableFilter | string | null
    answer?: StringNullableFilter | string | null
    success?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type QuestionOrderByWithRelationInput = {
    id?: SortOrder
    uid?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    success?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionWhereUniqueInput = {
    id?: string
  }

  export type QuestionOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    success?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _avg?: QuestionAvgOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
    _sum?: QuestionSumOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<QuestionScalarWhereWithAggregatesInput>
    OR?: Enumerable<QuestionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<QuestionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    uid?: StringWithAggregatesFilter | string
    question?: StringNullableWithAggregatesFilter | string | null
    answer?: StringNullableWithAggregatesFilter | string | null
    success?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type JYProfileWhereInput = {
    AND?: Enumerable<JYProfileWhereInput>
    OR?: Enumerable<JYProfileWhereInput>
    NOT?: Enumerable<JYProfileWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    userId?: StringFilter | string
    articles?: ArticleListRelationFilter
    freeCounts?: JYFreeCountListRelationFilter
  }

  export type JYProfileOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    articles?: ArticleOrderByRelationAggregateInput
    freeCounts?: JYFreeCountOrderByRelationAggregateInput
  }

  export type JYProfileWhereUniqueInput = {
    id?: string
  }

  export type JYProfileOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: JYProfileCountOrderByAggregateInput
    _max?: JYProfileMaxOrderByAggregateInput
    _min?: JYProfileMinOrderByAggregateInput
  }

  export type JYProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<JYProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<JYProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<JYProfileScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    userId?: StringWithAggregatesFilter | string
  }

  export type JYFreeCountWhereInput = {
    AND?: Enumerable<JYFreeCountWhereInput>
    OR?: Enumerable<JYFreeCountWhereInput>
    NOT?: Enumerable<JYFreeCountWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    cycle?: IntFilter | number
    count?: IntFilter | number
    profileId?: StringFilter | string
    profile?: XOR<JYProfileRelationFilter, JYProfileWhereInput>
  }

  export type JYFreeCountOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cycle?: SortOrder
    count?: SortOrder
    profileId?: SortOrder
    profile?: JYProfileOrderByWithRelationInput
  }

  export type JYFreeCountWhereUniqueInput = {
    id?: string
  }

  export type JYFreeCountOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cycle?: SortOrder
    count?: SortOrder
    profileId?: SortOrder
    _count?: JYFreeCountCountOrderByAggregateInput
    _avg?: JYFreeCountAvgOrderByAggregateInput
    _max?: JYFreeCountMaxOrderByAggregateInput
    _min?: JYFreeCountMinOrderByAggregateInput
    _sum?: JYFreeCountSumOrderByAggregateInput
  }

  export type JYFreeCountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<JYFreeCountScalarWhereWithAggregatesInput>
    OR?: Enumerable<JYFreeCountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<JYFreeCountScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    cycle?: IntWithAggregatesFilter | number
    count?: IntWithAggregatesFilter | number
    profileId?: StringWithAggregatesFilter | string
  }

  export type ArticleWhereInput = {
    AND?: Enumerable<ArticleWhereInput>
    OR?: Enumerable<ArticleWhereInput>
    NOT?: Enumerable<ArticleWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    link?: StringFilter | string
    source?: StringNullableFilter | string | null
    title?: StringNullableFilter | string | null
    image?: StringNullableFilter | string | null
    excerpt?: StringNullableFilter | string | null
    profileId?: StringFilter | string
    profile?: XOR<JYProfileRelationFilter, JYProfileWhereInput>
  }

  export type ArticleOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    link?: SortOrder
    source?: SortOrder
    title?: SortOrder
    image?: SortOrder
    excerpt?: SortOrder
    profileId?: SortOrder
    profile?: JYProfileOrderByWithRelationInput
  }

  export type ArticleWhereUniqueInput = {
    id?: string
  }

  export type ArticleOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    link?: SortOrder
    source?: SortOrder
    title?: SortOrder
    image?: SortOrder
    excerpt?: SortOrder
    profileId?: SortOrder
    _count?: ArticleCountOrderByAggregateInput
    _max?: ArticleMaxOrderByAggregateInput
    _min?: ArticleMinOrderByAggregateInput
  }

  export type ArticleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ArticleScalarWhereWithAggregatesInput>
    OR?: Enumerable<ArticleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ArticleScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    link?: StringWithAggregatesFilter | string
    source?: StringNullableWithAggregatesFilter | string | null
    title?: StringNullableWithAggregatesFilter | string | null
    image?: StringNullableWithAggregatesFilter | string | null
    excerpt?: StringNullableWithAggregatesFilter | string | null
    profileId?: StringWithAggregatesFilter | string
  }

  export type ProductWhereInput = {
    AND?: Enumerable<ProductWhereInput>
    OR?: Enumerable<ProductWhereInput>
    NOT?: Enumerable<ProductWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    price?: DecimalFilter | Decimal | DecimalJsLike | number | string
    productType?: EnumProductTypeFilter | ProductType
    plan?: IntNullableFilter | number | null
    amount?: IntNullableFilter | number | null
    extendedDescriptionData?: JsonNullableFilter
    fileSize?: StringNullableFilter | string | null
    storeDuration?: IntNullableFilter | number | null
    hasAds?: StringNullableFilter | string | null
    tecSupport?: StringNullableFilter | string | null
    validityPeriod?: IntNullableFilter | number | null
    appId?: StringFilter | string
    isDeleted?: BoolNullableFilter | boolean | null
    tenantId?: StringFilter | string
    restricted?: IntFilter | number
    productSnapshots?: ProductSnapshotListRelationFilter
    app?: XOR<AppRelationFilter, AppWhereInput>
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    price?: SortOrder
    productType?: SortOrder
    plan?: SortOrder
    amount?: SortOrder
    extendedDescriptionData?: SortOrder
    fileSize?: SortOrder
    storeDuration?: SortOrder
    hasAds?: SortOrder
    tecSupport?: SortOrder
    validityPeriod?: SortOrder
    appId?: SortOrder
    isDeleted?: SortOrder
    tenantId?: SortOrder
    restricted?: SortOrder
    productSnapshots?: ProductSnapshotOrderByRelationAggregateInput
    app?: AppOrderByWithRelationInput
  }

  export type ProductWhereUniqueInput = {
    id?: string
  }

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    price?: SortOrder
    productType?: SortOrder
    plan?: SortOrder
    amount?: SortOrder
    extendedDescriptionData?: SortOrder
    fileSize?: SortOrder
    storeDuration?: SortOrder
    hasAds?: SortOrder
    tecSupport?: SortOrder
    validityPeriod?: SortOrder
    appId?: SortOrder
    isDeleted?: SortOrder
    tenantId?: SortOrder
    restricted?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProductScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProductScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProductScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    price?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    productType?: EnumProductTypeWithAggregatesFilter | ProductType
    plan?: IntNullableWithAggregatesFilter | number | null
    amount?: IntNullableWithAggregatesFilter | number | null
    extendedDescriptionData?: JsonNullableWithAggregatesFilter
    fileSize?: StringNullableWithAggregatesFilter | string | null
    storeDuration?: IntNullableWithAggregatesFilter | number | null
    hasAds?: StringNullableWithAggregatesFilter | string | null
    tecSupport?: StringNullableWithAggregatesFilter | string | null
    validityPeriod?: IntNullableWithAggregatesFilter | number | null
    appId?: StringWithAggregatesFilter | string
    isDeleted?: BoolNullableWithAggregatesFilter | boolean | null
    tenantId?: StringWithAggregatesFilter | string
    restricted?: IntWithAggregatesFilter | number
  }

  export type PayWhereInput = {
    AND?: Enumerable<PayWhereInput>
    OR?: Enumerable<PayWhereInput>
    NOT?: Enumerable<PayWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    status?: EnumPayStatusFilter | PayStatus
    orderId?: StringFilter | string
    transactionId?: StringFilter | string
    tenantId?: StringFilter | string
    Order?: XOR<OrderRelationFilter, OrderWhereInput>
  }

  export type PayOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    orderId?: SortOrder
    transactionId?: SortOrder
    tenantId?: SortOrder
    Order?: OrderOrderByWithRelationInput
  }

  export type PayWhereUniqueInput = {
    id?: string
    orderId?: string
  }

  export type PayOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    orderId?: SortOrder
    transactionId?: SortOrder
    tenantId?: SortOrder
    _count?: PayCountOrderByAggregateInput
    _max?: PayMaxOrderByAggregateInput
    _min?: PayMinOrderByAggregateInput
  }

  export type PayScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PayScalarWhereWithAggregatesInput>
    OR?: Enumerable<PayScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PayScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    status?: EnumPayStatusWithAggregatesFilter | PayStatus
    orderId?: StringWithAggregatesFilter | string
    transactionId?: StringWithAggregatesFilter | string
    tenantId?: StringWithAggregatesFilter | string
  }

  export type CustomerWhereInput = {
    AND?: Enumerable<CustomerWhereInput>
    OR?: Enumerable<CustomerWhereInput>
    NOT?: Enumerable<CustomerWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    appId?: StringFilter | string
    email?: StringNullableFilter | string | null
    hashedPassword?: StringNullableFilter | string | null
    hashedRefreshToken?: StringNullableFilter | string | null
    recoveryCode?: StringNullableFilter | string | null
    recoveryToken?: StringNullableFilter | string | null
    isDeleted?: BoolNullableFilter | boolean | null
    tenantId?: StringFilter | string
    app?: XOR<AppRelationFilter, AppWhereInput>
    orders?: OrderListRelationFilter
    legacyProfile?: XOR<LegacyProfileRelationFilter, LegacyProfileWhereInput> | null
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput> | null
    weixinProfile?: XOR<WeixinProfileRelationFilter, WeixinProfileWhereInput> | null
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    appId?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    hashedRefreshToken?: SortOrder
    recoveryCode?: SortOrder
    recoveryToken?: SortOrder
    isDeleted?: SortOrder
    tenantId?: SortOrder
    app?: AppOrderByWithRelationInput
    orders?: OrderOrderByRelationAggregateInput
    legacyProfile?: LegacyProfileOrderByWithRelationInput
    profile?: ProfileOrderByWithRelationInput
    weixinProfile?: WeixinProfileOrderByWithRelationInput
  }

  export type CustomerWhereUniqueInput = {
    id?: string
    name?: string
  }

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    appId?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    hashedRefreshToken?: SortOrder
    recoveryCode?: SortOrder
    recoveryToken?: SortOrder
    isDeleted?: SortOrder
    tenantId?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CustomerScalarWhereWithAggregatesInput>
    OR?: Enumerable<CustomerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CustomerScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    appId?: StringWithAggregatesFilter | string
    email?: StringNullableWithAggregatesFilter | string | null
    hashedPassword?: StringNullableWithAggregatesFilter | string | null
    hashedRefreshToken?: StringNullableWithAggregatesFilter | string | null
    recoveryCode?: StringNullableWithAggregatesFilter | string | null
    recoveryToken?: StringNullableWithAggregatesFilter | string | null
    isDeleted?: BoolNullableWithAggregatesFilter | boolean | null
    tenantId?: StringWithAggregatesFilter | string
  }

  export type WeixinProfileWhereInput = {
    AND?: Enumerable<WeixinProfileWhereInput>
    OR?: Enumerable<WeixinProfileWhereInput>
    NOT?: Enumerable<WeixinProfileWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    unionid?: StringNullableFilter | string | null
    loginOpenid?: StringFilter | string
    headimgurl?: StringFilter | string
    nickname?: StringFilter | string
    sex?: IntFilter | number
    customerId?: StringFilter | string
    tenantId?: StringFilter | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
  }

  export type WeixinProfileOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    unionid?: SortOrder
    loginOpenid?: SortOrder
    headimgurl?: SortOrder
    nickname?: SortOrder
    sex?: SortOrder
    customerId?: SortOrder
    tenantId?: SortOrder
    customer?: CustomerOrderByWithRelationInput
  }

  export type WeixinProfileWhereUniqueInput = {
    id?: string
    customerId?: string
  }

  export type WeixinProfileOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    unionid?: SortOrder
    loginOpenid?: SortOrder
    headimgurl?: SortOrder
    nickname?: SortOrder
    sex?: SortOrder
    customerId?: SortOrder
    tenantId?: SortOrder
    _count?: WeixinProfileCountOrderByAggregateInput
    _avg?: WeixinProfileAvgOrderByAggregateInput
    _max?: WeixinProfileMaxOrderByAggregateInput
    _min?: WeixinProfileMinOrderByAggregateInput
    _sum?: WeixinProfileSumOrderByAggregateInput
  }

  export type WeixinProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WeixinProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<WeixinProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WeixinProfileScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    unionid?: StringNullableWithAggregatesFilter | string | null
    loginOpenid?: StringWithAggregatesFilter | string
    headimgurl?: StringWithAggregatesFilter | string
    nickname?: StringWithAggregatesFilter | string
    sex?: IntWithAggregatesFilter | number
    customerId?: StringWithAggregatesFilter | string
    tenantId?: StringWithAggregatesFilter | string
  }

  export type ProfileWhereInput = {
    AND?: Enumerable<ProfileWhereInput>
    OR?: Enumerable<ProfileWhereInput>
    NOT?: Enumerable<ProfileWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    customerId?: StringFilter | string
    productType?: EnumProductTypeFilter | ProductType
    plan?: IntNullableFilter | number | null
    amount?: IntNullableFilter | number | null
    expireAt?: DateTimeNullableFilter | Date | string | null
    tenantId?: StringFilter | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customerId?: SortOrder
    productType?: SortOrder
    plan?: SortOrder
    amount?: SortOrder
    expireAt?: SortOrder
    tenantId?: SortOrder
    customer?: CustomerOrderByWithRelationInput
  }

  export type ProfileWhereUniqueInput = {
    id?: string
    customerId?: string
  }

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customerId?: SortOrder
    productType?: SortOrder
    plan?: SortOrder
    amount?: SortOrder
    expireAt?: SortOrder
    tenantId?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _avg?: ProfileAvgOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
    _sum?: ProfileSumOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    customerId?: StringWithAggregatesFilter | string
    productType?: EnumProductTypeWithAggregatesFilter | ProductType
    plan?: IntNullableWithAggregatesFilter | number | null
    amount?: IntNullableWithAggregatesFilter | number | null
    expireAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    tenantId?: StringWithAggregatesFilter | string
  }

  export type customerPreSignupWhereInput = {
    AND?: Enumerable<customerPreSignupWhereInput>
    OR?: Enumerable<customerPreSignupWhereInput>
    NOT?: Enumerable<customerPreSignupWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    email?: StringFilter | string
    verifyCode?: StringFilter | string
    appId?: StringFilter | string
    tenantId?: StringFilter | string
  }

  export type customerPreSignupOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    verifyCode?: SortOrder
    appId?: SortOrder
    tenantId?: SortOrder
  }

  export type customerPreSignupWhereUniqueInput = {
    id?: string
  }

  export type customerPreSignupOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    verifyCode?: SortOrder
    appId?: SortOrder
    tenantId?: SortOrder
    _count?: customerPreSignupCountOrderByAggregateInput
    _max?: customerPreSignupMaxOrderByAggregateInput
    _min?: customerPreSignupMinOrderByAggregateInput
  }

  export type customerPreSignupScalarWhereWithAggregatesInput = {
    AND?: Enumerable<customerPreSignupScalarWhereWithAggregatesInput>
    OR?: Enumerable<customerPreSignupScalarWhereWithAggregatesInput>
    NOT?: Enumerable<customerPreSignupScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    email?: StringWithAggregatesFilter | string
    verifyCode?: StringWithAggregatesFilter | string
    appId?: StringWithAggregatesFilter | string
    tenantId?: StringWithAggregatesFilter | string
  }

  export type LegacyProfileWhereInput = {
    AND?: Enumerable<LegacyProfileWhereInput>
    OR?: Enumerable<LegacyProfileWhereInput>
    NOT?: Enumerable<LegacyProfileWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    customerId?: StringFilter | string
    license?: StringFilter | string
    refreshToken?: StringFilter | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
  }

  export type LegacyProfileOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customerId?: SortOrder
    license?: SortOrder
    refreshToken?: SortOrder
    customer?: CustomerOrderByWithRelationInput
  }

  export type LegacyProfileWhereUniqueInput = {
    id?: string
    customerId?: string
  }

  export type LegacyProfileOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customerId?: SortOrder
    license?: SortOrder
    refreshToken?: SortOrder
    _count?: LegacyProfileCountOrderByAggregateInput
    _max?: LegacyProfileMaxOrderByAggregateInput
    _min?: LegacyProfileMinOrderByAggregateInput
  }

  export type LegacyProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LegacyProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<LegacyProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LegacyProfileScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    customerId?: StringWithAggregatesFilter | string
    license?: StringWithAggregatesFilter | string
    refreshToken?: StringWithAggregatesFilter | string
  }

  export type ProductSnapshotWhereInput = {
    AND?: Enumerable<ProductSnapshotWhereInput>
    OR?: Enumerable<ProductSnapshotWhereInput>
    NOT?: Enumerable<ProductSnapshotWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    snapshotPrice?: DecimalFilter | Decimal | DecimalJsLike | number | string
    orderId?: StringFilter | string
    productId?: StringFilter | string
    tenantId?: StringFilter | string
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type ProductSnapshotOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    snapshotPrice?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    tenantId?: SortOrder
    order?: OrderOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type ProductSnapshotWhereUniqueInput = {
    id?: string
  }

  export type ProductSnapshotOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    snapshotPrice?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    tenantId?: SortOrder
    _count?: ProductSnapshotCountOrderByAggregateInput
    _avg?: ProductSnapshotAvgOrderByAggregateInput
    _max?: ProductSnapshotMaxOrderByAggregateInput
    _min?: ProductSnapshotMinOrderByAggregateInput
    _sum?: ProductSnapshotSumOrderByAggregateInput
  }

  export type ProductSnapshotScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProductSnapshotScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProductSnapshotScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProductSnapshotScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    snapshotPrice?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    orderId?: StringWithAggregatesFilter | string
    productId?: StringWithAggregatesFilter | string
    tenantId?: StringWithAggregatesFilter | string
  }

  export type OrderWhereInput = {
    AND?: Enumerable<OrderWhereInput>
    OR?: Enumerable<OrderWhereInput>
    NOT?: Enumerable<OrderWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    serial?: IntFilter | number
    status?: EnumOrderStatusFilter | OrderStatus
    customerId?: StringFilter | string
    appId?: StringFilter | string
    isDeleted?: BoolNullableFilter | boolean | null
    tenantId?: StringFilter | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    pay?: XOR<PayRelationFilter, PayWhereInput> | null
    productSnapshots?: ProductSnapshotListRelationFilter
    App?: XOR<AppRelationFilter, AppWhereInput>
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serial?: SortOrder
    status?: SortOrder
    customerId?: SortOrder
    appId?: SortOrder
    isDeleted?: SortOrder
    tenantId?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    pay?: PayOrderByWithRelationInput
    productSnapshots?: ProductSnapshotOrderByRelationAggregateInput
    App?: AppOrderByWithRelationInput
  }

  export type OrderWhereUniqueInput = {
    id?: string
  }

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serial?: SortOrder
    status?: SortOrder
    customerId?: SortOrder
    appId?: SortOrder
    isDeleted?: SortOrder
    tenantId?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OrderScalarWhereWithAggregatesInput>
    OR?: Enumerable<OrderScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OrderScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    serial?: IntWithAggregatesFilter | number
    status?: EnumOrderStatusWithAggregatesFilter | OrderStatus
    customerId?: StringWithAggregatesFilter | string
    appId?: StringWithAggregatesFilter | string
    isDeleted?: BoolNullableWithAggregatesFilter | boolean | null
    tenantId?: StringWithAggregatesFilter | string
  }

  export type AppCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hashedAppToken?: string | null
    hashedPassword: string
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    displayName: string
    description?: string | null
    isDeleted?: boolean | null
    products?: ProductCreateNestedManyWithoutAppInput
    customers?: CustomerCreateNestedManyWithoutAppInput
    orders?: OrderCreateNestedManyWithoutAppInput
    tenant?: TenantCreateNestedOneWithoutAppInput
  }

  export type AppUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hashedAppToken?: string | null
    hashedPassword: string
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    displayName: string
    description?: string | null
    isDeleted?: boolean | null
    tenantId?: string
    products?: ProductUncheckedCreateNestedManyWithoutAppInput
    customers?: CustomerUncheckedCreateNestedManyWithoutAppInput
    orders?: OrderUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hashedAppToken?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    products?: ProductUpdateManyWithoutAppNestedInput
    customers?: CustomerUpdateManyWithoutAppNestedInput
    orders?: OrderUpdateManyWithoutAppNestedInput
    tenant?: TenantUpdateOneWithoutAppNestedInput
  }

  export type AppUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hashedAppToken?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    products?: ProductUncheckedUpdateManyWithoutAppNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutAppNestedInput
    orders?: OrderUncheckedUpdateManyWithoutAppNestedInput
  }

  export type AppCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hashedAppToken?: string | null
    hashedPassword: string
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    displayName: string
    description?: string | null
    isDeleted?: boolean | null
    tenantId?: string
  }

  export type AppUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hashedAppToken?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type AppUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hashedAppToken?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type TenantCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email: string
    hashedPassword: string
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    role?: string | null
    App?: AppCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email: string
    hashedPassword: string
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    role?: string | null
    App?: AppUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    App?: AppUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    App?: AppUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email: string
    hashedPassword: string
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    role?: string | null
  }

  export type TenantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TenantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TenantPreSignupCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    verifyCode: string
  }

  export type TenantPreSignupUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    verifyCode: string
  }

  export type TenantPreSignupUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    verifyCode?: StringFieldUpdateOperationsInput | string
  }

  export type TenantPreSignupUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    verifyCode?: StringFieldUpdateOperationsInput | string
  }

  export type TenantPreSignupCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    verifyCode: string
  }

  export type TenantPreSignupUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    verifyCode?: StringFieldUpdateOperationsInput | string
  }

  export type TenantPreSignupUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    verifyCode?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionCreateInput = {
    id?: string
    uid: string
    question?: string | null
    answer?: string | null
    success?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionUncheckedCreateInput = {
    id?: string
    uid: string
    question?: string | null
    answer?: string | null
    success?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    question?: NullableStringFieldUpdateOperationsInput | string | null
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    success?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    question?: NullableStringFieldUpdateOperationsInput | string | null
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    success?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionCreateManyInput = {
    id?: string
    uid: string
    question?: string | null
    answer?: string | null
    success?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    question?: NullableStringFieldUpdateOperationsInput | string | null
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    success?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    question?: NullableStringFieldUpdateOperationsInput | string | null
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    success?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JYProfileCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    articles?: ArticleCreateNestedManyWithoutProfileInput
    freeCounts?: JYFreeCountCreateNestedManyWithoutProfileInput
  }

  export type JYProfileUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    articles?: ArticleUncheckedCreateNestedManyWithoutProfileInput
    freeCounts?: JYFreeCountUncheckedCreateNestedManyWithoutProfileInput
  }

  export type JYProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    articles?: ArticleUpdateManyWithoutProfileNestedInput
    freeCounts?: JYFreeCountUpdateManyWithoutProfileNestedInput
  }

  export type JYProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    articles?: ArticleUncheckedUpdateManyWithoutProfileNestedInput
    freeCounts?: JYFreeCountUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type JYProfileCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type JYProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type JYProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type JYFreeCountCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    cycle: number
    count: number
    profile: JYProfileCreateNestedOneWithoutFreeCountsInput
  }

  export type JYFreeCountUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    cycle: number
    count: number
    profileId: string
  }

  export type JYFreeCountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cycle?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    profile?: JYProfileUpdateOneRequiredWithoutFreeCountsNestedInput
  }

  export type JYFreeCountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cycle?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    profileId?: StringFieldUpdateOperationsInput | string
  }

  export type JYFreeCountCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    cycle: number
    count: number
    profileId: string
  }

  export type JYFreeCountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cycle?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
  }

  export type JYFreeCountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cycle?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    profileId?: StringFieldUpdateOperationsInput | string
  }

  export type ArticleCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    link: string
    source?: string | null
    title?: string | null
    image?: string | null
    excerpt?: string | null
    profile: JYProfileCreateNestedOneWithoutArticlesInput
  }

  export type ArticleUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    link: string
    source?: string | null
    title?: string | null
    image?: string | null
    excerpt?: string | null
    profileId: string
  }

  export type ArticleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    link?: StringFieldUpdateOperationsInput | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    excerpt?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: JYProfileUpdateOneRequiredWithoutArticlesNestedInput
  }

  export type ArticleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    link?: StringFieldUpdateOperationsInput | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    excerpt?: NullableStringFieldUpdateOperationsInput | string | null
    profileId?: StringFieldUpdateOperationsInput | string
  }

  export type ArticleCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    link: string
    source?: string | null
    title?: string | null
    image?: string | null
    excerpt?: string | null
    profileId: string
  }

  export type ArticleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    link?: StringFieldUpdateOperationsInput | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    excerpt?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ArticleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    link?: StringFieldUpdateOperationsInput | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    excerpt?: NullableStringFieldUpdateOperationsInput | string | null
    profileId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    price: Decimal | DecimalJsLike | number | string
    productType?: ProductType
    plan?: number | null
    amount?: number | null
    extendedDescriptionData?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: string | null
    storeDuration?: number | null
    hasAds?: string | null
    tecSupport?: string | null
    validityPeriod?: number | null
    isDeleted?: boolean | null
    tenantId?: string
    restricted?: number
    productSnapshots?: ProductSnapshotCreateNestedManyWithoutProductInput
    app: AppCreateNestedOneWithoutProductsInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    price: Decimal | DecimalJsLike | number | string
    productType?: ProductType
    plan?: number | null
    amount?: number | null
    extendedDescriptionData?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: string | null
    storeDuration?: number | null
    hasAds?: string | null
    tecSupport?: string | null
    validityPeriod?: number | null
    appId: string
    isDeleted?: boolean | null
    tenantId?: string
    restricted?: number
    productSnapshots?: ProductSnapshotUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productType?: EnumProductTypeFieldUpdateOperationsInput | ProductType
    plan?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    extendedDescriptionData?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableStringFieldUpdateOperationsInput | string | null
    storeDuration?: NullableIntFieldUpdateOperationsInput | number | null
    hasAds?: NullableStringFieldUpdateOperationsInput | string | null
    tecSupport?: NullableStringFieldUpdateOperationsInput | string | null
    validityPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    restricted?: IntFieldUpdateOperationsInput | number
    productSnapshots?: ProductSnapshotUpdateManyWithoutProductNestedInput
    app?: AppUpdateOneRequiredWithoutProductsNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productType?: EnumProductTypeFieldUpdateOperationsInput | ProductType
    plan?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    extendedDescriptionData?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableStringFieldUpdateOperationsInput | string | null
    storeDuration?: NullableIntFieldUpdateOperationsInput | number | null
    hasAds?: NullableStringFieldUpdateOperationsInput | string | null
    tecSupport?: NullableStringFieldUpdateOperationsInput | string | null
    validityPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    appId?: StringFieldUpdateOperationsInput | string
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    restricted?: IntFieldUpdateOperationsInput | number
    productSnapshots?: ProductSnapshotUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    price: Decimal | DecimalJsLike | number | string
    productType?: ProductType
    plan?: number | null
    amount?: number | null
    extendedDescriptionData?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: string | null
    storeDuration?: number | null
    hasAds?: string | null
    tecSupport?: string | null
    validityPeriod?: number | null
    appId: string
    isDeleted?: boolean | null
    tenantId?: string
    restricted?: number
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productType?: EnumProductTypeFieldUpdateOperationsInput | ProductType
    plan?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    extendedDescriptionData?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableStringFieldUpdateOperationsInput | string | null
    storeDuration?: NullableIntFieldUpdateOperationsInput | number | null
    hasAds?: NullableStringFieldUpdateOperationsInput | string | null
    tecSupport?: NullableStringFieldUpdateOperationsInput | string | null
    validityPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    restricted?: IntFieldUpdateOperationsInput | number
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productType?: EnumProductTypeFieldUpdateOperationsInput | ProductType
    plan?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    extendedDescriptionData?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableStringFieldUpdateOperationsInput | string | null
    storeDuration?: NullableIntFieldUpdateOperationsInput | number | null
    hasAds?: NullableStringFieldUpdateOperationsInput | string | null
    tecSupport?: NullableStringFieldUpdateOperationsInput | string | null
    validityPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    appId?: StringFieldUpdateOperationsInput | string
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    restricted?: IntFieldUpdateOperationsInput | number
  }

  export type PayCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: PayStatus
    transactionId: string
    tenantId?: string
    Order: OrderCreateNestedOneWithoutPayInput
  }

  export type PayUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: PayStatus
    orderId: string
    transactionId: string
    tenantId?: string
  }

  export type PayUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPayStatusFieldUpdateOperationsInput | PayStatus
    transactionId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    Order?: OrderUpdateOneRequiredWithoutPayNestedInput
  }

  export type PayUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPayStatusFieldUpdateOperationsInput | PayStatus
    orderId?: StringFieldUpdateOperationsInput | string
    transactionId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PayCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: PayStatus
    orderId: string
    transactionId: string
    tenantId?: string
  }

  export type PayUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPayStatusFieldUpdateOperationsInput | PayStatus
    transactionId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PayUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPayStatusFieldUpdateOperationsInput | PayStatus
    orderId?: StringFieldUpdateOperationsInput | string
    transactionId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email?: string | null
    hashedPassword?: string | null
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    isDeleted?: boolean | null
    tenantId?: string
    app: AppCreateNestedOneWithoutCustomersInput
    orders?: OrderCreateNestedManyWithoutCustomerInput
    legacyProfile?: LegacyProfileCreateNestedOneWithoutCustomerInput
    profile?: ProfileCreateNestedOneWithoutCustomerInput
    weixinProfile?: WeixinProfileCreateNestedOneWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    appId: string
    email?: string | null
    hashedPassword?: string | null
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    isDeleted?: boolean | null
    tenantId?: string
    orders?: OrderUncheckedCreateNestedManyWithoutCustomerInput
    legacyProfile?: LegacyProfileUncheckedCreateNestedOneWithoutCustomerInput
    profile?: ProfileUncheckedCreateNestedOneWithoutCustomerInput
    weixinProfile?: WeixinProfileUncheckedCreateNestedOneWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    app?: AppUpdateOneRequiredWithoutCustomersNestedInput
    orders?: OrderUpdateManyWithoutCustomerNestedInput
    legacyProfile?: LegacyProfileUpdateOneWithoutCustomerNestedInput
    profile?: ProfileUpdateOneWithoutCustomerNestedInput
    weixinProfile?: WeixinProfileUpdateOneWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    orders?: OrderUncheckedUpdateManyWithoutCustomerNestedInput
    legacyProfile?: LegacyProfileUncheckedUpdateOneWithoutCustomerNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutCustomerNestedInput
    weixinProfile?: WeixinProfileUncheckedUpdateOneWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    appId: string
    email?: string | null
    hashedPassword?: string | null
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    isDeleted?: boolean | null
    tenantId?: string
  }

  export type CustomerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type WeixinProfileCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    unionid?: string | null
    loginOpenid: string
    headimgurl: string
    nickname: string
    sex: number
    tenantId?: string
    customer: CustomerCreateNestedOneWithoutWeixinProfileInput
  }

  export type WeixinProfileUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    unionid?: string | null
    loginOpenid: string
    headimgurl: string
    nickname: string
    sex: number
    customerId: string
    tenantId?: string
  }

  export type WeixinProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    loginOpenid?: StringFieldUpdateOperationsInput | string
    headimgurl?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    sex?: IntFieldUpdateOperationsInput | number
    tenantId?: StringFieldUpdateOperationsInput | string
    customer?: CustomerUpdateOneRequiredWithoutWeixinProfileNestedInput
  }

  export type WeixinProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    loginOpenid?: StringFieldUpdateOperationsInput | string
    headimgurl?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    sex?: IntFieldUpdateOperationsInput | number
    customerId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type WeixinProfileCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    unionid?: string | null
    loginOpenid: string
    headimgurl: string
    nickname: string
    sex: number
    customerId: string
    tenantId?: string
  }

  export type WeixinProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    loginOpenid?: StringFieldUpdateOperationsInput | string
    headimgurl?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    sex?: IntFieldUpdateOperationsInput | number
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type WeixinProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    loginOpenid?: StringFieldUpdateOperationsInput | string
    headimgurl?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    sex?: IntFieldUpdateOperationsInput | number
    customerId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    productType?: ProductType
    plan?: number | null
    amount?: number | null
    expireAt?: Date | string | null
    tenantId?: string
    customer: CustomerCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customerId: string
    productType?: ProductType
    plan?: number | null
    amount?: number | null
    expireAt?: Date | string | null
    tenantId?: string
  }

  export type ProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productType?: EnumProductTypeFieldUpdateOperationsInput | ProductType
    plan?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    expireAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    customer?: CustomerUpdateOneRequiredWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: StringFieldUpdateOperationsInput | string
    productType?: EnumProductTypeFieldUpdateOperationsInput | ProductType
    plan?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    expireAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customerId: string
    productType?: ProductType
    plan?: number | null
    amount?: number | null
    expireAt?: Date | string | null
    tenantId?: string
  }

  export type ProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productType?: EnumProductTypeFieldUpdateOperationsInput | ProductType
    plan?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    expireAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: StringFieldUpdateOperationsInput | string
    productType?: EnumProductTypeFieldUpdateOperationsInput | ProductType
    plan?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    expireAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type customerPreSignupCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    verifyCode: string
    appId: string
    tenantId?: string
  }

  export type customerPreSignupUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    verifyCode: string
    appId: string
    tenantId?: string
  }

  export type customerPreSignupUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    verifyCode?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type customerPreSignupUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    verifyCode?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type customerPreSignupCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    verifyCode: string
    appId: string
    tenantId?: string
  }

  export type customerPreSignupUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    verifyCode?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type customerPreSignupUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    verifyCode?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type LegacyProfileCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    license: string
    refreshToken: string
    customer: CustomerCreateNestedOneWithoutLegacyProfileInput
  }

  export type LegacyProfileUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customerId: string
    license: string
    refreshToken: string
  }

  export type LegacyProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    license?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    customer?: CustomerUpdateOneRequiredWithoutLegacyProfileNestedInput
  }

  export type LegacyProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
  }

  export type LegacyProfileCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    customerId: string
    license: string
    refreshToken: string
  }

  export type LegacyProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    license?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
  }

  export type LegacyProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: StringFieldUpdateOperationsInput | string
    license?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
  }

  export type ProductSnapshotCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    snapshotPrice: Decimal | DecimalJsLike | number | string
    tenantId?: string
    order: OrderCreateNestedOneWithoutProductSnapshotsInput
    product: ProductCreateNestedOneWithoutProductSnapshotsInput
  }

  export type ProductSnapshotUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    snapshotPrice: Decimal | DecimalJsLike | number | string
    orderId: string
    productId: string
    tenantId?: string
  }

  export type ProductSnapshotUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    snapshotPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tenantId?: StringFieldUpdateOperationsInput | string
    order?: OrderUpdateOneRequiredWithoutProductSnapshotsNestedInput
    product?: ProductUpdateOneRequiredWithoutProductSnapshotsNestedInput
  }

  export type ProductSnapshotUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    snapshotPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductSnapshotCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    snapshotPrice: Decimal | DecimalJsLike | number | string
    orderId: string
    productId: string
    tenantId?: string
  }

  export type ProductSnapshotUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    snapshotPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductSnapshotUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    snapshotPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type OrderCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    serial: number
    status: OrderStatus
    isDeleted?: boolean | null
    tenantId?: string
    customer: CustomerCreateNestedOneWithoutOrdersInput
    pay?: PayCreateNestedOneWithoutOrderInput
    productSnapshots?: ProductSnapshotCreateNestedManyWithoutOrderInput
    App?: AppCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    serial: number
    status: OrderStatus
    customerId: string
    appId?: string
    isDeleted?: boolean | null
    tenantId?: string
    pay?: PayUncheckedCreateNestedOneWithoutOrderInput
    productSnapshots?: ProductSnapshotUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serial?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    customer?: CustomerUpdateOneRequiredWithoutOrdersNestedInput
    pay?: PayUpdateOneWithoutOrderNestedInput
    productSnapshots?: ProductSnapshotUpdateManyWithoutOrderNestedInput
    App?: AppUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serial?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    customerId?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    pay?: PayUncheckedUpdateOneWithoutOrderNestedInput
    productSnapshots?: ProductSnapshotUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    serial: number
    status: OrderStatus
    customerId: string
    appId?: string
    isDeleted?: boolean | null
    tenantId?: string
  }

  export type OrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serial?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serial?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    customerId?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type CustomerListRelationFilter = {
    every?: CustomerWhereInput
    some?: CustomerWhereInput
    none?: CustomerWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type TenantRelationFilter = {
    is?: TenantWhereInput | null
    isNot?: TenantWhereInput | null
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    hashedAppToken?: SortOrder
    hashedPassword?: SortOrder
    hashedRefreshToken?: SortOrder
    recoveryCode?: SortOrder
    recoveryToken?: SortOrder
    displayName?: SortOrder
    description?: SortOrder
    isDeleted?: SortOrder
    tenantId?: SortOrder
  }

  export type AppMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    hashedAppToken?: SortOrder
    hashedPassword?: SortOrder
    hashedRefreshToken?: SortOrder
    recoveryCode?: SortOrder
    recoveryToken?: SortOrder
    displayName?: SortOrder
    description?: SortOrder
    isDeleted?: SortOrder
    tenantId?: SortOrder
  }

  export type AppMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    hashedAppToken?: SortOrder
    hashedPassword?: SortOrder
    hashedRefreshToken?: SortOrder
    recoveryCode?: SortOrder
    recoveryToken?: SortOrder
    displayName?: SortOrder
    description?: SortOrder
    isDeleted?: SortOrder
    tenantId?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type AppListRelationFilter = {
    every?: AppWhereInput
    some?: AppWhereInput
    none?: AppWhereInput
  }

  export type AppOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TenantCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    hashedRefreshToken?: SortOrder
    recoveryCode?: SortOrder
    recoveryToken?: SortOrder
    role?: SortOrder
  }

  export type TenantMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    hashedRefreshToken?: SortOrder
    recoveryCode?: SortOrder
    recoveryToken?: SortOrder
    role?: SortOrder
  }

  export type TenantMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    hashedRefreshToken?: SortOrder
    recoveryCode?: SortOrder
    recoveryToken?: SortOrder
    role?: SortOrder
  }

  export type TenantPreSignupCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    verifyCode?: SortOrder
  }

  export type TenantPreSignupMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    verifyCode?: SortOrder
  }

  export type TenantPreSignupMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    verifyCode?: SortOrder
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type QuestionCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    success?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionAvgOrderByAggregateInput = {
    success?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    success?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    success?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionSumOrderByAggregateInput = {
    success?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type ArticleListRelationFilter = {
    every?: ArticleWhereInput
    some?: ArticleWhereInput
    none?: ArticleWhereInput
  }

  export type JYFreeCountListRelationFilter = {
    every?: JYFreeCountWhereInput
    some?: JYFreeCountWhereInput
    none?: JYFreeCountWhereInput
  }

  export type ArticleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JYFreeCountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JYProfileCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type JYProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type JYProfileMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type JYProfileRelationFilter = {
    is?: JYProfileWhereInput
    isNot?: JYProfileWhereInput
  }

  export type JYFreeCountCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cycle?: SortOrder
    count?: SortOrder
    profileId?: SortOrder
  }

  export type JYFreeCountAvgOrderByAggregateInput = {
    cycle?: SortOrder
    count?: SortOrder
  }

  export type JYFreeCountMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cycle?: SortOrder
    count?: SortOrder
    profileId?: SortOrder
  }

  export type JYFreeCountMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cycle?: SortOrder
    count?: SortOrder
    profileId?: SortOrder
  }

  export type JYFreeCountSumOrderByAggregateInput = {
    cycle?: SortOrder
    count?: SortOrder
  }

  export type ArticleCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    link?: SortOrder
    source?: SortOrder
    title?: SortOrder
    image?: SortOrder
    excerpt?: SortOrder
    profileId?: SortOrder
  }

  export type ArticleMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    link?: SortOrder
    source?: SortOrder
    title?: SortOrder
    image?: SortOrder
    excerpt?: SortOrder
    profileId?: SortOrder
  }

  export type ArticleMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    link?: SortOrder
    source?: SortOrder
    title?: SortOrder
    image?: SortOrder
    excerpt?: SortOrder
    profileId?: SortOrder
  }

  export type DecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type EnumProductTypeFilter = {
    equals?: ProductType
    in?: Enumerable<ProductType>
    notIn?: Enumerable<ProductType>
    not?: NestedEnumProductTypeFilter | ProductType
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type ProductSnapshotListRelationFilter = {
    every?: ProductSnapshotWhereInput
    some?: ProductSnapshotWhereInput
    none?: ProductSnapshotWhereInput
  }

  export type AppRelationFilter = {
    is?: AppWhereInput
    isNot?: AppWhereInput
  }

  export type ProductSnapshotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    price?: SortOrder
    productType?: SortOrder
    plan?: SortOrder
    amount?: SortOrder
    extendedDescriptionData?: SortOrder
    fileSize?: SortOrder
    storeDuration?: SortOrder
    hasAds?: SortOrder
    tecSupport?: SortOrder
    validityPeriod?: SortOrder
    appId?: SortOrder
    isDeleted?: SortOrder
    tenantId?: SortOrder
    restricted?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    price?: SortOrder
    plan?: SortOrder
    amount?: SortOrder
    storeDuration?: SortOrder
    validityPeriod?: SortOrder
    restricted?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    price?: SortOrder
    productType?: SortOrder
    plan?: SortOrder
    amount?: SortOrder
    fileSize?: SortOrder
    storeDuration?: SortOrder
    hasAds?: SortOrder
    tecSupport?: SortOrder
    validityPeriod?: SortOrder
    appId?: SortOrder
    isDeleted?: SortOrder
    tenantId?: SortOrder
    restricted?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    price?: SortOrder
    productType?: SortOrder
    plan?: SortOrder
    amount?: SortOrder
    fileSize?: SortOrder
    storeDuration?: SortOrder
    hasAds?: SortOrder
    tecSupport?: SortOrder
    validityPeriod?: SortOrder
    appId?: SortOrder
    isDeleted?: SortOrder
    tenantId?: SortOrder
    restricted?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    price?: SortOrder
    plan?: SortOrder
    amount?: SortOrder
    storeDuration?: SortOrder
    validityPeriod?: SortOrder
    restricted?: SortOrder
  }

  export type DecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type EnumProductTypeWithAggregatesFilter = {
    equals?: ProductType
    in?: Enumerable<ProductType>
    notIn?: Enumerable<ProductType>
    not?: NestedEnumProductTypeWithAggregatesFilter | ProductType
    _count?: NestedIntFilter
    _min?: NestedEnumProductTypeFilter
    _max?: NestedEnumProductTypeFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type EnumPayStatusFilter = {
    equals?: PayStatus
    in?: Enumerable<PayStatus>
    notIn?: Enumerable<PayStatus>
    not?: NestedEnumPayStatusFilter | PayStatus
  }

  export type OrderRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type PayCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    orderId?: SortOrder
    transactionId?: SortOrder
    tenantId?: SortOrder
  }

  export type PayMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    orderId?: SortOrder
    transactionId?: SortOrder
    tenantId?: SortOrder
  }

  export type PayMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    orderId?: SortOrder
    transactionId?: SortOrder
    tenantId?: SortOrder
  }

  export type EnumPayStatusWithAggregatesFilter = {
    equals?: PayStatus
    in?: Enumerable<PayStatus>
    notIn?: Enumerable<PayStatus>
    not?: NestedEnumPayStatusWithAggregatesFilter | PayStatus
    _count?: NestedIntFilter
    _min?: NestedEnumPayStatusFilter
    _max?: NestedEnumPayStatusFilter
  }

  export type LegacyProfileRelationFilter = {
    is?: LegacyProfileWhereInput | null
    isNot?: LegacyProfileWhereInput | null
  }

  export type ProfileRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type WeixinProfileRelationFilter = {
    is?: WeixinProfileWhereInput | null
    isNot?: WeixinProfileWhereInput | null
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    appId?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    hashedRefreshToken?: SortOrder
    recoveryCode?: SortOrder
    recoveryToken?: SortOrder
    isDeleted?: SortOrder
    tenantId?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    appId?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    hashedRefreshToken?: SortOrder
    recoveryCode?: SortOrder
    recoveryToken?: SortOrder
    isDeleted?: SortOrder
    tenantId?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    appId?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    hashedRefreshToken?: SortOrder
    recoveryCode?: SortOrder
    recoveryToken?: SortOrder
    isDeleted?: SortOrder
    tenantId?: SortOrder
  }

  export type CustomerRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type WeixinProfileCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    unionid?: SortOrder
    loginOpenid?: SortOrder
    headimgurl?: SortOrder
    nickname?: SortOrder
    sex?: SortOrder
    customerId?: SortOrder
    tenantId?: SortOrder
  }

  export type WeixinProfileAvgOrderByAggregateInput = {
    sex?: SortOrder
  }

  export type WeixinProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    unionid?: SortOrder
    loginOpenid?: SortOrder
    headimgurl?: SortOrder
    nickname?: SortOrder
    sex?: SortOrder
    customerId?: SortOrder
    tenantId?: SortOrder
  }

  export type WeixinProfileMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    unionid?: SortOrder
    loginOpenid?: SortOrder
    headimgurl?: SortOrder
    nickname?: SortOrder
    sex?: SortOrder
    customerId?: SortOrder
    tenantId?: SortOrder
  }

  export type WeixinProfileSumOrderByAggregateInput = {
    sex?: SortOrder
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customerId?: SortOrder
    productType?: SortOrder
    plan?: SortOrder
    amount?: SortOrder
    expireAt?: SortOrder
    tenantId?: SortOrder
  }

  export type ProfileAvgOrderByAggregateInput = {
    plan?: SortOrder
    amount?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customerId?: SortOrder
    productType?: SortOrder
    plan?: SortOrder
    amount?: SortOrder
    expireAt?: SortOrder
    tenantId?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customerId?: SortOrder
    productType?: SortOrder
    plan?: SortOrder
    amount?: SortOrder
    expireAt?: SortOrder
    tenantId?: SortOrder
  }

  export type ProfileSumOrderByAggregateInput = {
    plan?: SortOrder
    amount?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type customerPreSignupCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    verifyCode?: SortOrder
    appId?: SortOrder
    tenantId?: SortOrder
  }

  export type customerPreSignupMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    verifyCode?: SortOrder
    appId?: SortOrder
    tenantId?: SortOrder
  }

  export type customerPreSignupMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    verifyCode?: SortOrder
    appId?: SortOrder
    tenantId?: SortOrder
  }

  export type LegacyProfileCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customerId?: SortOrder
    license?: SortOrder
    refreshToken?: SortOrder
  }

  export type LegacyProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customerId?: SortOrder
    license?: SortOrder
    refreshToken?: SortOrder
  }

  export type LegacyProfileMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customerId?: SortOrder
    license?: SortOrder
    refreshToken?: SortOrder
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type ProductSnapshotCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    snapshotPrice?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    tenantId?: SortOrder
  }

  export type ProductSnapshotAvgOrderByAggregateInput = {
    snapshotPrice?: SortOrder
  }

  export type ProductSnapshotMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    snapshotPrice?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    tenantId?: SortOrder
  }

  export type ProductSnapshotMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    snapshotPrice?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    tenantId?: SortOrder
  }

  export type ProductSnapshotSumOrderByAggregateInput = {
    snapshotPrice?: SortOrder
  }

  export type EnumOrderStatusFilter = {
    equals?: OrderStatus
    in?: Enumerable<OrderStatus>
    notIn?: Enumerable<OrderStatus>
    not?: NestedEnumOrderStatusFilter | OrderStatus
  }

  export type PayRelationFilter = {
    is?: PayWhereInput | null
    isNot?: PayWhereInput | null
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serial?: SortOrder
    status?: SortOrder
    customerId?: SortOrder
    appId?: SortOrder
    isDeleted?: SortOrder
    tenantId?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    serial?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serial?: SortOrder
    status?: SortOrder
    customerId?: SortOrder
    appId?: SortOrder
    isDeleted?: SortOrder
    tenantId?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serial?: SortOrder
    status?: SortOrder
    customerId?: SortOrder
    appId?: SortOrder
    isDeleted?: SortOrder
    tenantId?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    serial?: SortOrder
  }

  export type EnumOrderStatusWithAggregatesFilter = {
    equals?: OrderStatus
    in?: Enumerable<OrderStatus>
    notIn?: Enumerable<OrderStatus>
    not?: NestedEnumOrderStatusWithAggregatesFilter | OrderStatus
    _count?: NestedIntFilter
    _min?: NestedEnumOrderStatusFilter
    _max?: NestedEnumOrderStatusFilter
  }

  export type ProductCreateNestedManyWithoutAppInput = {
    create?: XOR<Enumerable<ProductCreateWithoutAppInput>, Enumerable<ProductUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutAppInput>
    createMany?: ProductCreateManyAppInputEnvelope
    connect?: Enumerable<ProductWhereUniqueInput>
  }

  export type CustomerCreateNestedManyWithoutAppInput = {
    create?: XOR<Enumerable<CustomerCreateWithoutAppInput>, Enumerable<CustomerUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<CustomerCreateOrConnectWithoutAppInput>
    createMany?: CustomerCreateManyAppInputEnvelope
    connect?: Enumerable<CustomerWhereUniqueInput>
  }

  export type OrderCreateNestedManyWithoutAppInput = {
    create?: XOR<Enumerable<OrderCreateWithoutAppInput>, Enumerable<OrderUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutAppInput>
    createMany?: OrderCreateManyAppInputEnvelope
    connect?: Enumerable<OrderWhereUniqueInput>
  }

  export type TenantCreateNestedOneWithoutAppInput = {
    create?: XOR<TenantCreateWithoutAppInput, TenantUncheckedCreateWithoutAppInput>
    connectOrCreate?: TenantCreateOrConnectWithoutAppInput
    connect?: TenantWhereUniqueInput
  }

  export type ProductUncheckedCreateNestedManyWithoutAppInput = {
    create?: XOR<Enumerable<ProductCreateWithoutAppInput>, Enumerable<ProductUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutAppInput>
    createMany?: ProductCreateManyAppInputEnvelope
    connect?: Enumerable<ProductWhereUniqueInput>
  }

  export type CustomerUncheckedCreateNestedManyWithoutAppInput = {
    create?: XOR<Enumerable<CustomerCreateWithoutAppInput>, Enumerable<CustomerUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<CustomerCreateOrConnectWithoutAppInput>
    createMany?: CustomerCreateManyAppInputEnvelope
    connect?: Enumerable<CustomerWhereUniqueInput>
  }

  export type OrderUncheckedCreateNestedManyWithoutAppInput = {
    create?: XOR<Enumerable<OrderCreateWithoutAppInput>, Enumerable<OrderUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutAppInput>
    createMany?: OrderCreateManyAppInputEnvelope
    connect?: Enumerable<OrderWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type ProductUpdateManyWithoutAppNestedInput = {
    create?: XOR<Enumerable<ProductCreateWithoutAppInput>, Enumerable<ProductUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutAppInput>
    upsert?: Enumerable<ProductUpsertWithWhereUniqueWithoutAppInput>
    createMany?: ProductCreateManyAppInputEnvelope
    set?: Enumerable<ProductWhereUniqueInput>
    disconnect?: Enumerable<ProductWhereUniqueInput>
    delete?: Enumerable<ProductWhereUniqueInput>
    connect?: Enumerable<ProductWhereUniqueInput>
    update?: Enumerable<ProductUpdateWithWhereUniqueWithoutAppInput>
    updateMany?: Enumerable<ProductUpdateManyWithWhereWithoutAppInput>
    deleteMany?: Enumerable<ProductScalarWhereInput>
  }

  export type CustomerUpdateManyWithoutAppNestedInput = {
    create?: XOR<Enumerable<CustomerCreateWithoutAppInput>, Enumerable<CustomerUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<CustomerCreateOrConnectWithoutAppInput>
    upsert?: Enumerable<CustomerUpsertWithWhereUniqueWithoutAppInput>
    createMany?: CustomerCreateManyAppInputEnvelope
    set?: Enumerable<CustomerWhereUniqueInput>
    disconnect?: Enumerable<CustomerWhereUniqueInput>
    delete?: Enumerable<CustomerWhereUniqueInput>
    connect?: Enumerable<CustomerWhereUniqueInput>
    update?: Enumerable<CustomerUpdateWithWhereUniqueWithoutAppInput>
    updateMany?: Enumerable<CustomerUpdateManyWithWhereWithoutAppInput>
    deleteMany?: Enumerable<CustomerScalarWhereInput>
  }

  export type OrderUpdateManyWithoutAppNestedInput = {
    create?: XOR<Enumerable<OrderCreateWithoutAppInput>, Enumerable<OrderUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutAppInput>
    upsert?: Enumerable<OrderUpsertWithWhereUniqueWithoutAppInput>
    createMany?: OrderCreateManyAppInputEnvelope
    set?: Enumerable<OrderWhereUniqueInput>
    disconnect?: Enumerable<OrderWhereUniqueInput>
    delete?: Enumerable<OrderWhereUniqueInput>
    connect?: Enumerable<OrderWhereUniqueInput>
    update?: Enumerable<OrderUpdateWithWhereUniqueWithoutAppInput>
    updateMany?: Enumerable<OrderUpdateManyWithWhereWithoutAppInput>
    deleteMany?: Enumerable<OrderScalarWhereInput>
  }

  export type TenantUpdateOneWithoutAppNestedInput = {
    create?: XOR<TenantCreateWithoutAppInput, TenantUncheckedCreateWithoutAppInput>
    connectOrCreate?: TenantCreateOrConnectWithoutAppInput
    upsert?: TenantUpsertWithoutAppInput
    disconnect?: boolean
    delete?: boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<TenantUpdateWithoutAppInput, TenantUncheckedUpdateWithoutAppInput>
  }

  export type ProductUncheckedUpdateManyWithoutAppNestedInput = {
    create?: XOR<Enumerable<ProductCreateWithoutAppInput>, Enumerable<ProductUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutAppInput>
    upsert?: Enumerable<ProductUpsertWithWhereUniqueWithoutAppInput>
    createMany?: ProductCreateManyAppInputEnvelope
    set?: Enumerable<ProductWhereUniqueInput>
    disconnect?: Enumerable<ProductWhereUniqueInput>
    delete?: Enumerable<ProductWhereUniqueInput>
    connect?: Enumerable<ProductWhereUniqueInput>
    update?: Enumerable<ProductUpdateWithWhereUniqueWithoutAppInput>
    updateMany?: Enumerable<ProductUpdateManyWithWhereWithoutAppInput>
    deleteMany?: Enumerable<ProductScalarWhereInput>
  }

  export type CustomerUncheckedUpdateManyWithoutAppNestedInput = {
    create?: XOR<Enumerable<CustomerCreateWithoutAppInput>, Enumerable<CustomerUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<CustomerCreateOrConnectWithoutAppInput>
    upsert?: Enumerable<CustomerUpsertWithWhereUniqueWithoutAppInput>
    createMany?: CustomerCreateManyAppInputEnvelope
    set?: Enumerable<CustomerWhereUniqueInput>
    disconnect?: Enumerable<CustomerWhereUniqueInput>
    delete?: Enumerable<CustomerWhereUniqueInput>
    connect?: Enumerable<CustomerWhereUniqueInput>
    update?: Enumerable<CustomerUpdateWithWhereUniqueWithoutAppInput>
    updateMany?: Enumerable<CustomerUpdateManyWithWhereWithoutAppInput>
    deleteMany?: Enumerable<CustomerScalarWhereInput>
  }

  export type OrderUncheckedUpdateManyWithoutAppNestedInput = {
    create?: XOR<Enumerable<OrderCreateWithoutAppInput>, Enumerable<OrderUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutAppInput>
    upsert?: Enumerable<OrderUpsertWithWhereUniqueWithoutAppInput>
    createMany?: OrderCreateManyAppInputEnvelope
    set?: Enumerable<OrderWhereUniqueInput>
    disconnect?: Enumerable<OrderWhereUniqueInput>
    delete?: Enumerable<OrderWhereUniqueInput>
    connect?: Enumerable<OrderWhereUniqueInput>
    update?: Enumerable<OrderUpdateWithWhereUniqueWithoutAppInput>
    updateMany?: Enumerable<OrderUpdateManyWithWhereWithoutAppInput>
    deleteMany?: Enumerable<OrderScalarWhereInput>
  }

  export type AppCreateNestedManyWithoutTenantInput = {
    create?: XOR<Enumerable<AppCreateWithoutTenantInput>, Enumerable<AppUncheckedCreateWithoutTenantInput>>
    connectOrCreate?: Enumerable<AppCreateOrConnectWithoutTenantInput>
    createMany?: AppCreateManyTenantInputEnvelope
    connect?: Enumerable<AppWhereUniqueInput>
  }

  export type AppUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<Enumerable<AppCreateWithoutTenantInput>, Enumerable<AppUncheckedCreateWithoutTenantInput>>
    connectOrCreate?: Enumerable<AppCreateOrConnectWithoutTenantInput>
    createMany?: AppCreateManyTenantInputEnvelope
    connect?: Enumerable<AppWhereUniqueInput>
  }

  export type AppUpdateManyWithoutTenantNestedInput = {
    create?: XOR<Enumerable<AppCreateWithoutTenantInput>, Enumerable<AppUncheckedCreateWithoutTenantInput>>
    connectOrCreate?: Enumerable<AppCreateOrConnectWithoutTenantInput>
    upsert?: Enumerable<AppUpsertWithWhereUniqueWithoutTenantInput>
    createMany?: AppCreateManyTenantInputEnvelope
    set?: Enumerable<AppWhereUniqueInput>
    disconnect?: Enumerable<AppWhereUniqueInput>
    delete?: Enumerable<AppWhereUniqueInput>
    connect?: Enumerable<AppWhereUniqueInput>
    update?: Enumerable<AppUpdateWithWhereUniqueWithoutTenantInput>
    updateMany?: Enumerable<AppUpdateManyWithWhereWithoutTenantInput>
    deleteMany?: Enumerable<AppScalarWhereInput>
  }

  export type AppUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<Enumerable<AppCreateWithoutTenantInput>, Enumerable<AppUncheckedCreateWithoutTenantInput>>
    connectOrCreate?: Enumerable<AppCreateOrConnectWithoutTenantInput>
    upsert?: Enumerable<AppUpsertWithWhereUniqueWithoutTenantInput>
    createMany?: AppCreateManyTenantInputEnvelope
    set?: Enumerable<AppWhereUniqueInput>
    disconnect?: Enumerable<AppWhereUniqueInput>
    delete?: Enumerable<AppWhereUniqueInput>
    connect?: Enumerable<AppWhereUniqueInput>
    update?: Enumerable<AppUpdateWithWhereUniqueWithoutTenantInput>
    updateMany?: Enumerable<AppUpdateManyWithWhereWithoutTenantInput>
    deleteMany?: Enumerable<AppScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ArticleCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<ArticleCreateWithoutProfileInput>, Enumerable<ArticleUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<ArticleCreateOrConnectWithoutProfileInput>
    createMany?: ArticleCreateManyProfileInputEnvelope
    connect?: Enumerable<ArticleWhereUniqueInput>
  }

  export type JYFreeCountCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<JYFreeCountCreateWithoutProfileInput>, Enumerable<JYFreeCountUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<JYFreeCountCreateOrConnectWithoutProfileInput>
    createMany?: JYFreeCountCreateManyProfileInputEnvelope
    connect?: Enumerable<JYFreeCountWhereUniqueInput>
  }

  export type ArticleUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<ArticleCreateWithoutProfileInput>, Enumerable<ArticleUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<ArticleCreateOrConnectWithoutProfileInput>
    createMany?: ArticleCreateManyProfileInputEnvelope
    connect?: Enumerable<ArticleWhereUniqueInput>
  }

  export type JYFreeCountUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<JYFreeCountCreateWithoutProfileInput>, Enumerable<JYFreeCountUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<JYFreeCountCreateOrConnectWithoutProfileInput>
    createMany?: JYFreeCountCreateManyProfileInputEnvelope
    connect?: Enumerable<JYFreeCountWhereUniqueInput>
  }

  export type ArticleUpdateManyWithoutProfileNestedInput = {
    create?: XOR<Enumerable<ArticleCreateWithoutProfileInput>, Enumerable<ArticleUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<ArticleCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<ArticleUpsertWithWhereUniqueWithoutProfileInput>
    createMany?: ArticleCreateManyProfileInputEnvelope
    set?: Enumerable<ArticleWhereUniqueInput>
    disconnect?: Enumerable<ArticleWhereUniqueInput>
    delete?: Enumerable<ArticleWhereUniqueInput>
    connect?: Enumerable<ArticleWhereUniqueInput>
    update?: Enumerable<ArticleUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<ArticleUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<ArticleScalarWhereInput>
  }

  export type JYFreeCountUpdateManyWithoutProfileNestedInput = {
    create?: XOR<Enumerable<JYFreeCountCreateWithoutProfileInput>, Enumerable<JYFreeCountUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<JYFreeCountCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<JYFreeCountUpsertWithWhereUniqueWithoutProfileInput>
    createMany?: JYFreeCountCreateManyProfileInputEnvelope
    set?: Enumerable<JYFreeCountWhereUniqueInput>
    disconnect?: Enumerable<JYFreeCountWhereUniqueInput>
    delete?: Enumerable<JYFreeCountWhereUniqueInput>
    connect?: Enumerable<JYFreeCountWhereUniqueInput>
    update?: Enumerable<JYFreeCountUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<JYFreeCountUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<JYFreeCountScalarWhereInput>
  }

  export type ArticleUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<Enumerable<ArticleCreateWithoutProfileInput>, Enumerable<ArticleUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<ArticleCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<ArticleUpsertWithWhereUniqueWithoutProfileInput>
    createMany?: ArticleCreateManyProfileInputEnvelope
    set?: Enumerable<ArticleWhereUniqueInput>
    disconnect?: Enumerable<ArticleWhereUniqueInput>
    delete?: Enumerable<ArticleWhereUniqueInput>
    connect?: Enumerable<ArticleWhereUniqueInput>
    update?: Enumerable<ArticleUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<ArticleUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<ArticleScalarWhereInput>
  }

  export type JYFreeCountUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<Enumerable<JYFreeCountCreateWithoutProfileInput>, Enumerable<JYFreeCountUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<JYFreeCountCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<JYFreeCountUpsertWithWhereUniqueWithoutProfileInput>
    createMany?: JYFreeCountCreateManyProfileInputEnvelope
    set?: Enumerable<JYFreeCountWhereUniqueInput>
    disconnect?: Enumerable<JYFreeCountWhereUniqueInput>
    delete?: Enumerable<JYFreeCountWhereUniqueInput>
    connect?: Enumerable<JYFreeCountWhereUniqueInput>
    update?: Enumerable<JYFreeCountUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<JYFreeCountUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<JYFreeCountScalarWhereInput>
  }

  export type JYProfileCreateNestedOneWithoutFreeCountsInput = {
    create?: XOR<JYProfileCreateWithoutFreeCountsInput, JYProfileUncheckedCreateWithoutFreeCountsInput>
    connectOrCreate?: JYProfileCreateOrConnectWithoutFreeCountsInput
    connect?: JYProfileWhereUniqueInput
  }

  export type JYProfileUpdateOneRequiredWithoutFreeCountsNestedInput = {
    create?: XOR<JYProfileCreateWithoutFreeCountsInput, JYProfileUncheckedCreateWithoutFreeCountsInput>
    connectOrCreate?: JYProfileCreateOrConnectWithoutFreeCountsInput
    upsert?: JYProfileUpsertWithoutFreeCountsInput
    connect?: JYProfileWhereUniqueInput
    update?: XOR<JYProfileUpdateWithoutFreeCountsInput, JYProfileUncheckedUpdateWithoutFreeCountsInput>
  }

  export type JYProfileCreateNestedOneWithoutArticlesInput = {
    create?: XOR<JYProfileCreateWithoutArticlesInput, JYProfileUncheckedCreateWithoutArticlesInput>
    connectOrCreate?: JYProfileCreateOrConnectWithoutArticlesInput
    connect?: JYProfileWhereUniqueInput
  }

  export type JYProfileUpdateOneRequiredWithoutArticlesNestedInput = {
    create?: XOR<JYProfileCreateWithoutArticlesInput, JYProfileUncheckedCreateWithoutArticlesInput>
    connectOrCreate?: JYProfileCreateOrConnectWithoutArticlesInput
    upsert?: JYProfileUpsertWithoutArticlesInput
    connect?: JYProfileWhereUniqueInput
    update?: XOR<JYProfileUpdateWithoutArticlesInput, JYProfileUncheckedUpdateWithoutArticlesInput>
  }

  export type ProductSnapshotCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<ProductSnapshotCreateWithoutProductInput>, Enumerable<ProductSnapshotUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<ProductSnapshotCreateOrConnectWithoutProductInput>
    createMany?: ProductSnapshotCreateManyProductInputEnvelope
    connect?: Enumerable<ProductSnapshotWhereUniqueInput>
  }

  export type AppCreateNestedOneWithoutProductsInput = {
    create?: XOR<AppCreateWithoutProductsInput, AppUncheckedCreateWithoutProductsInput>
    connectOrCreate?: AppCreateOrConnectWithoutProductsInput
    connect?: AppWhereUniqueInput
  }

  export type ProductSnapshotUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<ProductSnapshotCreateWithoutProductInput>, Enumerable<ProductSnapshotUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<ProductSnapshotCreateOrConnectWithoutProductInput>
    createMany?: ProductSnapshotCreateManyProductInputEnvelope
    connect?: Enumerable<ProductSnapshotWhereUniqueInput>
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumProductTypeFieldUpdateOperationsInput = {
    set?: ProductType
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductSnapshotUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<ProductSnapshotCreateWithoutProductInput>, Enumerable<ProductSnapshotUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<ProductSnapshotCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<ProductSnapshotUpsertWithWhereUniqueWithoutProductInput>
    createMany?: ProductSnapshotCreateManyProductInputEnvelope
    set?: Enumerable<ProductSnapshotWhereUniqueInput>
    disconnect?: Enumerable<ProductSnapshotWhereUniqueInput>
    delete?: Enumerable<ProductSnapshotWhereUniqueInput>
    connect?: Enumerable<ProductSnapshotWhereUniqueInput>
    update?: Enumerable<ProductSnapshotUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<ProductSnapshotUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<ProductSnapshotScalarWhereInput>
  }

  export type AppUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<AppCreateWithoutProductsInput, AppUncheckedCreateWithoutProductsInput>
    connectOrCreate?: AppCreateOrConnectWithoutProductsInput
    upsert?: AppUpsertWithoutProductsInput
    connect?: AppWhereUniqueInput
    update?: XOR<AppUpdateWithoutProductsInput, AppUncheckedUpdateWithoutProductsInput>
  }

  export type ProductSnapshotUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<ProductSnapshotCreateWithoutProductInput>, Enumerable<ProductSnapshotUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<ProductSnapshotCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<ProductSnapshotUpsertWithWhereUniqueWithoutProductInput>
    createMany?: ProductSnapshotCreateManyProductInputEnvelope
    set?: Enumerable<ProductSnapshotWhereUniqueInput>
    disconnect?: Enumerable<ProductSnapshotWhereUniqueInput>
    delete?: Enumerable<ProductSnapshotWhereUniqueInput>
    connect?: Enumerable<ProductSnapshotWhereUniqueInput>
    update?: Enumerable<ProductSnapshotUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<ProductSnapshotUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<ProductSnapshotScalarWhereInput>
  }

  export type OrderCreateNestedOneWithoutPayInput = {
    create?: XOR<OrderCreateWithoutPayInput, OrderUncheckedCreateWithoutPayInput>
    connectOrCreate?: OrderCreateOrConnectWithoutPayInput
    connect?: OrderWhereUniqueInput
  }

  export type EnumPayStatusFieldUpdateOperationsInput = {
    set?: PayStatus
  }

  export type OrderUpdateOneRequiredWithoutPayNestedInput = {
    create?: XOR<OrderCreateWithoutPayInput, OrderUncheckedCreateWithoutPayInput>
    connectOrCreate?: OrderCreateOrConnectWithoutPayInput
    upsert?: OrderUpsertWithoutPayInput
    connect?: OrderWhereUniqueInput
    update?: XOR<OrderUpdateWithoutPayInput, OrderUncheckedUpdateWithoutPayInput>
  }

  export type AppCreateNestedOneWithoutCustomersInput = {
    create?: XOR<AppCreateWithoutCustomersInput, AppUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: AppCreateOrConnectWithoutCustomersInput
    connect?: AppWhereUniqueInput
  }

  export type OrderCreateNestedManyWithoutCustomerInput = {
    create?: XOR<Enumerable<OrderCreateWithoutCustomerInput>, Enumerable<OrderUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutCustomerInput>
    createMany?: OrderCreateManyCustomerInputEnvelope
    connect?: Enumerable<OrderWhereUniqueInput>
  }

  export type LegacyProfileCreateNestedOneWithoutCustomerInput = {
    create?: XOR<LegacyProfileCreateWithoutCustomerInput, LegacyProfileUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: LegacyProfileCreateOrConnectWithoutCustomerInput
    connect?: LegacyProfileWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutCustomerInput = {
    create?: XOR<ProfileCreateWithoutCustomerInput, ProfileUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutCustomerInput
    connect?: ProfileWhereUniqueInput
  }

  export type WeixinProfileCreateNestedOneWithoutCustomerInput = {
    create?: XOR<WeixinProfileCreateWithoutCustomerInput, WeixinProfileUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: WeixinProfileCreateOrConnectWithoutCustomerInput
    connect?: WeixinProfileWhereUniqueInput
  }

  export type OrderUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<Enumerable<OrderCreateWithoutCustomerInput>, Enumerable<OrderUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutCustomerInput>
    createMany?: OrderCreateManyCustomerInputEnvelope
    connect?: Enumerable<OrderWhereUniqueInput>
  }

  export type LegacyProfileUncheckedCreateNestedOneWithoutCustomerInput = {
    create?: XOR<LegacyProfileCreateWithoutCustomerInput, LegacyProfileUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: LegacyProfileCreateOrConnectWithoutCustomerInput
    connect?: LegacyProfileWhereUniqueInput
  }

  export type ProfileUncheckedCreateNestedOneWithoutCustomerInput = {
    create?: XOR<ProfileCreateWithoutCustomerInput, ProfileUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutCustomerInput
    connect?: ProfileWhereUniqueInput
  }

  export type WeixinProfileUncheckedCreateNestedOneWithoutCustomerInput = {
    create?: XOR<WeixinProfileCreateWithoutCustomerInput, WeixinProfileUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: WeixinProfileCreateOrConnectWithoutCustomerInput
    connect?: WeixinProfileWhereUniqueInput
  }

  export type AppUpdateOneRequiredWithoutCustomersNestedInput = {
    create?: XOR<AppCreateWithoutCustomersInput, AppUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: AppCreateOrConnectWithoutCustomersInput
    upsert?: AppUpsertWithoutCustomersInput
    connect?: AppWhereUniqueInput
    update?: XOR<AppUpdateWithoutCustomersInput, AppUncheckedUpdateWithoutCustomersInput>
  }

  export type OrderUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<Enumerable<OrderCreateWithoutCustomerInput>, Enumerable<OrderUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutCustomerInput>
    upsert?: Enumerable<OrderUpsertWithWhereUniqueWithoutCustomerInput>
    createMany?: OrderCreateManyCustomerInputEnvelope
    set?: Enumerable<OrderWhereUniqueInput>
    disconnect?: Enumerable<OrderWhereUniqueInput>
    delete?: Enumerable<OrderWhereUniqueInput>
    connect?: Enumerable<OrderWhereUniqueInput>
    update?: Enumerable<OrderUpdateWithWhereUniqueWithoutCustomerInput>
    updateMany?: Enumerable<OrderUpdateManyWithWhereWithoutCustomerInput>
    deleteMany?: Enumerable<OrderScalarWhereInput>
  }

  export type LegacyProfileUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<LegacyProfileCreateWithoutCustomerInput, LegacyProfileUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: LegacyProfileCreateOrConnectWithoutCustomerInput
    upsert?: LegacyProfileUpsertWithoutCustomerInput
    disconnect?: boolean
    delete?: boolean
    connect?: LegacyProfileWhereUniqueInput
    update?: XOR<LegacyProfileUpdateWithoutCustomerInput, LegacyProfileUncheckedUpdateWithoutCustomerInput>
  }

  export type ProfileUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<ProfileCreateWithoutCustomerInput, ProfileUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutCustomerInput
    upsert?: ProfileUpsertWithoutCustomerInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutCustomerInput, ProfileUncheckedUpdateWithoutCustomerInput>
  }

  export type WeixinProfileUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<WeixinProfileCreateWithoutCustomerInput, WeixinProfileUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: WeixinProfileCreateOrConnectWithoutCustomerInput
    upsert?: WeixinProfileUpsertWithoutCustomerInput
    disconnect?: boolean
    delete?: boolean
    connect?: WeixinProfileWhereUniqueInput
    update?: XOR<WeixinProfileUpdateWithoutCustomerInput, WeixinProfileUncheckedUpdateWithoutCustomerInput>
  }

  export type OrderUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<Enumerable<OrderCreateWithoutCustomerInput>, Enumerable<OrderUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<OrderCreateOrConnectWithoutCustomerInput>
    upsert?: Enumerable<OrderUpsertWithWhereUniqueWithoutCustomerInput>
    createMany?: OrderCreateManyCustomerInputEnvelope
    set?: Enumerable<OrderWhereUniqueInput>
    disconnect?: Enumerable<OrderWhereUniqueInput>
    delete?: Enumerable<OrderWhereUniqueInput>
    connect?: Enumerable<OrderWhereUniqueInput>
    update?: Enumerable<OrderUpdateWithWhereUniqueWithoutCustomerInput>
    updateMany?: Enumerable<OrderUpdateManyWithWhereWithoutCustomerInput>
    deleteMany?: Enumerable<OrderScalarWhereInput>
  }

  export type LegacyProfileUncheckedUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<LegacyProfileCreateWithoutCustomerInput, LegacyProfileUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: LegacyProfileCreateOrConnectWithoutCustomerInput
    upsert?: LegacyProfileUpsertWithoutCustomerInput
    disconnect?: boolean
    delete?: boolean
    connect?: LegacyProfileWhereUniqueInput
    update?: XOR<LegacyProfileUpdateWithoutCustomerInput, LegacyProfileUncheckedUpdateWithoutCustomerInput>
  }

  export type ProfileUncheckedUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<ProfileCreateWithoutCustomerInput, ProfileUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutCustomerInput
    upsert?: ProfileUpsertWithoutCustomerInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutCustomerInput, ProfileUncheckedUpdateWithoutCustomerInput>
  }

  export type WeixinProfileUncheckedUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<WeixinProfileCreateWithoutCustomerInput, WeixinProfileUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: WeixinProfileCreateOrConnectWithoutCustomerInput
    upsert?: WeixinProfileUpsertWithoutCustomerInput
    disconnect?: boolean
    delete?: boolean
    connect?: WeixinProfileWhereUniqueInput
    update?: XOR<WeixinProfileUpdateWithoutCustomerInput, WeixinProfileUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerCreateNestedOneWithoutWeixinProfileInput = {
    create?: XOR<CustomerCreateWithoutWeixinProfileInput, CustomerUncheckedCreateWithoutWeixinProfileInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutWeixinProfileInput
    connect?: CustomerWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutWeixinProfileNestedInput = {
    create?: XOR<CustomerCreateWithoutWeixinProfileInput, CustomerUncheckedCreateWithoutWeixinProfileInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutWeixinProfileInput
    upsert?: CustomerUpsertWithoutWeixinProfileInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<CustomerUpdateWithoutWeixinProfileInput, CustomerUncheckedUpdateWithoutWeixinProfileInput>
  }

  export type CustomerCreateNestedOneWithoutProfileInput = {
    create?: XOR<CustomerCreateWithoutProfileInput, CustomerUncheckedCreateWithoutProfileInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutProfileInput
    connect?: CustomerWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type CustomerUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<CustomerCreateWithoutProfileInput, CustomerUncheckedCreateWithoutProfileInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutProfileInput
    upsert?: CustomerUpsertWithoutProfileInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<CustomerUpdateWithoutProfileInput, CustomerUncheckedUpdateWithoutProfileInput>
  }

  export type CustomerCreateNestedOneWithoutLegacyProfileInput = {
    create?: XOR<CustomerCreateWithoutLegacyProfileInput, CustomerUncheckedCreateWithoutLegacyProfileInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutLegacyProfileInput
    connect?: CustomerWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutLegacyProfileNestedInput = {
    create?: XOR<CustomerCreateWithoutLegacyProfileInput, CustomerUncheckedCreateWithoutLegacyProfileInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutLegacyProfileInput
    upsert?: CustomerUpsertWithoutLegacyProfileInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<CustomerUpdateWithoutLegacyProfileInput, CustomerUncheckedUpdateWithoutLegacyProfileInput>
  }

  export type OrderCreateNestedOneWithoutProductSnapshotsInput = {
    create?: XOR<OrderCreateWithoutProductSnapshotsInput, OrderUncheckedCreateWithoutProductSnapshotsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutProductSnapshotsInput
    connect?: OrderWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutProductSnapshotsInput = {
    create?: XOR<ProductCreateWithoutProductSnapshotsInput, ProductUncheckedCreateWithoutProductSnapshotsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductSnapshotsInput
    connect?: ProductWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutProductSnapshotsNestedInput = {
    create?: XOR<OrderCreateWithoutProductSnapshotsInput, OrderUncheckedCreateWithoutProductSnapshotsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutProductSnapshotsInput
    upsert?: OrderUpsertWithoutProductSnapshotsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<OrderUpdateWithoutProductSnapshotsInput, OrderUncheckedUpdateWithoutProductSnapshotsInput>
  }

  export type ProductUpdateOneRequiredWithoutProductSnapshotsNestedInput = {
    create?: XOR<ProductCreateWithoutProductSnapshotsInput, ProductUncheckedCreateWithoutProductSnapshotsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductSnapshotsInput
    upsert?: ProductUpsertWithoutProductSnapshotsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<ProductUpdateWithoutProductSnapshotsInput, ProductUncheckedUpdateWithoutProductSnapshotsInput>
  }

  export type CustomerCreateNestedOneWithoutOrdersInput = {
    create?: XOR<CustomerCreateWithoutOrdersInput, CustomerUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutOrdersInput
    connect?: CustomerWhereUniqueInput
  }

  export type PayCreateNestedOneWithoutOrderInput = {
    create?: XOR<PayCreateWithoutOrderInput, PayUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PayCreateOrConnectWithoutOrderInput
    connect?: PayWhereUniqueInput
  }

  export type ProductSnapshotCreateNestedManyWithoutOrderInput = {
    create?: XOR<Enumerable<ProductSnapshotCreateWithoutOrderInput>, Enumerable<ProductSnapshotUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<ProductSnapshotCreateOrConnectWithoutOrderInput>
    createMany?: ProductSnapshotCreateManyOrderInputEnvelope
    connect?: Enumerable<ProductSnapshotWhereUniqueInput>
  }

  export type AppCreateNestedOneWithoutOrdersInput = {
    create?: XOR<AppCreateWithoutOrdersInput, AppUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: AppCreateOrConnectWithoutOrdersInput
    connect?: AppWhereUniqueInput
  }

  export type PayUncheckedCreateNestedOneWithoutOrderInput = {
    create?: XOR<PayCreateWithoutOrderInput, PayUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PayCreateOrConnectWithoutOrderInput
    connect?: PayWhereUniqueInput
  }

  export type ProductSnapshotUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<Enumerable<ProductSnapshotCreateWithoutOrderInput>, Enumerable<ProductSnapshotUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<ProductSnapshotCreateOrConnectWithoutOrderInput>
    createMany?: ProductSnapshotCreateManyOrderInputEnvelope
    connect?: Enumerable<ProductSnapshotWhereUniqueInput>
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: OrderStatus
  }

  export type CustomerUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<CustomerCreateWithoutOrdersInput, CustomerUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutOrdersInput
    upsert?: CustomerUpsertWithoutOrdersInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<CustomerUpdateWithoutOrdersInput, CustomerUncheckedUpdateWithoutOrdersInput>
  }

  export type PayUpdateOneWithoutOrderNestedInput = {
    create?: XOR<PayCreateWithoutOrderInput, PayUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PayCreateOrConnectWithoutOrderInput
    upsert?: PayUpsertWithoutOrderInput
    disconnect?: boolean
    delete?: boolean
    connect?: PayWhereUniqueInput
    update?: XOR<PayUpdateWithoutOrderInput, PayUncheckedUpdateWithoutOrderInput>
  }

  export type ProductSnapshotUpdateManyWithoutOrderNestedInput = {
    create?: XOR<Enumerable<ProductSnapshotCreateWithoutOrderInput>, Enumerable<ProductSnapshotUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<ProductSnapshotCreateOrConnectWithoutOrderInput>
    upsert?: Enumerable<ProductSnapshotUpsertWithWhereUniqueWithoutOrderInput>
    createMany?: ProductSnapshotCreateManyOrderInputEnvelope
    set?: Enumerable<ProductSnapshotWhereUniqueInput>
    disconnect?: Enumerable<ProductSnapshotWhereUniqueInput>
    delete?: Enumerable<ProductSnapshotWhereUniqueInput>
    connect?: Enumerable<ProductSnapshotWhereUniqueInput>
    update?: Enumerable<ProductSnapshotUpdateWithWhereUniqueWithoutOrderInput>
    updateMany?: Enumerable<ProductSnapshotUpdateManyWithWhereWithoutOrderInput>
    deleteMany?: Enumerable<ProductSnapshotScalarWhereInput>
  }

  export type AppUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<AppCreateWithoutOrdersInput, AppUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: AppCreateOrConnectWithoutOrdersInput
    upsert?: AppUpsertWithoutOrdersInput
    connect?: AppWhereUniqueInput
    update?: XOR<AppUpdateWithoutOrdersInput, AppUncheckedUpdateWithoutOrdersInput>
  }

  export type PayUncheckedUpdateOneWithoutOrderNestedInput = {
    create?: XOR<PayCreateWithoutOrderInput, PayUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PayCreateOrConnectWithoutOrderInput
    upsert?: PayUpsertWithoutOrderInput
    disconnect?: boolean
    delete?: boolean
    connect?: PayWhereUniqueInput
    update?: XOR<PayUpdateWithoutOrderInput, PayUncheckedUpdateWithoutOrderInput>
  }

  export type ProductSnapshotUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<Enumerable<ProductSnapshotCreateWithoutOrderInput>, Enumerable<ProductSnapshotUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<ProductSnapshotCreateOrConnectWithoutOrderInput>
    upsert?: Enumerable<ProductSnapshotUpsertWithWhereUniqueWithoutOrderInput>
    createMany?: ProductSnapshotCreateManyOrderInputEnvelope
    set?: Enumerable<ProductSnapshotWhereUniqueInput>
    disconnect?: Enumerable<ProductSnapshotWhereUniqueInput>
    delete?: Enumerable<ProductSnapshotWhereUniqueInput>
    connect?: Enumerable<ProductSnapshotWhereUniqueInput>
    update?: Enumerable<ProductSnapshotUpdateWithWhereUniqueWithoutOrderInput>
    updateMany?: Enumerable<ProductSnapshotUpdateManyWithWhereWithoutOrderInput>
    deleteMany?: Enumerable<ProductSnapshotScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumProductTypeFilter = {
    equals?: ProductType
    in?: Enumerable<ProductType>
    notIn?: Enumerable<ProductType>
    not?: NestedEnumProductTypeFilter | ProductType
  }

  export type NestedDecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type NestedEnumProductTypeWithAggregatesFilter = {
    equals?: ProductType
    in?: Enumerable<ProductType>
    notIn?: Enumerable<ProductType>
    not?: NestedEnumProductTypeWithAggregatesFilter | ProductType
    _count?: NestedIntFilter
    _min?: NestedEnumProductTypeFilter
    _max?: NestedEnumProductTypeFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type NestedEnumPayStatusFilter = {
    equals?: PayStatus
    in?: Enumerable<PayStatus>
    notIn?: Enumerable<PayStatus>
    not?: NestedEnumPayStatusFilter | PayStatus
  }

  export type NestedEnumPayStatusWithAggregatesFilter = {
    equals?: PayStatus
    in?: Enumerable<PayStatus>
    notIn?: Enumerable<PayStatus>
    not?: NestedEnumPayStatusWithAggregatesFilter | PayStatus
    _count?: NestedIntFilter
    _min?: NestedEnumPayStatusFilter
    _max?: NestedEnumPayStatusFilter
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedEnumOrderStatusFilter = {
    equals?: OrderStatus
    in?: Enumerable<OrderStatus>
    notIn?: Enumerable<OrderStatus>
    not?: NestedEnumOrderStatusFilter | OrderStatus
  }

  export type NestedEnumOrderStatusWithAggregatesFilter = {
    equals?: OrderStatus
    in?: Enumerable<OrderStatus>
    notIn?: Enumerable<OrderStatus>
    not?: NestedEnumOrderStatusWithAggregatesFilter | OrderStatus
    _count?: NestedIntFilter
    _min?: NestedEnumOrderStatusFilter
    _max?: NestedEnumOrderStatusFilter
  }

  export type ProductCreateWithoutAppInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    price: Decimal | DecimalJsLike | number | string
    productType?: ProductType
    plan?: number | null
    amount?: number | null
    extendedDescriptionData?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: string | null
    storeDuration?: number | null
    hasAds?: string | null
    tecSupport?: string | null
    validityPeriod?: number | null
    isDeleted?: boolean | null
    tenantId?: string
    restricted?: number
    productSnapshots?: ProductSnapshotCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutAppInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    price: Decimal | DecimalJsLike | number | string
    productType?: ProductType
    plan?: number | null
    amount?: number | null
    extendedDescriptionData?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: string | null
    storeDuration?: number | null
    hasAds?: string | null
    tecSupport?: string | null
    validityPeriod?: number | null
    isDeleted?: boolean | null
    tenantId?: string
    restricted?: number
    productSnapshots?: ProductSnapshotUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutAppInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutAppInput, ProductUncheckedCreateWithoutAppInput>
  }

  export type ProductCreateManyAppInputEnvelope = {
    data: Enumerable<ProductCreateManyAppInput>
    skipDuplicates?: boolean
  }

  export type CustomerCreateWithoutAppInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email?: string | null
    hashedPassword?: string | null
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    isDeleted?: boolean | null
    tenantId?: string
    orders?: OrderCreateNestedManyWithoutCustomerInput
    legacyProfile?: LegacyProfileCreateNestedOneWithoutCustomerInput
    profile?: ProfileCreateNestedOneWithoutCustomerInput
    weixinProfile?: WeixinProfileCreateNestedOneWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutAppInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email?: string | null
    hashedPassword?: string | null
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    isDeleted?: boolean | null
    tenantId?: string
    orders?: OrderUncheckedCreateNestedManyWithoutCustomerInput
    legacyProfile?: LegacyProfileUncheckedCreateNestedOneWithoutCustomerInput
    profile?: ProfileUncheckedCreateNestedOneWithoutCustomerInput
    weixinProfile?: WeixinProfileUncheckedCreateNestedOneWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutAppInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutAppInput, CustomerUncheckedCreateWithoutAppInput>
  }

  export type CustomerCreateManyAppInputEnvelope = {
    data: Enumerable<CustomerCreateManyAppInput>
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutAppInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    serial: number
    status: OrderStatus
    isDeleted?: boolean | null
    tenantId?: string
    customer: CustomerCreateNestedOneWithoutOrdersInput
    pay?: PayCreateNestedOneWithoutOrderInput
    productSnapshots?: ProductSnapshotCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutAppInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    serial: number
    status: OrderStatus
    customerId: string
    isDeleted?: boolean | null
    tenantId?: string
    pay?: PayUncheckedCreateNestedOneWithoutOrderInput
    productSnapshots?: ProductSnapshotUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutAppInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutAppInput, OrderUncheckedCreateWithoutAppInput>
  }

  export type OrderCreateManyAppInputEnvelope = {
    data: Enumerable<OrderCreateManyAppInput>
    skipDuplicates?: boolean
  }

  export type TenantCreateWithoutAppInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email: string
    hashedPassword: string
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    role?: string | null
  }

  export type TenantUncheckedCreateWithoutAppInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email: string
    hashedPassword: string
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    role?: string | null
  }

  export type TenantCreateOrConnectWithoutAppInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutAppInput, TenantUncheckedCreateWithoutAppInput>
  }

  export type ProductUpsertWithWhereUniqueWithoutAppInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutAppInput, ProductUncheckedUpdateWithoutAppInput>
    create: XOR<ProductCreateWithoutAppInput, ProductUncheckedCreateWithoutAppInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutAppInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutAppInput, ProductUncheckedUpdateWithoutAppInput>
  }

  export type ProductUpdateManyWithWhereWithoutAppInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutProductsInput>
  }

  export type ProductScalarWhereInput = {
    AND?: Enumerable<ProductScalarWhereInput>
    OR?: Enumerable<ProductScalarWhereInput>
    NOT?: Enumerable<ProductScalarWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    price?: DecimalFilter | Decimal | DecimalJsLike | number | string
    productType?: EnumProductTypeFilter | ProductType
    plan?: IntNullableFilter | number | null
    amount?: IntNullableFilter | number | null
    extendedDescriptionData?: JsonNullableFilter
    fileSize?: StringNullableFilter | string | null
    storeDuration?: IntNullableFilter | number | null
    hasAds?: StringNullableFilter | string | null
    tecSupport?: StringNullableFilter | string | null
    validityPeriod?: IntNullableFilter | number | null
    appId?: StringFilter | string
    isDeleted?: BoolNullableFilter | boolean | null
    tenantId?: StringFilter | string
    restricted?: IntFilter | number
  }

  export type CustomerUpsertWithWhereUniqueWithoutAppInput = {
    where: CustomerWhereUniqueInput
    update: XOR<CustomerUpdateWithoutAppInput, CustomerUncheckedUpdateWithoutAppInput>
    create: XOR<CustomerCreateWithoutAppInput, CustomerUncheckedCreateWithoutAppInput>
  }

  export type CustomerUpdateWithWhereUniqueWithoutAppInput = {
    where: CustomerWhereUniqueInput
    data: XOR<CustomerUpdateWithoutAppInput, CustomerUncheckedUpdateWithoutAppInput>
  }

  export type CustomerUpdateManyWithWhereWithoutAppInput = {
    where: CustomerScalarWhereInput
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyWithoutCustomersInput>
  }

  export type CustomerScalarWhereInput = {
    AND?: Enumerable<CustomerScalarWhereInput>
    OR?: Enumerable<CustomerScalarWhereInput>
    NOT?: Enumerable<CustomerScalarWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    appId?: StringFilter | string
    email?: StringNullableFilter | string | null
    hashedPassword?: StringNullableFilter | string | null
    hashedRefreshToken?: StringNullableFilter | string | null
    recoveryCode?: StringNullableFilter | string | null
    recoveryToken?: StringNullableFilter | string | null
    isDeleted?: BoolNullableFilter | boolean | null
    tenantId?: StringFilter | string
  }

  export type OrderUpsertWithWhereUniqueWithoutAppInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutAppInput, OrderUncheckedUpdateWithoutAppInput>
    create: XOR<OrderCreateWithoutAppInput, OrderUncheckedCreateWithoutAppInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutAppInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutAppInput, OrderUncheckedUpdateWithoutAppInput>
  }

  export type OrderUpdateManyWithWhereWithoutAppInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutOrdersInput>
  }

  export type OrderScalarWhereInput = {
    AND?: Enumerable<OrderScalarWhereInput>
    OR?: Enumerable<OrderScalarWhereInput>
    NOT?: Enumerable<OrderScalarWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    serial?: IntFilter | number
    status?: EnumOrderStatusFilter | OrderStatus
    customerId?: StringFilter | string
    appId?: StringFilter | string
    isDeleted?: BoolNullableFilter | boolean | null
    tenantId?: StringFilter | string
  }

  export type TenantUpsertWithoutAppInput = {
    update: XOR<TenantUpdateWithoutAppInput, TenantUncheckedUpdateWithoutAppInput>
    create: XOR<TenantCreateWithoutAppInput, TenantUncheckedCreateWithoutAppInput>
  }

  export type TenantUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TenantUncheckedUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppCreateWithoutTenantInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hashedAppToken?: string | null
    hashedPassword: string
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    displayName: string
    description?: string | null
    isDeleted?: boolean | null
    products?: ProductCreateNestedManyWithoutAppInput
    customers?: CustomerCreateNestedManyWithoutAppInput
    orders?: OrderCreateNestedManyWithoutAppInput
  }

  export type AppUncheckedCreateWithoutTenantInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hashedAppToken?: string | null
    hashedPassword: string
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    displayName: string
    description?: string | null
    isDeleted?: boolean | null
    products?: ProductUncheckedCreateNestedManyWithoutAppInput
    customers?: CustomerUncheckedCreateNestedManyWithoutAppInput
    orders?: OrderUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppCreateOrConnectWithoutTenantInput = {
    where: AppWhereUniqueInput
    create: XOR<AppCreateWithoutTenantInput, AppUncheckedCreateWithoutTenantInput>
  }

  export type AppCreateManyTenantInputEnvelope = {
    data: Enumerable<AppCreateManyTenantInput>
    skipDuplicates?: boolean
  }

  export type AppUpsertWithWhereUniqueWithoutTenantInput = {
    where: AppWhereUniqueInput
    update: XOR<AppUpdateWithoutTenantInput, AppUncheckedUpdateWithoutTenantInput>
    create: XOR<AppCreateWithoutTenantInput, AppUncheckedCreateWithoutTenantInput>
  }

  export type AppUpdateWithWhereUniqueWithoutTenantInput = {
    where: AppWhereUniqueInput
    data: XOR<AppUpdateWithoutTenantInput, AppUncheckedUpdateWithoutTenantInput>
  }

  export type AppUpdateManyWithWhereWithoutTenantInput = {
    where: AppScalarWhereInput
    data: XOR<AppUpdateManyMutationInput, AppUncheckedUpdateManyWithoutAppInput>
  }

  export type AppScalarWhereInput = {
    AND?: Enumerable<AppScalarWhereInput>
    OR?: Enumerable<AppScalarWhereInput>
    NOT?: Enumerable<AppScalarWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    hashedAppToken?: StringNullableFilter | string | null
    hashedPassword?: StringFilter | string
    hashedRefreshToken?: StringNullableFilter | string | null
    recoveryCode?: StringNullableFilter | string | null
    recoveryToken?: StringNullableFilter | string | null
    displayName?: StringFilter | string
    description?: StringNullableFilter | string | null
    isDeleted?: BoolNullableFilter | boolean | null
    tenantId?: StringFilter | string
  }

  export type ArticleCreateWithoutProfileInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    link: string
    source?: string | null
    title?: string | null
    image?: string | null
    excerpt?: string | null
  }

  export type ArticleUncheckedCreateWithoutProfileInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    link: string
    source?: string | null
    title?: string | null
    image?: string | null
    excerpt?: string | null
  }

  export type ArticleCreateOrConnectWithoutProfileInput = {
    where: ArticleWhereUniqueInput
    create: XOR<ArticleCreateWithoutProfileInput, ArticleUncheckedCreateWithoutProfileInput>
  }

  export type ArticleCreateManyProfileInputEnvelope = {
    data: Enumerable<ArticleCreateManyProfileInput>
    skipDuplicates?: boolean
  }

  export type JYFreeCountCreateWithoutProfileInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    cycle: number
    count: number
  }

  export type JYFreeCountUncheckedCreateWithoutProfileInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    cycle: number
    count: number
  }

  export type JYFreeCountCreateOrConnectWithoutProfileInput = {
    where: JYFreeCountWhereUniqueInput
    create: XOR<JYFreeCountCreateWithoutProfileInput, JYFreeCountUncheckedCreateWithoutProfileInput>
  }

  export type JYFreeCountCreateManyProfileInputEnvelope = {
    data: Enumerable<JYFreeCountCreateManyProfileInput>
    skipDuplicates?: boolean
  }

  export type ArticleUpsertWithWhereUniqueWithoutProfileInput = {
    where: ArticleWhereUniqueInput
    update: XOR<ArticleUpdateWithoutProfileInput, ArticleUncheckedUpdateWithoutProfileInput>
    create: XOR<ArticleCreateWithoutProfileInput, ArticleUncheckedCreateWithoutProfileInput>
  }

  export type ArticleUpdateWithWhereUniqueWithoutProfileInput = {
    where: ArticleWhereUniqueInput
    data: XOR<ArticleUpdateWithoutProfileInput, ArticleUncheckedUpdateWithoutProfileInput>
  }

  export type ArticleUpdateManyWithWhereWithoutProfileInput = {
    where: ArticleScalarWhereInput
    data: XOR<ArticleUpdateManyMutationInput, ArticleUncheckedUpdateManyWithoutArticlesInput>
  }

  export type ArticleScalarWhereInput = {
    AND?: Enumerable<ArticleScalarWhereInput>
    OR?: Enumerable<ArticleScalarWhereInput>
    NOT?: Enumerable<ArticleScalarWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    link?: StringFilter | string
    source?: StringNullableFilter | string | null
    title?: StringNullableFilter | string | null
    image?: StringNullableFilter | string | null
    excerpt?: StringNullableFilter | string | null
    profileId?: StringFilter | string
  }

  export type JYFreeCountUpsertWithWhereUniqueWithoutProfileInput = {
    where: JYFreeCountWhereUniqueInput
    update: XOR<JYFreeCountUpdateWithoutProfileInput, JYFreeCountUncheckedUpdateWithoutProfileInput>
    create: XOR<JYFreeCountCreateWithoutProfileInput, JYFreeCountUncheckedCreateWithoutProfileInput>
  }

  export type JYFreeCountUpdateWithWhereUniqueWithoutProfileInput = {
    where: JYFreeCountWhereUniqueInput
    data: XOR<JYFreeCountUpdateWithoutProfileInput, JYFreeCountUncheckedUpdateWithoutProfileInput>
  }

  export type JYFreeCountUpdateManyWithWhereWithoutProfileInput = {
    where: JYFreeCountScalarWhereInput
    data: XOR<JYFreeCountUpdateManyMutationInput, JYFreeCountUncheckedUpdateManyWithoutFreeCountsInput>
  }

  export type JYFreeCountScalarWhereInput = {
    AND?: Enumerable<JYFreeCountScalarWhereInput>
    OR?: Enumerable<JYFreeCountScalarWhereInput>
    NOT?: Enumerable<JYFreeCountScalarWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    cycle?: IntFilter | number
    count?: IntFilter | number
    profileId?: StringFilter | string
  }

  export type JYProfileCreateWithoutFreeCountsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    articles?: ArticleCreateNestedManyWithoutProfileInput
  }

  export type JYProfileUncheckedCreateWithoutFreeCountsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    articles?: ArticleUncheckedCreateNestedManyWithoutProfileInput
  }

  export type JYProfileCreateOrConnectWithoutFreeCountsInput = {
    where: JYProfileWhereUniqueInput
    create: XOR<JYProfileCreateWithoutFreeCountsInput, JYProfileUncheckedCreateWithoutFreeCountsInput>
  }

  export type JYProfileUpsertWithoutFreeCountsInput = {
    update: XOR<JYProfileUpdateWithoutFreeCountsInput, JYProfileUncheckedUpdateWithoutFreeCountsInput>
    create: XOR<JYProfileCreateWithoutFreeCountsInput, JYProfileUncheckedCreateWithoutFreeCountsInput>
  }

  export type JYProfileUpdateWithoutFreeCountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    articles?: ArticleUpdateManyWithoutProfileNestedInput
  }

  export type JYProfileUncheckedUpdateWithoutFreeCountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    articles?: ArticleUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type JYProfileCreateWithoutArticlesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    freeCounts?: JYFreeCountCreateNestedManyWithoutProfileInput
  }

  export type JYProfileUncheckedCreateWithoutArticlesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    freeCounts?: JYFreeCountUncheckedCreateNestedManyWithoutProfileInput
  }

  export type JYProfileCreateOrConnectWithoutArticlesInput = {
    where: JYProfileWhereUniqueInput
    create: XOR<JYProfileCreateWithoutArticlesInput, JYProfileUncheckedCreateWithoutArticlesInput>
  }

  export type JYProfileUpsertWithoutArticlesInput = {
    update: XOR<JYProfileUpdateWithoutArticlesInput, JYProfileUncheckedUpdateWithoutArticlesInput>
    create: XOR<JYProfileCreateWithoutArticlesInput, JYProfileUncheckedCreateWithoutArticlesInput>
  }

  export type JYProfileUpdateWithoutArticlesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    freeCounts?: JYFreeCountUpdateManyWithoutProfileNestedInput
  }

  export type JYProfileUncheckedUpdateWithoutArticlesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    freeCounts?: JYFreeCountUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ProductSnapshotCreateWithoutProductInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    snapshotPrice: Decimal | DecimalJsLike | number | string
    tenantId?: string
    order: OrderCreateNestedOneWithoutProductSnapshotsInput
  }

  export type ProductSnapshotUncheckedCreateWithoutProductInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    snapshotPrice: Decimal | DecimalJsLike | number | string
    orderId: string
    tenantId?: string
  }

  export type ProductSnapshotCreateOrConnectWithoutProductInput = {
    where: ProductSnapshotWhereUniqueInput
    create: XOR<ProductSnapshotCreateWithoutProductInput, ProductSnapshotUncheckedCreateWithoutProductInput>
  }

  export type ProductSnapshotCreateManyProductInputEnvelope = {
    data: Enumerable<ProductSnapshotCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type AppCreateWithoutProductsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hashedAppToken?: string | null
    hashedPassword: string
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    displayName: string
    description?: string | null
    isDeleted?: boolean | null
    customers?: CustomerCreateNestedManyWithoutAppInput
    orders?: OrderCreateNestedManyWithoutAppInput
    tenant?: TenantCreateNestedOneWithoutAppInput
  }

  export type AppUncheckedCreateWithoutProductsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hashedAppToken?: string | null
    hashedPassword: string
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    displayName: string
    description?: string | null
    isDeleted?: boolean | null
    tenantId?: string
    customers?: CustomerUncheckedCreateNestedManyWithoutAppInput
    orders?: OrderUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppCreateOrConnectWithoutProductsInput = {
    where: AppWhereUniqueInput
    create: XOR<AppCreateWithoutProductsInput, AppUncheckedCreateWithoutProductsInput>
  }

  export type ProductSnapshotUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductSnapshotWhereUniqueInput
    update: XOR<ProductSnapshotUpdateWithoutProductInput, ProductSnapshotUncheckedUpdateWithoutProductInput>
    create: XOR<ProductSnapshotCreateWithoutProductInput, ProductSnapshotUncheckedCreateWithoutProductInput>
  }

  export type ProductSnapshotUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductSnapshotWhereUniqueInput
    data: XOR<ProductSnapshotUpdateWithoutProductInput, ProductSnapshotUncheckedUpdateWithoutProductInput>
  }

  export type ProductSnapshotUpdateManyWithWhereWithoutProductInput = {
    where: ProductSnapshotScalarWhereInput
    data: XOR<ProductSnapshotUpdateManyMutationInput, ProductSnapshotUncheckedUpdateManyWithoutProductSnapshotsInput>
  }

  export type ProductSnapshotScalarWhereInput = {
    AND?: Enumerable<ProductSnapshotScalarWhereInput>
    OR?: Enumerable<ProductSnapshotScalarWhereInput>
    NOT?: Enumerable<ProductSnapshotScalarWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    snapshotPrice?: DecimalFilter | Decimal | DecimalJsLike | number | string
    orderId?: StringFilter | string
    productId?: StringFilter | string
    tenantId?: StringFilter | string
  }

  export type AppUpsertWithoutProductsInput = {
    update: XOR<AppUpdateWithoutProductsInput, AppUncheckedUpdateWithoutProductsInput>
    create: XOR<AppCreateWithoutProductsInput, AppUncheckedCreateWithoutProductsInput>
  }

  export type AppUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hashedAppToken?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    customers?: CustomerUpdateManyWithoutAppNestedInput
    orders?: OrderUpdateManyWithoutAppNestedInput
    tenant?: TenantUpdateOneWithoutAppNestedInput
  }

  export type AppUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hashedAppToken?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    customers?: CustomerUncheckedUpdateManyWithoutAppNestedInput
    orders?: OrderUncheckedUpdateManyWithoutAppNestedInput
  }

  export type OrderCreateWithoutPayInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    serial: number
    status: OrderStatus
    isDeleted?: boolean | null
    tenantId?: string
    customer: CustomerCreateNestedOneWithoutOrdersInput
    productSnapshots?: ProductSnapshotCreateNestedManyWithoutOrderInput
    App?: AppCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutPayInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    serial: number
    status: OrderStatus
    customerId: string
    appId?: string
    isDeleted?: boolean | null
    tenantId?: string
    productSnapshots?: ProductSnapshotUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutPayInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutPayInput, OrderUncheckedCreateWithoutPayInput>
  }

  export type OrderUpsertWithoutPayInput = {
    update: XOR<OrderUpdateWithoutPayInput, OrderUncheckedUpdateWithoutPayInput>
    create: XOR<OrderCreateWithoutPayInput, OrderUncheckedCreateWithoutPayInput>
  }

  export type OrderUpdateWithoutPayInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serial?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    customer?: CustomerUpdateOneRequiredWithoutOrdersNestedInput
    productSnapshots?: ProductSnapshotUpdateManyWithoutOrderNestedInput
    App?: AppUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutPayInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serial?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    customerId?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    productSnapshots?: ProductSnapshotUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type AppCreateWithoutCustomersInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hashedAppToken?: string | null
    hashedPassword: string
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    displayName: string
    description?: string | null
    isDeleted?: boolean | null
    products?: ProductCreateNestedManyWithoutAppInput
    orders?: OrderCreateNestedManyWithoutAppInput
    tenant?: TenantCreateNestedOneWithoutAppInput
  }

  export type AppUncheckedCreateWithoutCustomersInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hashedAppToken?: string | null
    hashedPassword: string
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    displayName: string
    description?: string | null
    isDeleted?: boolean | null
    tenantId?: string
    products?: ProductUncheckedCreateNestedManyWithoutAppInput
    orders?: OrderUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppCreateOrConnectWithoutCustomersInput = {
    where: AppWhereUniqueInput
    create: XOR<AppCreateWithoutCustomersInput, AppUncheckedCreateWithoutCustomersInput>
  }

  export type OrderCreateWithoutCustomerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    serial: number
    status: OrderStatus
    isDeleted?: boolean | null
    tenantId?: string
    pay?: PayCreateNestedOneWithoutOrderInput
    productSnapshots?: ProductSnapshotCreateNestedManyWithoutOrderInput
    App?: AppCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutCustomerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    serial: number
    status: OrderStatus
    appId?: string
    isDeleted?: boolean | null
    tenantId?: string
    pay?: PayUncheckedCreateNestedOneWithoutOrderInput
    productSnapshots?: ProductSnapshotUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutCustomerInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutCustomerInput, OrderUncheckedCreateWithoutCustomerInput>
  }

  export type OrderCreateManyCustomerInputEnvelope = {
    data: Enumerable<OrderCreateManyCustomerInput>
    skipDuplicates?: boolean
  }

  export type LegacyProfileCreateWithoutCustomerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    license: string
    refreshToken: string
  }

  export type LegacyProfileUncheckedCreateWithoutCustomerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    license: string
    refreshToken: string
  }

  export type LegacyProfileCreateOrConnectWithoutCustomerInput = {
    where: LegacyProfileWhereUniqueInput
    create: XOR<LegacyProfileCreateWithoutCustomerInput, LegacyProfileUncheckedCreateWithoutCustomerInput>
  }

  export type ProfileCreateWithoutCustomerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    productType?: ProductType
    plan?: number | null
    amount?: number | null
    expireAt?: Date | string | null
    tenantId?: string
  }

  export type ProfileUncheckedCreateWithoutCustomerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    productType?: ProductType
    plan?: number | null
    amount?: number | null
    expireAt?: Date | string | null
    tenantId?: string
  }

  export type ProfileCreateOrConnectWithoutCustomerInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutCustomerInput, ProfileUncheckedCreateWithoutCustomerInput>
  }

  export type WeixinProfileCreateWithoutCustomerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    unionid?: string | null
    loginOpenid: string
    headimgurl: string
    nickname: string
    sex: number
    tenantId?: string
  }

  export type WeixinProfileUncheckedCreateWithoutCustomerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    unionid?: string | null
    loginOpenid: string
    headimgurl: string
    nickname: string
    sex: number
    tenantId?: string
  }

  export type WeixinProfileCreateOrConnectWithoutCustomerInput = {
    where: WeixinProfileWhereUniqueInput
    create: XOR<WeixinProfileCreateWithoutCustomerInput, WeixinProfileUncheckedCreateWithoutCustomerInput>
  }

  export type AppUpsertWithoutCustomersInput = {
    update: XOR<AppUpdateWithoutCustomersInput, AppUncheckedUpdateWithoutCustomersInput>
    create: XOR<AppCreateWithoutCustomersInput, AppUncheckedCreateWithoutCustomersInput>
  }

  export type AppUpdateWithoutCustomersInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hashedAppToken?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    products?: ProductUpdateManyWithoutAppNestedInput
    orders?: OrderUpdateManyWithoutAppNestedInput
    tenant?: TenantUpdateOneWithoutAppNestedInput
  }

  export type AppUncheckedUpdateWithoutCustomersInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hashedAppToken?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    products?: ProductUncheckedUpdateManyWithoutAppNestedInput
    orders?: OrderUncheckedUpdateManyWithoutAppNestedInput
  }

  export type OrderUpsertWithWhereUniqueWithoutCustomerInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutCustomerInput, OrderUncheckedUpdateWithoutCustomerInput>
    create: XOR<OrderCreateWithoutCustomerInput, OrderUncheckedCreateWithoutCustomerInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutCustomerInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutCustomerInput, OrderUncheckedUpdateWithoutCustomerInput>
  }

  export type OrderUpdateManyWithWhereWithoutCustomerInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutOrdersInput>
  }

  export type LegacyProfileUpsertWithoutCustomerInput = {
    update: XOR<LegacyProfileUpdateWithoutCustomerInput, LegacyProfileUncheckedUpdateWithoutCustomerInput>
    create: XOR<LegacyProfileCreateWithoutCustomerInput, LegacyProfileUncheckedCreateWithoutCustomerInput>
  }

  export type LegacyProfileUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    license?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
  }

  export type LegacyProfileUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    license?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUpsertWithoutCustomerInput = {
    update: XOR<ProfileUpdateWithoutCustomerInput, ProfileUncheckedUpdateWithoutCustomerInput>
    create: XOR<ProfileCreateWithoutCustomerInput, ProfileUncheckedCreateWithoutCustomerInput>
  }

  export type ProfileUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productType?: EnumProductTypeFieldUpdateOperationsInput | ProductType
    plan?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    expireAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productType?: EnumProductTypeFieldUpdateOperationsInput | ProductType
    plan?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    expireAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type WeixinProfileUpsertWithoutCustomerInput = {
    update: XOR<WeixinProfileUpdateWithoutCustomerInput, WeixinProfileUncheckedUpdateWithoutCustomerInput>
    create: XOR<WeixinProfileCreateWithoutCustomerInput, WeixinProfileUncheckedCreateWithoutCustomerInput>
  }

  export type WeixinProfileUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    loginOpenid?: StringFieldUpdateOperationsInput | string
    headimgurl?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    sex?: IntFieldUpdateOperationsInput | number
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type WeixinProfileUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unionid?: NullableStringFieldUpdateOperationsInput | string | null
    loginOpenid?: StringFieldUpdateOperationsInput | string
    headimgurl?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    sex?: IntFieldUpdateOperationsInput | number
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerCreateWithoutWeixinProfileInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email?: string | null
    hashedPassword?: string | null
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    isDeleted?: boolean | null
    tenantId?: string
    app: AppCreateNestedOneWithoutCustomersInput
    orders?: OrderCreateNestedManyWithoutCustomerInput
    legacyProfile?: LegacyProfileCreateNestedOneWithoutCustomerInput
    profile?: ProfileCreateNestedOneWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutWeixinProfileInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    appId: string
    email?: string | null
    hashedPassword?: string | null
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    isDeleted?: boolean | null
    tenantId?: string
    orders?: OrderUncheckedCreateNestedManyWithoutCustomerInput
    legacyProfile?: LegacyProfileUncheckedCreateNestedOneWithoutCustomerInput
    profile?: ProfileUncheckedCreateNestedOneWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutWeixinProfileInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutWeixinProfileInput, CustomerUncheckedCreateWithoutWeixinProfileInput>
  }

  export type CustomerUpsertWithoutWeixinProfileInput = {
    update: XOR<CustomerUpdateWithoutWeixinProfileInput, CustomerUncheckedUpdateWithoutWeixinProfileInput>
    create: XOR<CustomerCreateWithoutWeixinProfileInput, CustomerUncheckedCreateWithoutWeixinProfileInput>
  }

  export type CustomerUpdateWithoutWeixinProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    app?: AppUpdateOneRequiredWithoutCustomersNestedInput
    orders?: OrderUpdateManyWithoutCustomerNestedInput
    legacyProfile?: LegacyProfileUpdateOneWithoutCustomerNestedInput
    profile?: ProfileUpdateOneWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutWeixinProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    orders?: OrderUncheckedUpdateManyWithoutCustomerNestedInput
    legacyProfile?: LegacyProfileUncheckedUpdateOneWithoutCustomerNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutCustomerNestedInput
  }

  export type CustomerCreateWithoutProfileInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email?: string | null
    hashedPassword?: string | null
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    isDeleted?: boolean | null
    tenantId?: string
    app: AppCreateNestedOneWithoutCustomersInput
    orders?: OrderCreateNestedManyWithoutCustomerInput
    legacyProfile?: LegacyProfileCreateNestedOneWithoutCustomerInput
    weixinProfile?: WeixinProfileCreateNestedOneWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutProfileInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    appId: string
    email?: string | null
    hashedPassword?: string | null
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    isDeleted?: boolean | null
    tenantId?: string
    orders?: OrderUncheckedCreateNestedManyWithoutCustomerInput
    legacyProfile?: LegacyProfileUncheckedCreateNestedOneWithoutCustomerInput
    weixinProfile?: WeixinProfileUncheckedCreateNestedOneWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutProfileInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutProfileInput, CustomerUncheckedCreateWithoutProfileInput>
  }

  export type CustomerUpsertWithoutProfileInput = {
    update: XOR<CustomerUpdateWithoutProfileInput, CustomerUncheckedUpdateWithoutProfileInput>
    create: XOR<CustomerCreateWithoutProfileInput, CustomerUncheckedCreateWithoutProfileInput>
  }

  export type CustomerUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    app?: AppUpdateOneRequiredWithoutCustomersNestedInput
    orders?: OrderUpdateManyWithoutCustomerNestedInput
    legacyProfile?: LegacyProfileUpdateOneWithoutCustomerNestedInput
    weixinProfile?: WeixinProfileUpdateOneWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    orders?: OrderUncheckedUpdateManyWithoutCustomerNestedInput
    legacyProfile?: LegacyProfileUncheckedUpdateOneWithoutCustomerNestedInput
    weixinProfile?: WeixinProfileUncheckedUpdateOneWithoutCustomerNestedInput
  }

  export type CustomerCreateWithoutLegacyProfileInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email?: string | null
    hashedPassword?: string | null
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    isDeleted?: boolean | null
    tenantId?: string
    app: AppCreateNestedOneWithoutCustomersInput
    orders?: OrderCreateNestedManyWithoutCustomerInput
    profile?: ProfileCreateNestedOneWithoutCustomerInput
    weixinProfile?: WeixinProfileCreateNestedOneWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutLegacyProfileInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    appId: string
    email?: string | null
    hashedPassword?: string | null
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    isDeleted?: boolean | null
    tenantId?: string
    orders?: OrderUncheckedCreateNestedManyWithoutCustomerInput
    profile?: ProfileUncheckedCreateNestedOneWithoutCustomerInput
    weixinProfile?: WeixinProfileUncheckedCreateNestedOneWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutLegacyProfileInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutLegacyProfileInput, CustomerUncheckedCreateWithoutLegacyProfileInput>
  }

  export type CustomerUpsertWithoutLegacyProfileInput = {
    update: XOR<CustomerUpdateWithoutLegacyProfileInput, CustomerUncheckedUpdateWithoutLegacyProfileInput>
    create: XOR<CustomerCreateWithoutLegacyProfileInput, CustomerUncheckedCreateWithoutLegacyProfileInput>
  }

  export type CustomerUpdateWithoutLegacyProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    app?: AppUpdateOneRequiredWithoutCustomersNestedInput
    orders?: OrderUpdateManyWithoutCustomerNestedInput
    profile?: ProfileUpdateOneWithoutCustomerNestedInput
    weixinProfile?: WeixinProfileUpdateOneWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutLegacyProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    orders?: OrderUncheckedUpdateManyWithoutCustomerNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutCustomerNestedInput
    weixinProfile?: WeixinProfileUncheckedUpdateOneWithoutCustomerNestedInput
  }

  export type OrderCreateWithoutProductSnapshotsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    serial: number
    status: OrderStatus
    isDeleted?: boolean | null
    tenantId?: string
    customer: CustomerCreateNestedOneWithoutOrdersInput
    pay?: PayCreateNestedOneWithoutOrderInput
    App?: AppCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutProductSnapshotsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    serial: number
    status: OrderStatus
    customerId: string
    appId?: string
    isDeleted?: boolean | null
    tenantId?: string
    pay?: PayUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutProductSnapshotsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutProductSnapshotsInput, OrderUncheckedCreateWithoutProductSnapshotsInput>
  }

  export type ProductCreateWithoutProductSnapshotsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    price: Decimal | DecimalJsLike | number | string
    productType?: ProductType
    plan?: number | null
    amount?: number | null
    extendedDescriptionData?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: string | null
    storeDuration?: number | null
    hasAds?: string | null
    tecSupport?: string | null
    validityPeriod?: number | null
    isDeleted?: boolean | null
    tenantId?: string
    restricted?: number
    app: AppCreateNestedOneWithoutProductsInput
  }

  export type ProductUncheckedCreateWithoutProductSnapshotsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    price: Decimal | DecimalJsLike | number | string
    productType?: ProductType
    plan?: number | null
    amount?: number | null
    extendedDescriptionData?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: string | null
    storeDuration?: number | null
    hasAds?: string | null
    tecSupport?: string | null
    validityPeriod?: number | null
    appId: string
    isDeleted?: boolean | null
    tenantId?: string
    restricted?: number
  }

  export type ProductCreateOrConnectWithoutProductSnapshotsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProductSnapshotsInput, ProductUncheckedCreateWithoutProductSnapshotsInput>
  }

  export type OrderUpsertWithoutProductSnapshotsInput = {
    update: XOR<OrderUpdateWithoutProductSnapshotsInput, OrderUncheckedUpdateWithoutProductSnapshotsInput>
    create: XOR<OrderCreateWithoutProductSnapshotsInput, OrderUncheckedCreateWithoutProductSnapshotsInput>
  }

  export type OrderUpdateWithoutProductSnapshotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serial?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    customer?: CustomerUpdateOneRequiredWithoutOrdersNestedInput
    pay?: PayUpdateOneWithoutOrderNestedInput
    App?: AppUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutProductSnapshotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serial?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    customerId?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    pay?: PayUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type ProductUpsertWithoutProductSnapshotsInput = {
    update: XOR<ProductUpdateWithoutProductSnapshotsInput, ProductUncheckedUpdateWithoutProductSnapshotsInput>
    create: XOR<ProductCreateWithoutProductSnapshotsInput, ProductUncheckedCreateWithoutProductSnapshotsInput>
  }

  export type ProductUpdateWithoutProductSnapshotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productType?: EnumProductTypeFieldUpdateOperationsInput | ProductType
    plan?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    extendedDescriptionData?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableStringFieldUpdateOperationsInput | string | null
    storeDuration?: NullableIntFieldUpdateOperationsInput | number | null
    hasAds?: NullableStringFieldUpdateOperationsInput | string | null
    tecSupport?: NullableStringFieldUpdateOperationsInput | string | null
    validityPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    restricted?: IntFieldUpdateOperationsInput | number
    app?: AppUpdateOneRequiredWithoutProductsNestedInput
  }

  export type ProductUncheckedUpdateWithoutProductSnapshotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productType?: EnumProductTypeFieldUpdateOperationsInput | ProductType
    plan?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    extendedDescriptionData?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableStringFieldUpdateOperationsInput | string | null
    storeDuration?: NullableIntFieldUpdateOperationsInput | number | null
    hasAds?: NullableStringFieldUpdateOperationsInput | string | null
    tecSupport?: NullableStringFieldUpdateOperationsInput | string | null
    validityPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    appId?: StringFieldUpdateOperationsInput | string
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    restricted?: IntFieldUpdateOperationsInput | number
  }

  export type CustomerCreateWithoutOrdersInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email?: string | null
    hashedPassword?: string | null
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    isDeleted?: boolean | null
    tenantId?: string
    app: AppCreateNestedOneWithoutCustomersInput
    legacyProfile?: LegacyProfileCreateNestedOneWithoutCustomerInput
    profile?: ProfileCreateNestedOneWithoutCustomerInput
    weixinProfile?: WeixinProfileCreateNestedOneWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutOrdersInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    appId: string
    email?: string | null
    hashedPassword?: string | null
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    isDeleted?: boolean | null
    tenantId?: string
    legacyProfile?: LegacyProfileUncheckedCreateNestedOneWithoutCustomerInput
    profile?: ProfileUncheckedCreateNestedOneWithoutCustomerInput
    weixinProfile?: WeixinProfileUncheckedCreateNestedOneWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutOrdersInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutOrdersInput, CustomerUncheckedCreateWithoutOrdersInput>
  }

  export type PayCreateWithoutOrderInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: PayStatus
    transactionId: string
    tenantId?: string
  }

  export type PayUncheckedCreateWithoutOrderInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: PayStatus
    transactionId: string
    tenantId?: string
  }

  export type PayCreateOrConnectWithoutOrderInput = {
    where: PayWhereUniqueInput
    create: XOR<PayCreateWithoutOrderInput, PayUncheckedCreateWithoutOrderInput>
  }

  export type ProductSnapshotCreateWithoutOrderInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    snapshotPrice: Decimal | DecimalJsLike | number | string
    tenantId?: string
    product: ProductCreateNestedOneWithoutProductSnapshotsInput
  }

  export type ProductSnapshotUncheckedCreateWithoutOrderInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    snapshotPrice: Decimal | DecimalJsLike | number | string
    productId: string
    tenantId?: string
  }

  export type ProductSnapshotCreateOrConnectWithoutOrderInput = {
    where: ProductSnapshotWhereUniqueInput
    create: XOR<ProductSnapshotCreateWithoutOrderInput, ProductSnapshotUncheckedCreateWithoutOrderInput>
  }

  export type ProductSnapshotCreateManyOrderInputEnvelope = {
    data: Enumerable<ProductSnapshotCreateManyOrderInput>
    skipDuplicates?: boolean
  }

  export type AppCreateWithoutOrdersInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hashedAppToken?: string | null
    hashedPassword: string
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    displayName: string
    description?: string | null
    isDeleted?: boolean | null
    products?: ProductCreateNestedManyWithoutAppInput
    customers?: CustomerCreateNestedManyWithoutAppInput
    tenant?: TenantCreateNestedOneWithoutAppInput
  }

  export type AppUncheckedCreateWithoutOrdersInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hashedAppToken?: string | null
    hashedPassword: string
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    displayName: string
    description?: string | null
    isDeleted?: boolean | null
    tenantId?: string
    products?: ProductUncheckedCreateNestedManyWithoutAppInput
    customers?: CustomerUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppCreateOrConnectWithoutOrdersInput = {
    where: AppWhereUniqueInput
    create: XOR<AppCreateWithoutOrdersInput, AppUncheckedCreateWithoutOrdersInput>
  }

  export type CustomerUpsertWithoutOrdersInput = {
    update: XOR<CustomerUpdateWithoutOrdersInput, CustomerUncheckedUpdateWithoutOrdersInput>
    create: XOR<CustomerCreateWithoutOrdersInput, CustomerUncheckedCreateWithoutOrdersInput>
  }

  export type CustomerUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    app?: AppUpdateOneRequiredWithoutCustomersNestedInput
    legacyProfile?: LegacyProfileUpdateOneWithoutCustomerNestedInput
    profile?: ProfileUpdateOneWithoutCustomerNestedInput
    weixinProfile?: WeixinProfileUpdateOneWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    legacyProfile?: LegacyProfileUncheckedUpdateOneWithoutCustomerNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutCustomerNestedInput
    weixinProfile?: WeixinProfileUncheckedUpdateOneWithoutCustomerNestedInput
  }

  export type PayUpsertWithoutOrderInput = {
    update: XOR<PayUpdateWithoutOrderInput, PayUncheckedUpdateWithoutOrderInput>
    create: XOR<PayCreateWithoutOrderInput, PayUncheckedCreateWithoutOrderInput>
  }

  export type PayUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPayStatusFieldUpdateOperationsInput | PayStatus
    transactionId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type PayUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPayStatusFieldUpdateOperationsInput | PayStatus
    transactionId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductSnapshotUpsertWithWhereUniqueWithoutOrderInput = {
    where: ProductSnapshotWhereUniqueInput
    update: XOR<ProductSnapshotUpdateWithoutOrderInput, ProductSnapshotUncheckedUpdateWithoutOrderInput>
    create: XOR<ProductSnapshotCreateWithoutOrderInput, ProductSnapshotUncheckedCreateWithoutOrderInput>
  }

  export type ProductSnapshotUpdateWithWhereUniqueWithoutOrderInput = {
    where: ProductSnapshotWhereUniqueInput
    data: XOR<ProductSnapshotUpdateWithoutOrderInput, ProductSnapshotUncheckedUpdateWithoutOrderInput>
  }

  export type ProductSnapshotUpdateManyWithWhereWithoutOrderInput = {
    where: ProductSnapshotScalarWhereInput
    data: XOR<ProductSnapshotUpdateManyMutationInput, ProductSnapshotUncheckedUpdateManyWithoutProductSnapshotsInput>
  }

  export type AppUpsertWithoutOrdersInput = {
    update: XOR<AppUpdateWithoutOrdersInput, AppUncheckedUpdateWithoutOrdersInput>
    create: XOR<AppCreateWithoutOrdersInput, AppUncheckedCreateWithoutOrdersInput>
  }

  export type AppUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hashedAppToken?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    products?: ProductUpdateManyWithoutAppNestedInput
    customers?: CustomerUpdateManyWithoutAppNestedInput
    tenant?: TenantUpdateOneWithoutAppNestedInput
  }

  export type AppUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hashedAppToken?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    products?: ProductUncheckedUpdateManyWithoutAppNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutAppNestedInput
  }

  export type ProductCreateManyAppInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    price: Decimal | DecimalJsLike | number | string
    productType?: ProductType
    plan?: number | null
    amount?: number | null
    extendedDescriptionData?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: string | null
    storeDuration?: number | null
    hasAds?: string | null
    tecSupport?: string | null
    validityPeriod?: number | null
    isDeleted?: boolean | null
    tenantId?: string
    restricted?: number
  }

  export type CustomerCreateManyAppInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email?: string | null
    hashedPassword?: string | null
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    isDeleted?: boolean | null
    tenantId?: string
  }

  export type OrderCreateManyAppInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    serial: number
    status: OrderStatus
    customerId: string
    isDeleted?: boolean | null
    tenantId?: string
  }

  export type ProductUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productType?: EnumProductTypeFieldUpdateOperationsInput | ProductType
    plan?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    extendedDescriptionData?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableStringFieldUpdateOperationsInput | string | null
    storeDuration?: NullableIntFieldUpdateOperationsInput | number | null
    hasAds?: NullableStringFieldUpdateOperationsInput | string | null
    tecSupport?: NullableStringFieldUpdateOperationsInput | string | null
    validityPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    restricted?: IntFieldUpdateOperationsInput | number
    productSnapshots?: ProductSnapshotUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productType?: EnumProductTypeFieldUpdateOperationsInput | ProductType
    plan?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    extendedDescriptionData?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableStringFieldUpdateOperationsInput | string | null
    storeDuration?: NullableIntFieldUpdateOperationsInput | number | null
    hasAds?: NullableStringFieldUpdateOperationsInput | string | null
    tecSupport?: NullableStringFieldUpdateOperationsInput | string | null
    validityPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    restricted?: IntFieldUpdateOperationsInput | number
    productSnapshots?: ProductSnapshotUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productType?: EnumProductTypeFieldUpdateOperationsInput | ProductType
    plan?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    extendedDescriptionData?: NullableJsonNullValueInput | InputJsonValue
    fileSize?: NullableStringFieldUpdateOperationsInput | string | null
    storeDuration?: NullableIntFieldUpdateOperationsInput | number | null
    hasAds?: NullableStringFieldUpdateOperationsInput | string | null
    tecSupport?: NullableStringFieldUpdateOperationsInput | string | null
    validityPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    restricted?: IntFieldUpdateOperationsInput | number
  }

  export type CustomerUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    orders?: OrderUpdateManyWithoutCustomerNestedInput
    legacyProfile?: LegacyProfileUpdateOneWithoutCustomerNestedInput
    profile?: ProfileUpdateOneWithoutCustomerNestedInput
    weixinProfile?: WeixinProfileUpdateOneWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    orders?: OrderUncheckedUpdateManyWithoutCustomerNestedInput
    legacyProfile?: LegacyProfileUncheckedUpdateOneWithoutCustomerNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutCustomerNestedInput
    weixinProfile?: WeixinProfileUncheckedUpdateOneWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateManyWithoutCustomersInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type OrderUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serial?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    customer?: CustomerUpdateOneRequiredWithoutOrdersNestedInput
    pay?: PayUpdateOneWithoutOrderNestedInput
    productSnapshots?: ProductSnapshotUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serial?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    customerId?: StringFieldUpdateOperationsInput | string
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    pay?: PayUncheckedUpdateOneWithoutOrderNestedInput
    productSnapshots?: ProductSnapshotUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serial?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    customerId?: StringFieldUpdateOperationsInput | string
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type AppCreateManyTenantInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hashedAppToken?: string | null
    hashedPassword: string
    hashedRefreshToken?: string | null
    recoveryCode?: string | null
    recoveryToken?: string | null
    displayName: string
    description?: string | null
    isDeleted?: boolean | null
  }

  export type AppUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hashedAppToken?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    products?: ProductUpdateManyWithoutAppNestedInput
    customers?: CustomerUpdateManyWithoutAppNestedInput
    orders?: OrderUpdateManyWithoutAppNestedInput
  }

  export type AppUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hashedAppToken?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    products?: ProductUncheckedUpdateManyWithoutAppNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutAppNestedInput
    orders?: OrderUncheckedUpdateManyWithoutAppNestedInput
  }

  export type AppUncheckedUpdateManyWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hashedAppToken?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    hashedRefreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryCode?: NullableStringFieldUpdateOperationsInput | string | null
    recoveryToken?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ArticleCreateManyProfileInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    link: string
    source?: string | null
    title?: string | null
    image?: string | null
    excerpt?: string | null
  }

  export type JYFreeCountCreateManyProfileInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    cycle: number
    count: number
  }

  export type ArticleUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    link?: StringFieldUpdateOperationsInput | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    excerpt?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ArticleUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    link?: StringFieldUpdateOperationsInput | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    excerpt?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ArticleUncheckedUpdateManyWithoutArticlesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    link?: StringFieldUpdateOperationsInput | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    excerpt?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JYFreeCountUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cycle?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
  }

  export type JYFreeCountUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cycle?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
  }

  export type JYFreeCountUncheckedUpdateManyWithoutFreeCountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cycle?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
  }

  export type ProductSnapshotCreateManyProductInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    snapshotPrice: Decimal | DecimalJsLike | number | string
    orderId: string
    tenantId?: string
  }

  export type ProductSnapshotUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    snapshotPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tenantId?: StringFieldUpdateOperationsInput | string
    order?: OrderUpdateOneRequiredWithoutProductSnapshotsNestedInput
  }

  export type ProductSnapshotUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    snapshotPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductSnapshotUncheckedUpdateManyWithoutProductSnapshotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    snapshotPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type OrderCreateManyCustomerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    serial: number
    status: OrderStatus
    appId?: string
    isDeleted?: boolean | null
    tenantId?: string
  }

  export type OrderUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serial?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    pay?: PayUpdateOneWithoutOrderNestedInput
    productSnapshots?: ProductSnapshotUpdateManyWithoutOrderNestedInput
    App?: AppUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serial?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | OrderStatus
    appId?: StringFieldUpdateOperationsInput | string
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tenantId?: StringFieldUpdateOperationsInput | string
    pay?: PayUncheckedUpdateOneWithoutOrderNestedInput
    productSnapshots?: ProductSnapshotUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type ProductSnapshotCreateManyOrderInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    snapshotPrice: Decimal | DecimalJsLike | number | string
    productId: string
    tenantId?: string
  }

  export type ProductSnapshotUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    snapshotPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tenantId?: StringFieldUpdateOperationsInput | string
    product?: ProductUpdateOneRequiredWithoutProductSnapshotsNestedInput
  }

  export type ProductSnapshotUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    snapshotPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    productId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}